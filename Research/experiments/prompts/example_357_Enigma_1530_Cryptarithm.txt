You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 357
- Name: Enigma 1530 Cryptarithm
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
This problem is based on the Enigma 1530 problem from New Scientist magazine, January 28, 2009. The problem is a cryptarithm puzzle related to Tom Daley, the youngest European diving champion on record. The puzzle is as follows: TOM * 13 = DALEY. Each letter stands for a different digit, and no number starts with a zero. The task is to find the five-digit number represented by DALEY. The constraints of the problem are that all digits must be different, the first digit of TOM and DALEY cannot be zero, and the multiplication of TOM by 13 must equal DALEY.


MiniZinc Model:
include "globals.mzn"; 

int: n = 8;
set of int: Digits = 0..9;
var Digits: T;
var Digits: O;
var Digits: M;
var Digits: D;
var Digits: A;
var Digits: L;
var Digits: E;
var Digits: Y;

array[1..n] of var Digits: x = [T,O,M,D,A,L,E,Y];
var 10000..99999: DALEY;
var 100..999: TOM = 100*T + 10*O + M;

% convert array <-> number
predicate toNum(array[int] of var int: a, var int: n) =
          let { int: len = length(a) } in
          n = sum(i in 1..len) (
            ceil(pow(10.0, int2float(len-i))) * a[i]
          )
          /\ forall(i in 1..len) (a[i] >= 0)
;


% solve satisfy;
solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
   all_different(x) /\
   T > 0 /\ D > 0 /\
   toNum([D,A,L,E,Y], DALEY) /\
   TOM * 13 = DALEY
;


output
[
  "x: " ++ show(x) ++ "\n" ++
  "DALEY: " ++ show(DALEY)
];

Expected Output:
{
  "T": 7,
  "O": 9,
  "M": 6,
  "D": 1,
  "A": 0,
  "L": 3,
  "E": 4,
  "Y": 8,
  "DALEY": 10348
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.