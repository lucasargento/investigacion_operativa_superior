You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 372
- Name: The Gunport Problem
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The Gunport Problem is a puzzle where the goal is to cover a grid of size m x n with dominoes, each of which covers two cells. The dominoes must be placed in such a way that no two adjacent cells are vacant. The problem is to find a placement of the dominoes that satisfies these conditions. The number of dominoes required is calculated based on the size of the grid. If the grid size is divisible by 3, then the number of dominoes is m*n/3. If the remainder when the grid size is divided by 3 is the same for both dimensions, then the number of dominoes is (m*n+2)/3. Otherwise, the number of dominoes is (m*n+1)/3. The problem is solved by searching for a solution that satisfies all these constraints. The output is the number of cells that are not covered by any domino (sum_zeros) and the placement of the dominoes on the grid.


MiniZinc Model:
int: m = 4;
int: n = 4; 
% int: m = 5;
% int: n = 5; % 

int: m3 = m mod 3;
int: n3 = n mod 3;

set of 1..m: M = 1..m;
set of 1..n: N = 1..n;
set of 1..p: P = 1..p;

array[M,N,P] of var 0..1: x;

% compute required number of dominoes
int: p = 
if m3*n3 = 0 then
   (m*n) div 3
elseif m3==n3 then
    (m*n+2) div 3
else
  (m*n+1) div 3
endif
;

% the output matrix
array[M,N] of var 0..n*m: rt;

var int: sum_zeros = sum(i in M, j in M) (bool2int(rt[i,j] = 0));
% var int: z = sum(k in P) (d[k]);

% solve :: int_search([x[i,j,k] | i in M, j in N, k in P], first_fail, indomain_min, complete) maximize sum_zeros;
solve :: int_search([x[i,j,k] | i in M, j in N, k in P], first_fail, indomain_min, complete) satisfy;

constraint
  sum_zeros >= 4
  /\
  % each domino in adjacent cells 
  forall(i in M,j in N,k in P) (
        sum(l in j-1..j+1 where l >= 1 /\ l <= n /\ l != j) (x[i,l,k]) +
        sum(l in i-1..i+1 where l >= 1 /\ l <= m /\ l != i) (x[l,j,k]) >= x[i,j,k]
  )

  /\
  %  each domino covers two cells 
  forall(k in P) (
    sum(i in M,j in N) (x[i,j,k]) = 2
  )
  /\
  % each cell covered by, at most, one domino 
  forall(i in M,j in N) (
      sum(k in P) (x[i,j,k]) <= 1
  )
  /\
  % no two adjacent cells vacant (rows) 
  forall(i in M,j in 1..n-1) (
    sum(c in j..j+1,k in P) (x[i,c,k]) >= 1
  )
  /\
  % no two adjacent cells vacant (columns)
  forall(i in 1..m-1,j in N) (
    sum(r in i..i+1,k in P) (x[r,j,k]) >= 1
  )
  /\ % for the output
  forall(i in M) (
    forall(j in N) (
      rt[i,j] = sum(k in P) (k*x[i,j,k])
    )
  )
;


output 
[
  "sum_zeros: " ++ show(sum_zeros)
] ++
[
  if j = 1 then "\n" else " " endif ++
    show(rt[i,j])
  | i in M, j in N
] ++ ["\n"];

Expected Output:
{
  "x": [
    [
      [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        1
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        1,
        0
      ]
    ],
    [
      [
        0,
        0,
        0,
        1,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        1
      ],
      [
        0,
        0,
        1,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        1,
        0
      ]
    ],
    [
      [
        0,
        0,
        0,
        1,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        1,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    [
      [
        0,
        1,
        0,
        0,
        0,
        0
      ],
      [
        0,
        1,
        0,
        0,
        0,
        0
      ],
      [
        1,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        0,
        0,
        0,
        0,
        0
      ]
    ]
  ],
  "rt": [
    [
      0,
      6,
      0,
      5
    ],
    [
      4,
      6,
      3,
      5
    ],
    [
      4,
      0,
      3,
      0
    ],
    [
      2,
      2,
      1,
      1
    ]
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.