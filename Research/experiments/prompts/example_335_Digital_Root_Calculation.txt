You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 335
- Name: Digital Root Calculation
- Domain: Number Theory
- Objective: satisfaction

Problem Description:
The problem is about finding the digital root of a number. The digital root (also repeated digital sum) of a number is the number obtained by adding all the digits, then adding the digits of that number, and then continuing until a single-digit number is reached. For example, the digital root of 65,536 is 7, because 6 + 5 + 5 + 3 + 6 = 25 and 2 + 5 = 7. The task is to find the digital root for a given number 'x' and also for a range of numbers from 1 to 'm'. The digital root is calculated using a base 10 number system.


MiniZinc Model:
int: n = 5;
int: m = 112;
int: x = 65536;
var int: d_x;
array[1..m] of var int: d_roots;

%
% digital root 
%
predicate digital_root(var int: num, var int: res, var int: base) =
   res = 1 + ((num-1) mod (base-1))
;


% % solve satisfy;
% solve :: int_search(d_roots, first_fail, indomain_min, complete) satisfy;

constraint
   forall(i in 1..m) (
      digital_root(i, d_roots[i],10)
   )
   /\
   digital_root(x, d_x, 10)
;

output 
[ 
  "x: ", show(x), "\n",
  "d_x: ", show(d_x), "\n",
] ++
[
  % "digital_roots: ", show(d_roots), "\n"
  show(i) ++ ":" ++ show(d_roots[i]) ++ "\n"
  | i in 1..m
] ++ ["\n"];

% output in valid json format
output [
  "{\n",
  "  \"x\": ", show(x), ",\n",
  "  \"d_x\": ", show(d_x), ",\n",
  "  \"digital_roots\":\n  {\n",
] ++ 
[
   % "digital_roots: ", show(d_roots), "\n"
   "    \"" ++ show(i) ++ "\""++ ": " ++ show(d_roots[i]) ++ ",\n"
   | i in 1..m-1
] ++
[
   "    \"" ++ show(m) ++ "\""++ ": " ++ show(d_roots[m]) ++ "\n"
] ++ 
[
  "  }\n",
  "}\n"
];

Expected Output:
{
  "d_x": 7,
  "d_roots": [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.