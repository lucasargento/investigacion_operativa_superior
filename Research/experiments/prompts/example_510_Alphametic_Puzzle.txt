You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 510
- Name: Alphametic Puzzle
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
This is an Alphametic puzzle, a type of cryptarithm in which a set of words is written down in the form of a long addition sum or some other mathematical problem. The objective is to replace the letters of the alphabet with decimal digits to make a valid arithmetic sum. In this particular puzzle, the words are 'VINGT', 'CINQ', 'CINQ', and 'TRENTE'. Each letter represents a unique digit in the range 0-9. The constraints are that all letters represent different digits, the sum of the numbers represented by 'VINGT', 'CINQ', and 'CINQ' equals the number represented by 'TRENTE', and the letters 'V', 'C', and 'T' represent numbers greater than or equal to 1. The goal is to find a valid assignment of digits to letters that satisfies all these constraints.


MiniZinc Model:
include "globals.mzn";
var 0..9: V;
var 0..9: I;
var 0..9: N;
var 0..9: G;
var 0..9: T;
var 0..9: C;
var 0..9: Q;
var 0..9: R;
var 0..9: E;

array[1..9] of var int : fd = [V,I,N,G,T,C,Q,R,E];


constraint
  all_different(fd) /\
            10000*V + 1000*I + 100*N + 10*G + T  +  
                      1000*C + 100*I + 10*N + Q  +
                      1000*C + 100*I + 10*N + Q  = 
 100000*T + 10000*R + 1000*E + 100*N + 10*T + E
  /\
  V >= 1 /\
  C >= 1 /\
  T >= 1
;  



solve satisfy;
% solve :: int_search(x, "first_fail", "indomain", "complete") satisfy;

output
[
  show(fd)
];

Expected Output:
{
  "V": 9,
  "I": 4,
  "N": 8,
  "G": 5,
  "T": 1,
  "C": 6,
  "Q": 3,
  "R": 0,
  "E": 7
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.