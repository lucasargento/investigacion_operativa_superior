You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 474
- Name: K-Dimensional Object Arrangement
- Domain: Geometry
- Objective: minimization

Problem Description:
The problem is about arranging k-dimensional objects in a way that no two objects overlap. Each object is defined by a shape, which is a set of rectangles. Each rectangle in a shape is defined by its size in each dimension and its offset from the base position of the object. The base position of each object and the shape used by each object are decision variables. The problem also involves defining the lower and upper limits for each dimension. The objective is to minimize the sum of the upper limits. The problem is constrained such that each object must use a shape from a specific group of shapes. The problem is illustrated with an example where the objects are 2-dimensional shapes defined by a set of rectangles. The shapes are grouped into three groups, each group representing a different type of shape. The problem is to arrange these shapes in a 2-dimensional space such that no two shapes overlap and the sum of the upper limits in each dimension is minimized.


MiniZinc Model:
include "globals.mzn"; 


int: k = 2; % number of dimensions
int: num_shapes = 8; % number of sids
int: num_boxes = 20; % number of rectangles

% lengths (the l parameter)
array[1..num_boxes, 1..k] of int: rect_size = 
  array2d(1..num_boxes, 1..k,
  [
     % sid 1 
     2,1,  % 1 
     1,2,  % 2
     3,1,  % 3

     % % sid 2
     3,1,  % 4
     1,3,  % 5
     1,1,  % 6

     % % sid 3
     2,1,  % 7
     1,2,  % 8
     3,1,  % 9

     % % sid 4
     3,1,  % 10
     1,1,  % 11
     1,3,  % 12

     % sid 5
     2,1,  % 13
     1,1,  % 14
     2,1,  % 15

     % % sid 6
     3,1,  % 16
     1,1,  % 17
     1,1,  % 18

     % sid 7
     3,2,  % 19
 
     % sid 8
     2,3,  % 20

  ]);

% the t parameter
array[1..num_boxes,1..k] of int: rect_offset = 
array2d(1..num_boxes, 1..k,
[
 % sid 1: 
 0,0,
 0,1,
 1,2,

 % % sid 2:
   
 0,0,
 0,1,
 2,1,

 % sid 3:

 0,0,
 1,1,
 -2,2, % note: negative offset!
 
 % sid 4:

 0,0,
 0,1,
 2,1,

 % sid 5:

 0,0,
 1,1,
 0,2,

 % sid 6:

 0,0,
 0,1,
 2,1,

 % sid 7:

 0,0,

 % sid 8:

 0,0,

]);

array[1..num_shapes] of set of int: shape = 
 [1..3,   % sid 1  for shape A
  4..6,   % sid 2  for shape A
  7..9,   % sid 3  for shape A
  10..12, % sid 4  for shape A
  13..15, % sid 5  for shape B
  16..18, % sid 6  for shape B
  {19},   % sid 7  for shape C
  {20}    % sid 8  for shape C
];

% shape groups (objects), i.e. shape A, B, and C
int: num_shape_groups = 3;
array[1..num_shape_groups] of set of int: shape_groups = [1..4,5..6,7..8];


% decision variables
array[1..num_shape_groups, 1..k] of var 0..5: x;
array[1..num_shape_groups] of var 1..num_shapes: kind;
array[1..k] of var 0..10: lower;
array[1..k] of var 0..10: upper;

var 0..sum([ub(upper[i]) | i in 1..k]): sum_upper = sum(upper);

% solve satisfy;
% solve minimize sum_upper;
solve :: int_search(kind ++ [x[i,j] | i in 1..num_shape_groups, j in 1..k], first_fail, indomain_split, complete) minimize sum_upper;

constraint

  % all_different(kind) 
  % /\

  % geost(k, rect_size, rect_offset, shape, x, kind) 
  geost_bb(k, rect_size, rect_offset, shape, x, kind,lower,upper) 

  /\ % ensure that we pick one shape variant from 
     % each shape group (A, B, and C)
  forall(i in 1..num_shape_groups) (
     kind[i] in shape_groups[i]
  )

  % /\ sum_upper = 9
;

output [
  "x: ", show(x), "\n",
  "kind:  ", show(kind), "\n",
  "lower: ", show(lower), "\n",
  "upper: ", show(upper), "\n",
  "sum_upper: ", show(sum_upper), "\n",
]
++
[
  if j = 1 then "\n" else " " endif ++
    if j = 1 then "kind " ++ show(kind[i]) ++ ": " else "" endif ++
      show(x[i,j]) 
| i in 1..num_shape_groups, j in 1..k
]
;

Expected Output:
{
  "x": [
    [
      0,
      1
    ],
    [
      1,
      0
    ],
    [
      3,
      0
    ]
  ],
  "kind": [
    1,
    5,
    8
  ],
  "lower": [
    0,
    0
  ],
  "upper": [
    5,
    4
  ],
  "_objective": 9
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.