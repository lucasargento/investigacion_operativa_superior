You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 153
- Name: Rehearsal Scheduling Problem
- Domain: Scheduling
- Objective: minimization

Problem Description:
---
Title:    The Rehearsal Problem
Proposer: Barbara Smith
Category: Scheduling and related problems
---

<H3>The Rehearsal Scheduling Problem</H3>

This problem originated at Lancaster University in the 1970s. It is reported to have been devised by a member of staff in the Management Science department, who was a member of an amateur orchestra and formalized the problem whilst waiting to play during a rehearsal.

A concert is to consist of nine pieces of music of different durations each involving a different combination of the five members of the orchestra.

Players can arrive at rehearsals immediately before the first piece in which they are involved and depart immediately after the last piece in which they are involved. The problem is to devise an order in which the pieces can be rehearsed  so as to minimize the total time that players are waiting to play, i.e. the total time when players are present but not currently playing.

In the table below, 1 indicates that the player is required for the corresponding  piece, 0 otherwise. The duration (i.e. time required to rehearse each piece) is in some unspecified time units.


<TABLE>
   <TR><TD>Piece </TD><TD>   1 </TD><TD>  2</TD><TD>   3 </TD><TD>  4 </TD><TD>  5</TD><TD>   6 </TD><TD>  7</TD><TD>   8</TD><TD>   9 </TR>
   <TR><TD>Player 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  0</TD><TD>   1</TD><TD>   0</TD><TD>   1</TD><TD>   1</TD><TD>   0</TD><TD>   1 </TR>
   <TR><TD>Player 2</TD><TD>  1</TD><TD>   1</TD><TD>   0</TD><TD>   1</TD><TD>   1</TD><TD>   1</TD><TD>   0</TD><TD>   1</TD><TD>   0 </TR>
   <TR><TD>Player 3</TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TR>
   <TR><TD>Player 4 </TD><TD> 1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TR>
   <TR><TD>Player 5</TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TR>
<TR><TD>Duration </TD><TD> 2 </TD><TD>  4 </TD><TD>  1 </TD><TD>  3 </TD><TD>  3 </TD><TD>  2 </TD><TD>  5 </TD><TD>  7 </TD><TD>  6 </TR>
</TABLE>


For example, if the nine  pieces were rehearsed in numerical order as given above, then the total waiting time would be:

Player 1: 1+3+7=11

Player 2: 1+5=6

Player 3: 1+3+3+2=9

Player 4: 4+1+3+5+7=20

Player 5: 3

giving a total of 49 units.  The optimal sequence gives 17 units waiting time.

<H3>The Talent Scheduling Problem</H3>

A very similar problem occurs in devising a schedule for shooting a film. Different days of shooting require different subsets of the cast, and cast members are paid for days they spend on set waiting. The only difference between <EM>talent scheduling problem</EM> and the rehearsal problem is that different cast members are paid at different rates, so that the cost of waiting time depends on who is waiting. The objective is to minimize the total cost of paying cast members to wait.

The first problem, <I>Film1</I>,  is based on  one given by Cheng, Diamond and Lin (see <A href="references/">references</A>).

<TABLE>
 <TR><TD>  Day   </TD><TD>  1 </TD><TD > 2 </TD><TD >  3 </TD><TD >  4 </TD><TD >  5 </TD><TD >  6 </TD><TD >  7 </TD><TD >  8 </TD><TD >  9 </TD><TD >  10 </TD><TD >  11
</TD><TD >  12 </TD><TD >  13 </TD><TD >  14 </TD><TD >  15 </TD><TD >  16 </TD><TD >  17 </TD><TD >  18 </TD><TD >  19 </TD><TD >  20 </TD><TD >  Cost/100  </TD></TR>
<TR><TD>Actor 1   </TD><TD> 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0
 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  10</TD></TR>
<TR><TD>Actor 2   </TD><TD> 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   0 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   1</TD><TD>  4</TD></TR>
<TR><TD>Actor 3   </TD><TD> 0 </TD><TD> 1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD>  5</TD></TR>
<TR><TD>Actor 4   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1
 </TD><TD>  1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD>  5</TD></TR>
<TR><TD>Actor 5   </TD><TD> 0 </TD><TD> 1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1
 </TD><TD>  0 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1</TD><TD>  5</TD></TR>
<TR><TD>Actor 6   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  0 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0</TD><TD>  40 </TD></TR>
<TR><TD>Actor 7   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  0 </TD><TD>   0 </TD><TD>   1 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD> 4 </TD></TR>
<TR><TD>Actor 8   </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  0 </TD><TD>  0 </TD><TD>  0
 </TD><TD>  0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0 </TD><TD>   0</TD><TD>  20</TD></TR>
<TR><TD>Duration   </TD><TD> 2 </TD><TD> 1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  3 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  2 </TD><TD>  1 </TD><TD>  1
 </TD><TD>  2 </TD><TD>  1 </TD><TD>  2 </TD><TD>  1 </TD><TD>  1 </TD><TD>  2 </TD><TD>  1 </TD><TD>  1</TD></TR>
</TABLE>


The problem below, <I>Film2</I>, is also based on real film data (although the costs are purely fictitious).  It is easier to solve than <I>Film1</I>.


<TABLE>
<TR><TD>Day     </TD><TD>   1 </TD><TD>  2 </TD><TD>  3 </TD><TD>  4 </TD><TD>  5 </TD><TD>  6 </TD><TD>  7 </TD><TD>  8 </TD><TD>  9 </TD><TD>  10 </TD><TD>  11 </TD><TD> 12 </TD><TD>  13</TD><TD >  Cost/100  </TD></TR>
<TR><TD>Actor 1 </TD><TD>  0 </TD><TD>  0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 40 </TD></TR>
<TR><TD>Actor 2 </TD><TD>  1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 1 </TD><TD> 20 </TD></TR>
<TR><TD>Actor 3  </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 20  </TD></TR>
<TR><TD>Actor 4  </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1</TD><TD> 10 </TD></TR>
<TR><TD>Actor 5  </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 5 </TD></TR>
<TR><TD>Actor 6  </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 10 </TD></TR>
<TR><TD>Actor 7  </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 5 </TD></TR>
<TR><TD>Actor 8  </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0  </TD><TD> 4 </TD></TR>
<TR><TD>Actor 9  </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 0 </TD><TD> 1 </TD><TD> 5 </TD></TR>
<TR><TD>Actor 10 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 0 </TD><TD> 1 </TD><TD> 1 </TD><TD> 0 </TD><TD> 0 </TD><TD>  0 </TD><TD>  4 </TD></TR>
<TR><TD>Duration   </TD><TD> 1 </TD><TD> 1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  3 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD>  1 </TD><TD> 1</TD></TR>
</TABLE>


Input Data (data.dzn):
% This is the problem from Barbara M. Smith's Rehearsal paper cited in the
% model rehearsal.mzn
num_pieces = 9;
num_players = 5;
duration = [2, 4, 1, 3, 3, 2, 5, 7, 6];
rehearsal = array2d(1..num_players, 1..num_pieces, 
    [
     1,1,0,1,0,1,1,0,1,
     1,1,0,1,1,1,0,1,0,
     1,1,0,0,0,0,1,1,0,
     1,0,0,0,1,1,0,0,1,
     0,0,1,0,1,1,1,1,0
  ]);

MiniZinc Model:
include "globals.mzn"; 


int: num_pieces;
int: num_players;
array[1..num_pieces] of int: duration;
array[1..num_players, 1..num_pieces] of 0..1: rehearsal;


%
% Decision variables
%
array[1..num_pieces] of var 1..num_pieces: rehearsal_order;
array[1..num_players] of var 0..sum(duration): waiting_time; % waiting time for players
array[1..num_players] of var 1..num_pieces: p_from; % first rehearsal
array[1..num_players] of var 1..num_pieces: p_to;   % last rehearsal
var 0..sum(duration): total_waiting_time = sum(waiting_time); % objective

solve :: int_search(
         rehearsal_order % ++ waiting_time% ++ p_from ++ p_to ++ [total_waiting_time]
         , 
         first_fail, % occurrence, % max_regret, % first_fail, 
         indomain_max, % indomain_max, 
         complete) 
     minimize total_waiting_time;
     % satisfy;

% solve :: labelling_ff minimize total_waiting_time;

constraint
  all_different(rehearsal_order) :: domain
  /\

  % This solution is my own without glancing at Smith's models...
  forall(p in 1..num_players) (
     % This versions is much faster than using exists (see below)
     % fix the range from..to, i.e. don't count all that start with 0 
     % or ends with 0.
     % This means that we collect the rehearsals with many 0 at the ends
     %
     p_from[p] < p_to[p]
     /\
     % skipping rehearsal at start (don't come yet)
     forall(i in 1..num_pieces) (
        i < p_from[p] -> (rehearsal[p, rehearsal_order[i]] = 0)
     )
     /\
     % skipping rehearsal at end (go home after last rehearsal)
     forall(i in 1..num_pieces) (
        i > p_to[p] -> (rehearsal[p, rehearsal_order[i]] = 0)
     )
     /\ % and now: count the waiting time for from..to
     waiting_time[p] = 
         sum(i in 1..num_pieces) (
              duration[rehearsal_order[i]] * bool2int(
                                             i >= p_from[p] /\ i <= p_to[p] 
                                             /\
                                             rehearsal[p,rehearsal_order[i]] = 0
                                )
     ) 

%      % alternative solution with exists. 
%      %  More elegant (= declarative) in my book but slower.
%      exists(from, to in 1..num_pieces) ( 
%         % skipping rehearsal at start (don't come yet)
%         forall(i in 1..from-1) (
%            rehearsal[p, rehearsal_order[i]] = 0
%         )
%         /\
%         % skipping rehearsal at end (go home after last rehearsal)
%         forall(i in to+1..num_pieces) (
%            rehearsal[p, rehearsal_order[i]] = 0
%         )
%         /\ % and now: count the waiting time for from..to
%         waiting_time[p] = 
%             sum(i in from..to) (
%                  duration[rehearsal_order[i]]*
%                                  bool2int(
%                                       rehearsal[p,rehearsal_order[i]] = 0
%                                   )
%          ) 
%      )


  )

  /\ % symmetry breaking
  rehearsal_order[1] < rehearsal_order[num_pieces]

  % for all solutions
  % /\ total_waiting_time = 17
;


%
% data
%
%
% This is the problem from Barbara M. Smith's Rehearsal paper cited above:
% (see rehearsal_smith.dta)
% num_pieces = 9;
% num_players = 5;
% duration = [2, 4, 1, 3, 3, 2, 5, 7, 6];
% rehearsal = array2d(1..num_players, 1..num_pieces, 
%     [
%      1,1,0,1,0,1,1,0,1,
%      1,1,0,1,1,1,0,1,0,
%      1,1,0,0,0,0,1,1,0,
%      1,0,0,0,1,1,0,0,1,
%      0,0,1,0,1,1,1,1,0
%   ]);

%
% This is the problem from the Choco v 2.1 example 
% sample.scheduling.Rehearsal, the one defined in main() .
% (see rehearsal_choco.dta)
% num_pieces = 5;
% num_players = 3;
% duration = [4,6,3,5,7];
% rehearsal =  array2d(1..num_players, 1..num_pieces, 
%         [
%         1,1,0,1,0,
%         0,1,1,0,1,
%         1,1,0,1,1   
%   ]);


output[
  "order: " , show(rehearsal_order), "\n",
  "waiting_time: ", show(waiting_time), "\n",
  "total_waiting_time: " , show(total_waiting_time), "\n",
] ++ 
[
  if j = 1 then "\n" else " " endif ++
    show(rehearsal[p, rehearsal_order[j]]) ++ " "
  | p in 1..num_players, j in 1..num_pieces, 
] ++ 
["\n"]
;

Expected Output:
{
  "rehearsal_order": [
    3,
    8,
    7,
    2,
    1,
    6,
    5,
    4,
    9
  ],
  "waiting_time": [
    3,
    5,
    0,
    3,
    6
  ],
  "p_from": [
    3,
    2,
    2,
    5,
    1
  ],
  "p_to": [
    9,
    8,
    5,
    9,
    7
  ],
  "_objective": 17
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.