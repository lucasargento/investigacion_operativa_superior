You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 256
- Name: Manpower Planning
- Domain: Human Resources
- Objective: minimization

Problem Description:
The companyâ€™s declared objective is to minimize redundancy. Requirement are given as K different resources each having I specific requirements, where Strength is the strength of each type of resource, LessOneWaste is the value when wastage of resources is less than optimal, MoreOneWaste is the value when wastage of resources is more than optimal. Recruit is the number of recruited resources of each type, CostRedundancy is the cost of redundancy for each type of resource, NumOverman signifies the number of overmanned positions, CostOverman is the cost of overmanning for each type of resource, and NumShortwork represents the number of shortworked positions with CostShort as the cost of short working for each type of resource. How should they operate in order to do this?


Input Data (data.dzn):
requirement = [|1000, 1400, 1000| 500, 2000, 1500| 0, 2500, 2000|];
strength = [2000, 1500, 1000];
lessonewaste = [0.25, 0.2, 0.1];
moreonewaste = [0.1, 0.05, 0.05];
recruit = [500, 800, 500];
costredundancy = [200, 500, 500];
num_overman = 150;
costoverman = [1500, 2000, 3000];
num_shortwork = 50;
costshort = [500, 400, 400];

MiniZinc Model:
% Parameters
int: num_years;
set of int: YEARS = 1..num_years;
set of int: MANPOWER = 1..3;

array[MANPOWER, YEARS] of int: requirement;
array[MANPOWER] of int: strength;
array[MANPOWER] of float: lessonewaste;
array[MANPOWER] of float: moreonewaste;
array[MANPOWER] of int: recruit;
array[MANPOWER] of int: costredundancy;
int: num_overman;
array[MANPOWER] of int: costoverman;
int: num_shortwork;
array[MANPOWER] of int: costshort;

% Decision Variables
array[MANPOWER, YEARS] of var 0..recruit[MANPOWER]: recruit_year;
array[MANPOWER, YEARS] of var 0..num_overman: overmanning_year;
array[MANPOWER, YEARS] of var 0..num_shortwork: short_year;

% Constraints
constraint forall(k in MANPOWER, i in YEARS)(
  if i = 1 then
    strength[k] + recruit_year[k,i] - overmanning_year[k,i] - short_year[k,i] = requirement[k,i]
  else
    (1 - moreonewaste[k]) * (strength[k] + sum(j in 1..(i-1))(recruit_year[k,j] - overmanning_year[k,j] - short_year[k,j])) + recruit_year[k,i] - overmanning_year[k,i] - short_year[k,i] = requirement[k,i]
  endif
);

% Objective
var int: total_cost = sum(k in MANPOWER, i in YEARS)(costredundancy[k] * recruit_year[k,i] + costoverman[k] * overmanning_year[k,i] + costshort[k] * short_year[k,i]);
solve minimize total_cost;

% Output
output ["recruit: ", show(recruit_year), "\n", "overmanning: ", show(overmanning_year), "\n", "short: ", show(short_year)];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.