You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 225
- Name: Spare Parts Production Optimization
- Domain: Manufacturing
- Objective: maximization

Problem Description:
Formulate the problem of determining the quantities of each spare part to be made during the month so as to maximize profit. The number of different spare parts is K. The number of machines capable of making the spare parts is S. The time taken to make spare part k on machine s is given by Time. The profit obtained from making spare part k is Profit. Each machine s has a capacity of Capacity for the spare parts.


Input Data (data.dzn):
time = [|2, 3|1, 2|3, 2|3, 1|1, 1|];
profit = [30, 20, 40, 25, 10];
capacity = [700, 1000];

MiniZinc Model:
% Parameters
int: K; % Number of spare parts
int: S; % Number of machines
array[1..K, 1..S] of int: time; % Time taken to make each spare part on each machine
array[1..K] of int: profit; % Profit obtained from making each spare part
array[1..S] of int: capacity; % Capacity of each machine

% Decision Variables
array[1..K] of var 0..capacity[S]: quantity; % Quantity of each spare part to be made

% Objective
maximize sum(k in 1..K)(profit[k]*quantity[k]);

% Constraints
constraint forall(s in 1..S)(
    sum(k in 1..K)(time[k,s]*quantity[k]) <= capacity[s]
);

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.