You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 456
- Name: Minimum Value Occurrence Constraint
- Domain: Constraint Programming
- Objective: satisfaction

Problem Description:
The problem is about implementing the global constraint min_nvalue in MiniZinc. The constraint min_nvalue(MIN, VARIABLES) is such that MIN is the minimum number of times that the same value is taken by the variables of the collection VARIABLES. This constraint can be used to replace a set of count or among constraints where one would have to generate explicitly one constraint for each potential value. It is also useful for constraining the number of occurrences of the least used value without knowing this value in advance and without giving explicitly a lower limit on the number of occurrences of each value as it is done in the global_cardinality constraint. The goal is to find a satisfying assignment for the variables such that the min_nvalue constraint holds.


MiniZinc Model:
include "globals.mzn"; 
int: n = 5;
array[1..n] of var 1..n: variables;
var 1..n: t_min;
solve satisfy;

%
% This is more complicated than max_nvalue 
% (http://www.hakank.org/minizinc/max_nvalue) since the minimum value
% in the occurrence array maybe 0 and must be handled.
%
predicate min_nvalue(var int: tt_min, array[int] of var int: variables) =
    let {
        array[min(index_set(variables))..max(index_set(variables))] of var 0..length(variables): occ
    } in
    % global_cardinality_old(variables, occ)
   global_cardinality(variables, array1d(min(index_set(variables))..max(index_set(variables)), [i | i in min(index_set(variables))..max(index_set(variables))]), occ)
    /\ % some value in occ is larger than 0 and less than any other
       % values (larger than 0)
    forall(i in index_set(occ)) (
      occ[i] > 0 -> t_min <= occ[i]
    )
    /\ % and now we find exactly which value that is
    exists(i in index_set(occ)) (
      t_min = occ[i]
    )
;

predicate cp1d(array[int] of var int: x, array[int] of var int: y) =
  assert(index_set(x) = index_set(y),
           "cp1d: x and y have different sizes",
     forall(i in index_set(x)) ( x[i] = y[i] ))
; 

constraint
   % cp1d(variables, [9,1,7,1,1,7,7,7,7,9])
   % /\
   t_min = 2
   /\
   min_nvalue(t_min, variables) 

;

output
[
  "variables: " ++ show(variables) ++ "\n" ++
  "t_min: " ++ show(t_min) ++ "\n"
];

Expected Output:
{
  "variables": [
    2,
    2,
    1,
    1,
    1
  ],
  "t_min": 2
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.