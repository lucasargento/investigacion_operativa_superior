You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 0
- Name: P-Median Problem
- Domain: Transportation and Logistics
- Objective: minimization

Problem Description:
The P-Median problem involves selecting P warehouses from a set of candidate locations to minimize the demand-weighted distance of serving all customers. We are given the demand of customers and distances between customers and warehouses. Each customer is served by exactly one warehouse. The goal is to allocate warehouses to minimize the sum of demand weighted distances of the customers to the warehouse that serves them.


Input Data (data.dzn):
P = 2;
num_customers = 4;


num_warehouses = 3;

Demand = [100.0,80.0,80.0,70.0];

Distance = array2d(Customers, Warehouses,
  [
    2.0, 10.0, 50.0,
    2.0, 10.0, 52.0,
   50.0, 60.0,  3.0,
   40.0, 60.0,  1.0
  ]);


MiniZinc Model:
% 
% P-median problem in MiniZinc.
% 
% 
% Model and data from the OPL Manual, which describes the problem:
% """
% The P-Median problem is a well known problem in Operations Research. 
% The problem can be stated very simply, like this: given a set of customers 
% with known amounts of demand, a set of candidate locations for warehouses, 
% and the distance between each pair of customer-warehouse, choose P 
% warehouses to open that minimize the demand-weighted distance of serving 
% all customers from those P warehouses.
% """

% Compare with the Comet model:
% http://www.hakank.org/comet/p_median.co
%
% 
% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc page: http://www.hakank.org/minizinc
%

% include "globals.mzn"; 

int: P;
int: num_customers;
set of int: Customers = 1..num_customers;

int: num_warehouses;
set of int: Warehouses = 1..num_warehouses;

array[Customers] of float: Demand;

array[Customers, Warehouses] of float: Distance;

% decision variables
array[Warehouses] of var 0..1: OpenWarehouse;
array[Customers,Warehouses] of var 0..1: ShipToCustomer;

var float: z =   sum(c in Customers, w in Warehouses) (
     Demand[c]*Distance[c,w]*int2float(ShipToCustomer[c,w])
    );

solve minimize z;

constraint
  forall(c in Customers) (
    sum(w in Warehouses) (ShipToCustomer[c,w]) = 1
  )
  /\
  sum(OpenWarehouse) = P
  /\
  forall( c in Customers , w in Warehouses ) (
    ShipToCustomer[c,w] <= OpenWarehouse[w]
  )

;

output [
"OpenWarehouse: " ++ show(OpenWarehouse) ++ "\n"++
"ShipToCustomer: " ++ show(ShipToCustomer) ++ "\n"++
"z: " ++ show(z) ++ "\n"
];


Expected Output:
{
  "OpenWarehouse": [
    1,
    0,
    1
  ],
  "ShipToCustomer": [
    [
      1,
      0,
      0
    ],
    [
      1,
      0,
      0
    ],
    [
      0,
      0,
      1
    ],
    [
      0,
      0,
      1
    ]
  ],
  "_objective": 670.0
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.