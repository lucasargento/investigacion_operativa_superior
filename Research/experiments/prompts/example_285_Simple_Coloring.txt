You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 285
- Name: Simple Coloring
- Domain: Graph Theory
- Objective: minimization

Problem Description:
# Problem SimpleColoring

A simple coloring problem

## Data
  all integrated (single problem)

## Execution
```
  python SimpleColoring.py
```

## Tags
  single


MiniZinc Model:
include "alldifferent.mzn";

% Define the number of nodes and colors
int: n = 5; % number of nodes
int: m = 3; % number of colors

% Define the adjacency matrix
array[1..n, 1..n] of 0..1: adj = array2d(1..n, 1..n, [
  0, 1, 0, 0, 1,
  1, 0, 1, 0, 1,
  0, 1, 0, 1, 0,
  0, 0, 1, 0, 1,
  1, 1, 0, 1, 0
]);

% Define the decision variables
array[1..n] of var 1..m: color;

% Define the constraints
constraint forall(i in 1..n, j in i+1..n) (
  if adj[i,j] = 1 then
    color[i] != color[j]
  endif
);

% Define the objective function
var int: obj = sum(i in 1..n) (color[i]);

% Define the optimization problem
solve minimize obj;

% Output the solution
output [ "Color of node " ++ show(i) ++ ": " ++ show(color[i]) ++ "\n" | i in 1..n ];

Expected Output:
{
  "color": [
    3,
    2,
    1,
    2,
    1
  ],
  "_objective": 9
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.