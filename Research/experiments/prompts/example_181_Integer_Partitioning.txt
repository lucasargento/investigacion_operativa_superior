You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 181
- Name: Integer Partitioning
- Domain: Mathematics
- Objective: satisfaction

Problem Description:
The problem is about partitioning the integers from 1 to n according to a function. The function can be a modulus operation, a division operation, or a boolean test (e.g., i > 3). The model creates a binary matrix to indicate which integer is included in which partition. The model also calculates the sum of the integers in each partition. The constraints ensure that each integer is only in one partition and that the sum of the integers in each partition and the binary matrix are correctly calculated. The output is the partitions, the sum of the integers in each partition, and the binary matrix.


MiniZinc Model:
include "globals.mzn"; 

int: n;
array[0..n] of var set of 1..n: x;
% the sums of the partitions
array[0..n] of var int: sums;
% binary matrix of which integer is included in which partition
array[0..n, 0..n] of var 0..1: x_bool;

predicate set_sum(var set of int: s, var int: the_sum) =
   the_sum = sum(i in ub(s)) (bool2int(i in s)*i)
;


solve :: set_search(x, input_order, indomain_min, complete) satisfy;
% solve satisfy;

constraint
   forall(i in 1..n) (
       % hmm, only minizinc can handle this simple one:
       % i in x[n `mod` i] 
       %
       % instead we must also explicitly state that i is not in any 
       % other set than x[n mod i].
       let {
           % int: z = n `mod` i
           int: z = n mod i
           % int: z = n `div` i
           % int: z = bool2int( i > 3)
       }
       in
       i in x[z]
       % ah, this can - of course - be replaced with the global constraint
       % partition_set
       % /\
       % forall(j in 0..n where j != z) (
       %    not (i in x[j])
       % )
   )
   /\ % make sure that a value is only in one partition
      % Note: eclipse don't like this: dvar_remove_smaller
   partition_set(x, 1..n)

   /\ % the sums
   forall(i in 0..n) (
      set_sum(x[i], sums[i])
   )

   /\ % the binary (0..1) matrix
   forall(i in 0..n) (
     link_set_to_booleans(x[i], [x_bool[i,j] = 1 | j in 0..n])
   )
;
       
output [
  "\nx: ", show(x),"\n",
  "set_sums: ", show(sums),"\n"
]  ++
[
  if j = 0 then "\n" else " " endif ++
  show(x_bool[i,j])
  | i,j in 0..n
] ++ ["\n"];


%
% data
%
n = 10;

Expected Output:
{
  "x": [
    {
      "set": [
        [
          1,
          2
        ],
        5,
        10
      ]
    },
    {
      "set": [
        3,
        9
      ]
    },
    {
      "set": [
        4,
        8
      ]
    },
    {
      "set": [
        7
      ]
    },
    {
      "set": [
        6
      ]
    },
    {
      "set": []
    },
    {
      "set": []
    },
    {
      "set": []
    },
    {
      "set": []
    },
    {
      "set": []
    },
    {
      "set": []
    }
  ],
  "sums": [
    18,
    12,
    12,
    7,
    6,
    0,
    0,
    0,
    0,
    0,
    0
  ],
  "x_bool": [
    [
      1,
      1,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.