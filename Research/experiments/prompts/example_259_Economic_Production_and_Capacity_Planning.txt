You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 259
- Name: Economic Production and Capacity Planning
- Domain: Economics
- Objective: maximization

Problem Description:
Maximize total productive capacity at the end of the five years. The problem parameters are a matrix of coefficients InputOne, a vector of manpower coefficients for input one ManpowerOne, a matrix of coefficients InputTwo, a vector of manpower coefficients for input two Manpowertwo, initial stock levels Stock, productive capacities Capacity, a company-wide manpower limit ManpowerLimit, and demand for each productive unit Demand.


Input Data (data.dzn):
The data in ".dzn" format would look like this:

```
inputone = array2d(1..3, 1..3, [0.1, 0.1, 0.2, 0.5, 0.1, 0.1, 0.5, 0.2, 0.2]);
manpowerone = [0.6, 0.3, 0.2];
inputtwo = array2d(1..3, 1..3, [0.0, 0.1, 0.2, 0.7, 0.1, 0.1, 0.9, 0.2, 0.2]);
manpowertwo = [0.4, 0.2, 0.1];
stock = [150, 80, 100];
capacity = [300, 350, 280];
manpower_limit = 470000000.0;
demand = [60000000.0, 60000000.0, 30000000.0];
```

MiniZinc Model:
% Define parameters
int: num_industries = 3;
int: num_years = 5;
set of int: Industries = 1..num_industries;
set of int: Years = 1..num_years;

% Input data
array[Industries, Industries] of float: inputone;
array[Industries] of float: manpowerone;
array[Industries, Industries] of float: inputtwo;
array[Industries] of float: manpowertwo;
array[Industries] of float: stock;
array[Industries] of float: capacity;
float: manpower_limit;
array[Industries] of float: demand;

% Decision variables
array[Industries, Years] of var 0.0..manpower_limit: produce;
array[Industries, Years] of var 0.0..manpower_limit: buildcapa;
array[Industries, Years] of var 0.0..manpower_limit: stockhold;

% Constraints
constraint forall(i in Industries, t in Years) (
    produce[i,t] + buildcapa[i,t] <= capacity[i] + if t > 2 then buildcapa[i,t-2] else 0 endif
);

constraint forall(i in Industries, t in Years) (
    produce[i,t] + buildcapa[i,t] + stockhold[i,t] = 
    if t > 1 then stockhold[i,t-1] else stock[i] endif + 
    sum(j in Industries) (produce[j,t] * inputone[j,i])
);

constraint forall(t in Years) (
    sum(i in Industries) (produce[i,t] * manpowerone[i] + buildcapa[i,t] * manpowertwo[i]) <= manpower_limit
);

constraint forall(i in Industries, t in Years) (
    produce[i,t] >= demand[i]
);

% Objective function
var float: total_capacity = sum(i in Industries) (capacity[i] + sum(t in 3..num_years) (buildcapa[i,t]));
solve maximize total_capacity;

% Output
output ["produce: ", show(produce), "\n", "buildcapa: ", show(buildcapa), "\n", "stockhold: ", show(stockhold)];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.