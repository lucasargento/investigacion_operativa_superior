You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 546
- Name: Bus Driver Scheduling
- Domain: Transportation
- Objective: minimization

Problem Description:
The Bus driver scheduling problem is a set partitioning problem derived from small bus driver scheduling problems. It consists of a given set of tasks (pieces of work) to cover and a large set of possible shifts, where each shift covers a subset of the tasks and has an associated cost. The goal is to select a subset of possible shifts that covers each piece of work once and only once: this is called a partition. The main aim is to reduce the number of shifts used in the solution partition and the total cost of the partition is secondary. To simplify the problem, the cost of each shift is made the same. This means that the goal is to minimise the number of shifts. The problems come from four different bus companies: Reading (r1 to r5a), CentreWest Ealing area (c1, c1a, c2), the former London Transport (t1 and t2). The problems have differing regulations and features (e.g. urban and short distance rural bus schedules can have very different features).


Input Data (data.dzn):
%
% Data for bus driver scheduling (CSPLib problem 22).
%
% This is the problem t1 from
% http://www.cs.st-andrews.ac.uk/~ianm/CSPLib/prob/prob022/index.htm
% 
% It is used in the the MiniZinc model
% http://www.hakank.org/minizinc/bus_scheduling_csplib.mzn
%
num_work = 24;
num_shifts = 77;
min_num_shifts = 7;

shifts = 
[
{11,18},
{11,3,4},
{11,18,19},
{11,12,14,15},
{11,18,19,20},
{11,12,19,20},
{1,18},
{1,3,4},
{1,18,19},
{1,2,14,15},
{1,18,19,20},
{1,2,19,20},
{1,2,3,10},
{7,18},
{7,3,4},
{7,18,19},
{7,14,15},
{7,18,19,20},
{7,8,9,10},
{7,14,15,16},
{7,8,9,5,6},
{7,3,4,5,6},
{12,13,14,10},
{12,13,15,16},
{12,13,5,6},
{12,13,20,21},
{12,13,14,21},
{2,3,10},
{2,3,15,16},
{2,3,5,6},
{2,3,20,21},
{2,3,4,21},
{8,9,10},
{8,9,5,6},
{8,9,20,21},
{8,9,16,17},
{13,14,10},
{13,14,21},
{13,14,16,17},
{13,14,15,17},
{13,14,15,16,22},
{13,14,21,22},
{3,4,21},
{3,4,16,17},
{3,4,21,22},
{18,10},
{18,15,16},
{18,5,6},
{18,20,21},
{18,19,21},
{18,15,16,17},
{18,19,16,17},
{18,19,20,17},
{18,20,21,22},
{18,19,21,22},
{18,19,20,22},
{14,15,17},
{14,15,16,22},
{4,5,6,23},
{19,20,17},
{19,20,22},
{19,20,21,23},
{19,20,22,23},
{19,20,21,0},
{15,16,22},
{15,16,17,23},
{15,16,22,23},
{15,16,17,0},
{5,6,23},
{20,21,23},
{20,21,0},
{10,22},
{10,22,23},
{16,17,23},
{16,17,0},
{21,23},
{21,0}
];

MiniZinc Model:
include "globals.mzn"; 
int: num_work;
int: num_shifts;
int: min_num_shifts;
array[1..num_shifts] of set of int: shifts;

array[1..num_shifts] of var 0..1: x;
var 0..num_shifts: tot_shifts;

% solve minimize tot_shifts;
solve :: int_search(
        x ++ [tot_shifts], 
        first_fail, 
        indomain_min, 
        complete) 
    minimize tot_shifts;
    % satisfy;

constraint
   tot_shifts = sum(x)
   /\
   forall(j in 0..num_work-1) (
       sum(i in 1..num_shifts) (x[i]*bool2int(j in shifts[i])) = 1
   )
   /\
   tot_shifts >= min_num_shifts

   %/\ % for solve satisfy (t1)
   %tot_shifts = 7
;


output [
  "tot_shifts: " ++ show(tot_shifts) ++ "\n" ++ 
  "x: " ++ show(x) ++ "\n"
] ++ 
[
  if fix(x[i]) = 1 then show(shifts[i]) else "" endif
  | i in 1..num_shifts
] ++ 
["\n"] ++
[
  if fix(x[i]) = 1 then show(i) ++ " " else "" endif
  | i in 1..num_shifts
] ++ ["\n"];

Expected Output:
{
  "x": [
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1
  ],
  "tot_shifts": 7,
  "_objective": 7
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.