You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 269
- Name: Change Making Problem
- Domain: Academic
- Objective: minimization

Problem Description:
# Problem ChangeMaking

The change-making problem addresses the question of finding the minimum number of coins (of certain denominations) that
add up to a given amount of money. It is a special case of the integer knapsack problem, and has applications wider than
just currency.
It is also the most common variation of the coin change problem, a general case of partition in which, given the
available denominations of an infinite set of coins, the objective is to find out the number of possible ways
of making a change for a specific amount of money, without considering the order of the coins.

### Example
  For n=13, one needs at least 4 coins:
  ``` 13 = 3x1 + 10```

## Data
  a number n, the given amount of money

## Model
  There are two variants: a main one and a compact one (with fewer variables).

  constraints: [Sum](http://pycsp.org/documentation/constraints/Sum)

## Execution
  - python ChangeMaking.py -data=number
  - python ChangeMaking.py -data=number -variant=compact

## Links
  - https://en.wikipedia.org/wiki/Change-making_problem

## Tags
  academic


MiniZinc Model:
include "globals.mzn";

% The given amount of money
int: n = 13;

% The coin denominations
set of int: Coins = 1..n;

% The number of coins of each denomination
array[Coins] of var 0..n: x;

% The objective is to minimize the total number of coins
var int: total = sum(c in Coins) (x[c]);

% The sum of the coins must equal the given amount of money
constraint sum(c in Coins) (c*x[c]) = n;

% The objective is to minimize the total number of coins
solve minimize total;

% Output the solution
output ["The minimum number of coins is: ", show(total), "\n"];

Expected Output:
{
  "x": [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1
  ],
  "_objective": 1
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.