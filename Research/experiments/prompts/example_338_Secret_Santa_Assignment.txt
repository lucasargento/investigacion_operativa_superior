You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 338
- Name: Secret Santa Assignment
- Domain: Games
- Objective: satisfaction

Problem Description:
The Secret Santa problem involves a group of friends who play a Secret Santa game around Christmas time. They draw names and spend a week sneaking that person gifts and clues to their identity. On the last night of the game, they get together, have dinner, share stories, and try to guess who their Secret Santa was. The challenge is to implement a Secret Santa selection script. The script will be fed a list of names. The script should then choose a Secret Santa for every name in the list. A person cannot be their own Secret Santa. In addition, people in the same family are not allowed to be Santas for each other. The friends are identified with a number from 1 to n, and the families are identified with a number 1 to num_families. The goal is to assign a Secret Santa to each person such that no person is their own Secret Santa and no two people from the same family are Santas for each other.


MiniZinc Model:
include "globals.mzn"; 
int: n = 12;
% int: n = 7; % For the Ruby Quiz example
int: num_families = 4;

array[1..n] of 1..num_families: family = [1,1,1,1, 2, 3,3,3,3,3, 4,4];
% Ruby Quiz example:
% array[1..n] of 1..num_families: family = [1,1,2,2, 3, 4,4];

% decision variables
array[1..n] of var 1..n: x;


% Ensure that there are no fix points in the array.
predicate no_fix_points(array[int] of var int: x) =
  forall(i in index_set(x)) ( 
     x[i] != i
  )
;

solve satisfy;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
  % Everyone gives and receives a Secret Santa
  all_different(x) 

  /\ % Can't be one own's Secret Santa
  no_fix_points(x) 

  /\ % No Secret Santa to a person in the same family
  forall(i in index_set(x)) (
     family[i] != family[x[i]]
  )
; 


output [
   "Person " ++ show(i) ++ " (family: " ++ show(family[i]) ++ ") is a Secret Santa of " ++ show(x[i]) ++ " (family: " ++ show(family[x[i]]) ++ ")\n"
   | i in 1..n
] ++ 
["\n"];

Expected Output:
{
  "x": [
    12,
    11,
    8,
    7,
    6,
    5,
    4,
    3,
    2,
    1,
    10,
    9
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.