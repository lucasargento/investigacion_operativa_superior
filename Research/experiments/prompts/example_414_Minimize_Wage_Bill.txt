You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 414
- Name: Minimize Wage Bill
- Domain: Workforce Scheduling
- Objective: minimization

Problem Description:
A software company has UI designers earning $ 2500 per week and software engineers earning $ 2000 per week . The contracts with companies to provide cloud services require at least 50 workers , of whom at least 10 must be software engineers . To make sure there is enough experience on the team , the number of software engineers should be at least a third of the number to UI designers . The company wants to keep the weekly wage bill below $ 200000 . Formulate an LP problem to minimize the wage bill .


MiniZinc Model:
include "globals.mzn";

% number of UI designers
var int: UI_designers;
% number of software engineers
var int: software_engineers;

% workers are non-negative
constraint UI_designers >= 0;
constraint software_engineers >= 0;

% at least 10 software engineers
constraint software_engineers >= 10;
% at least 50 workers
constraint UI_designers + software_engineers >= 50;
% the number of software engineers should be at least a third of the number to UI designers
constraint software_engineers >= UI_designers / 3;

% UI designers earn $2500 per week and software engineers earn $2000 per week 
var int: wage_bill = 2500 * UI_designers + 2000 * software_engineers;
constraint wage_bill <= 200000;

% minimize wage bill
solve minimize wage_bill;

% Output
output ["UI_designers: ", show(UI_designers), "\n", "software_engineers: ", show(software_engineers), "\n", "wage_bill: ", show(wage_bill)];

Expected Output:
{
  "UI_designers": 0,
  "software_engineers": 50,
  "_objective": 100000
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.