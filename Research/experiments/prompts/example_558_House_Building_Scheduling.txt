You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 558
- Name: House Building Scheduling
- Domain: Scheduling
- Objective: minimization

Problem Description:
The problem is about scheduling tasks for building a house. There are a number of tasks, each with a specific duration and height. The total duration is the sum of the durations of all tasks. There are also a number of precedences, which are pairs of tasks where the first task must be completed before the second can start. The goal is to find the start and end times for each task, such that the total time (makespan) is minimized. There is also a limit on the cumulative height of the tasks that can be performed at the same time. The problem is solved using the MiniZinc constraint programming language.


Input Data (data.dzn):
%
% Data from Mozart/Oz 
% http://www.mozart-oz.org/home/doc/fdt/node47.html#section.scheduling.house
% Building a house schediling problem.
%
% To be used with the MiniZinc model
% http://www.hakank.org/minizinc/building_a_house_model.mzn
% 

num_tasks = 10;

% tasks =
%        ["erecting_walls",
%         "carpentry_for_roof",
%         "roof",
%         "installations",
%         "facade_painting",
%         "windows",
%         "garden",
%         "ceilings",
%         "painting",
%         "moving_in"];

duration =  [ 7, 3, 1, 8, 2, 1, 1, 3, 2, 1];
height   =  [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

num_precedences  = 13;
precedences = array2d(1..num_precedences, 1..2, 
[
% a   b
  1, 2,
% b   c
  2, 3,
% a   d
  1, 4,
% c   e
  3, 5,
% d   e
  4, 5,
% c   f
  3, 6,
% d   f
  4, 6,
% c   g
  3, 7,
% d   g
  4, 7,
% a   h
  1, 8,
% f   i
  6, 9,
% h   i
  8, 9,
% i   j
  9, 10
]);

MiniZinc Model:
include "globals.mzn"; 

int: num_tasks;

% Defining this string array in a .dzn file throws an error with mzn2fzn:
%    "Array index ranges do not match."
% so I skip it...
% array[1..num_tasks] of string: tasks;

array[1..num_tasks] of int: duration;
array[1..num_tasks] of int: height;
int: total_duration = sum(t in 1..num_tasks) (duration[t]);

% precendeces
int: num_precedences;
array[1..num_precedences, 1..2] of int: precedences;

% variables
array[1..num_tasks] of var 1..total_duration: start;
array[1..num_tasks] of var 1..total_duration: end;
var 0..sum(height): limitx;
var 1..total_duration: makespan;

% handle the precedences
predicate prec(int:x , int: y, array[int] of var int: s, array[int] of var int: d) =
   s[x] + d[x] <= s[y]
;

solve minimize makespan;
% solve :: int_search(
%         start ++ [makespan, limitx], 
%         first_fail,
%         indomain_min, 
%         complete) 
%     % satisfy;
%     minimize makespan;


constraint
  % to be minimized
  maximum(makespan, end)/\
  cumulative(start, duration, height, limitx) /\

  forall(t in 1..num_tasks) (
     end[t] = start[t] + duration[t]
  )
  /\
 
  % precedences
  forall(p in 1..num_precedences) (
     prec(precedences[p,1], precedences[p,2], start, duration)
  )
;


% Nicer output, only with the minizinc solver
output [
  "makespan: " ++ show(makespan) ++ "\n" ++ 
  "limitx: " ++ show(limitx) ++ "\n"
] ++
[
  % show(tasks[t]) ++ ": " ++ show(start[t]) ++ " - " ++ show(duration[t]) ++ " --> " ++ show(start[t] + duration[t]) ++ "\n"
  show(t) ++ ": " ++ show(start[t]) ++ " - " ++ show(duration[t]) ++ " --> " ++ show(start[t] + duration[t]) ++ "\n"
  | t in 1..num_tasks
] ++ ["\n"];

Expected Output:
{
  "start": [
    1,
    8,
    11,
    8,
    16,
    16,
    16,
    8,
    17,
    19
  ],
  "end": [
    8,
    11,
    12,
    16,
    18,
    17,
    17,
    11,
    19,
    20
  ],
  "limitx": 3,
  "makespan": 20,
  "_objective": 20
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.