You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 444
- Name: Employee Assignment Problem
- Domain: Scheduling
- Objective: minimization

Problem Description:
The Employee Assignment Problem is a scheduling problem where the goal is to assign NumEmployees employees to NumShifts shifts in NumRestaurants different restaurants based on their skills and preferences. Each employee has a set of skills out of NumSkills possible skills, and each restaurant has a demand for skilled employees during each shift. The objective is to minimize the cost of the schedule, which includes the cost of unfulfilled positions (each weighted by UnfulfilledPositionWeight) and the cost of assigning employees to less preferred positions (indicated by their preference levels for each skill).


Input Data (data.dzn):
NumRestaurants = 7;

NumEmployees = 200;
NumShifts = 3;
NumSkills = 5;

Demand = array3d(1..7, 1..3, 1..5, [
    3, 3, 2, 1, 0,
    3, 0, 3, 1, 0,
    2, 2, 2, 1, 3,

    0, 0, 1, 0, 2,
    2, 0, 1, 0, 1,
    0, 3, 3, 1, 3,

    0, 0, 3, 3, 2,
    2, 1, 1, 2, 3,
    0, 2, 3, 2, 3,

    2, 1, 1, 0, 3,
    0, 3, 1, 3, 0,
    3, 1, 0, 2, 3,

    3, 2, 1, 2, 1,
    3, 1, 0, 0, 2,
    1, 2, 3, 3, 3,

    3, 2, 0, 3, 3,
    0, 2, 0, 3, 2,
    0, 0, 2, 0, 3,

    1, 1, 0, 3, 2,
    3, 3, 1, 3, 1,
    1, 3, 1, 1, 0
]);

EmployeeSkills = array2d(1..200, 1..5, [
    1, 1, 0, 1, 0,
    0, 0, 0, 1, 1,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    1, 0, 0, 0, 0,
    0, 1, 0, 0, 1,
    0, 0, 0, 0, 0,
    0, 0, 1, 0, 0,
    0, 0, 0, 0, 1,
    0, 0, 0, 0, 0,
    1, 0, 1, 0, 1,
    0, 1, 0, 0, 0,
    0, 0, 1, 0, 1,
    0, 1, 0, 0, 1,
    1, 1, 0, 0, 1,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 1, 1, 0, 1,
    1, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    1, 0, 0, 0, 0,
    0, 0, 1, 0, 0,
    0, 1, 1, 0, 0,
    0, 0, 0, 0, 0,
    0, 1, 0, 0, 0,
    1, 0, 0, 1, 1,
    1, 1, 1, 1, 0,
    0, 0, 0, 1, 1,
    0, 0, 1, 0, 0,
    1, 0, 0, 1, 0,
    0, 0, 1, 1, 0,
    0, 0, 0, 0, 0,
    1, 1, 0, 1, 1,
    0, 0, 0, 0, 0,
    1, 1, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 1, 0, 0,
    0, 0, 0, 0, 0,
    1, 1, 0, 0, 1,
    1, 0, 1, 0, 0,
    0, 1, 1, 0, 0,
    1, 0, 0, 0, 0,
    0, 1, 0, 1, 0,
    0, 0, 0, 0, 1,
    1, 1, 0, 0, 0,
    1, 0, 0, 1, 0,
    1, 0, 0, 1, 1,
    0, 0, 0, 0, 0,
    0, 0, 0, 1, 1,
    1, 0, 1, 0, 1,
    0, 0, 0, 0, 0,
    1, 0, 1, 0, 1,
    1, 1, 0, 0, 0,
    1, 0, 0, 0, 0,
    1, 1, 1, 0, 0,
    1, 0, 0, 0, 1,
    0, 0, 1, 1, 0,
    1, 0, 1, 1, 0,
    0, 1, 1, 0, 1,
    0, 0, 0, 1, 1,
    0, 0, 0, 0, 0,
    0, 1, 0, 1, 0,
    0, 1, 0, 0, 1,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    1, 0, 1, 0, 0,
    0, 1, 0, 0, 0,
    0, 0, 0, 1, 0,
    1, 0, 0, 1, 1,
    1, 1, 0, 0, 1,
    1, 1, 0, 0, 0,
    0, 1, 0, 0, 0,
    1, 1, 0, 0, 1,
    1, 0, 0, 1, 1,
    0, 1, 0, 0, 0,
    0, 0, 1, 0, 0,
    0, 0, 0, 0, 0,
    0, 1, 0, 0, 0,
    1, 0, 0, 1, 1,
    0, 0, 1, 0, 1,
    0, 0, 1, 0, 0,
    1, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 1, 1,
    1, 0, 1, 0, 0,
    0, 1, 0, 0, 1,
    1, 0, 1, 0, 0,
    0, 0, 0, 0, 1,
    1, 0, 1, 1, 0,
    1, 1, 0, 0, 1,
    1, 0, 1, 0, 0,
    1, 1, 0, 1, 1,
    0, 1, 0, 0, 0,
    0, 0, 1, 0, 1,
    1, 0, 0, 0, 1,
    0, 0, 0, 0, 1,
    0, 1, 1, 1, 0,
    0, 1, 1, 0, 0,
    1, 0, 1, 0, 0,
    1, 0, 1, 0, 0,
    1, 1, 0, 1, 0,
    1, 1, 0, 0, 0,
    1, 1, 0, 0, 0,
    0, 0, 1, 1, 0,
    0, 0, 0, 1, 0,
    0, 0, 0, 0, 0,
    0, 0, 1, 0, 1,
    0, 1, 0, 0, 1,
    0, 1, 0, 1, 1,
    0, 0, 1, 0, 0,
    0, 0, 1, 1, 0,
    0, 1, 0, 0, 1,
    1, 1, 0, 1, 1,
    1, 0, 1, 0, 0,
    1, 1, 0, 1, 0,
    1, 0, 0, 1, 0,
    0, 0, 1, 0, 0,
    0, 0, 1, 1, 1,
    1, 0, 0, 0, 0,
    1, 0, 0, 1, 1,
    0, 0, 1, 0, 0,
    0, 1, 1, 1, 1,
    0, 0, 0, 1, 1,
    0, 0, 0, 0, 1,
    0, 0, 0, 1, 0,
    1, 1, 0, 1, 0,
    1, 1, 0, 0, 0,
    1, 0, 0, 0, 1,
    0, 1, 0, 0, 1,
    1, 1, 0, 0, 0,
    0, 0, 1, 0, 0,
    0, 0, 0, 0, 0,
    0, 1, 1, 0, 1,
    1, 0, 0, 1, 0,
    1, 0, 1, 1, 0,
    0, 0, 0, 0, 0,
    1, 1, 0, 0, 1,
    1, 0, 1, 0, 0,
    0, 0, 0, 1, 0,
    1, 0, 0, 1, 1,
    0, 1, 1, 0, 0,
    1, 1, 1, 0, 0,
    1, 0, 1, 0, 1,
    0, 0, 1, 0, 0,
    0, 0, 1, 1, 1,
    1, 0, 1, 0, 0,
    0, 1, 1, 1, 0,
    1, 1, 0, 0, 0,
    0, 1, 0, 0, 1,
    1, 0, 1, 0, 1,
    1, 1, 1, 1, 1,
    0, 0, 0, 0, 1,
    1, 0, 1, 1, 1,
    0, 1, 0, 1, 0,
    0, 0, 1, 0, 0,
    0, 1, 0, 0, 0,
    0, 1, 1, 1, 1,
    0, 0, 0, 0, 0,
    1, 0, 0, 1, 0,
    0, 0, 1, 0, 0,
    0, 0, 1, 1, 0,
    0, 0, 1, 0, 0,
    1, 0, 1, 1, 0,
    1, 1, 0, 0, 1,
    0, 1, 0, 1, 0,
    0, 1, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 1, 1, 0,
    0, 0, 1, 0, 0,
    0, 0, 1, 1, 1,
    0, 0, 0, 0, 0,
    0, 0, 1, 0, 1,
    1, 0, 0, 0, 0,
    1, 0, 0, 0, 1,
    0, 0, 1, 0, 1,
    1, 1, 0, 1, 0,
    0, 0, 1, 1, 1,
    1, 1, 1, 0, 1,
    0, 1, 0, 1, 0,
    0, 1, 0, 1, 0,
    0, 1, 1, 0, 0,
    0, 1, 1, 0, 1,
    0, 0, 0, 0, 0,
    0, 1, 0, 1, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 1, 0,
    0, 0, 1, 0, 0,
    0, 0, 1, 0, 1,
    0, 0, 0, 1, 0,
    0, 1, 0, 0, 1,
    0, 1, 0, 1, 0,
    1, 1, 0, 0, 1,
    0, 0, 0, 0, 1,
    0, 0, 0, 0, 0,
    0, 1, 0, 0, 0,
    0, 1, 1, 0, 0,
    0, 1, 0, 0, 0,
    1, 0, 0, 0, 0,
    0, 0, 0, 0, 1
]);

SkillPreference = array2d(1..200, 1..5, [
    2.45, 3.07, 2.53, 1.63, 3.42,
    3.32, 3.24, 2.84, 2.45, 3.22,
    1.57, 2.25, 3.45, 3.34, 0.91,
    3.18, 0.51, 0.59, 1.16, 1.49,
    3.2, 2.56, 3.5, 3.21, 1.49,
    1.72, 3.28, 3.09, 0.62, 2.32,
    1.43, 0.64, 3.28, 1.94, 2.34,
    2.65, 2.63, 2.22, 2.67, 2.82,
    1.52, 3.03, 2.81, 1.65, 1.45,
    0.85, 2.56, 1.83, 2.98, 1.6,
    0.74, 0.54, 1.0, 1.12, 0.83,
    3.5, 1.41, 2.51, 2.02, 2.03,
    1.48, 2.28, 1.17, 1.32, 1.08,
    1.04, 1.58, 2.95, 1.05, 1.98,
    2.61, 0.85, 2.4, 1.66, 2.69,
    1.31, 2.42, 3.4, 3.02, 0.59,
    1.37, 2.43, 1.79, 2.74, 0.79,
    2.51, 3.1, 0.86, 1.66, 0.63,
    0.83, 1.87, 3.22, 2.78, 1.08,
    2.65, 1.81, 1.97, 0.77, 1.71,
    1.18, 0.73, 0.94, 2.54, 0.58,
    2.2, 1.37, 2.08, 1.17, 2.09,
    1.99, 1.82, 1.64, 2.05, 1.91,
    3.16, 2.53, 3.44, 0.87, 2.02,
    0.88, 2.78, 2.24, 0.69, 3.39,
    2.98, 1.73, 1.23, 3.17, 0.99,
    0.73, 0.56, 0.99, 3.03, 1.22,
    2.16, 1.73, 1.21, 1.06, 2.49,
    2.14, 2.39, 2.32, 2.69, 1.41,
    2.31, 2.55, 3.29, 3.13, 1.93,
    2.78, 2.0, 0.72, 2.23, 1.81,
    3.47, 1.77, 1.14, 0.77, 1.24,
    3.01, 3.32, 1.54, 0.61, 2.03,
    0.91, 3.18, 2.93, 1.01, 1.72,
    2.28, 0.53, 3.27, 2.7, 2.75,
    1.34, 0.83, 2.65, 0.54, 0.67,
    3.24, 3.49, 1.94, 2.54, 0.58,
    2.69, 0.87, 1.04, 2.61, 3.01,
    0.8, 2.59, 2.85, 0.5, 2.84,
    1.28, 1.1, 1.4, 0.66, 0.9,
    2.31, 3.28, 3.48, 0.78, 2.83,
    2.6, 0.66, 2.51, 1.95, 1.82,
    1.18, 2.13, 1.39, 0.57, 1.03,
    2.91, 3.44, 2.07, 2.94, 3.22,
    2.06, 0.86, 1.99, 2.76, 1.54,
    1.06, 3.01, 3.4, 2.53, 2.67,
    2.05, 0.72, 0.59, 2.37, 3.4,
    1.03, 2.2, 0.77, 0.74, 0.88,
    3.21, 1.73, 1.05, 2.11, 2.55,
    3.18, 3.34, 2.71, 2.09, 0.91,
    1.23, 2.22, 2.65, 3.31, 2.49,
    3.08, 1.11, 0.61, 0.61, 1.34,
    2.35, 1.1, 1.88, 3.3, 0.81,
    3.19, 0.68, 2.76, 2.97, 2.77,
    1.97, 1.55, 2.12, 1.05, 1.75,
    1.83, 2.86, 2.89, 2.51, 3.2,
    2.57, 1.81, 2.82, 0.65, 1.7,
    1.53, 2.67, 2.25, 0.63, 2.76,
    1.75, 2.82, 0.51, 3.03, 2.87,
    0.83, 0.81, 0.9, 2.13, 2.75,
    1.24, 1.39, 1.87, 3.21, 1.73,
    1.23, 0.93, 1.56, 1.61, 2.44,
    2.42, 3.0, 0.9, 2.01, 2.2,
    1.85, 1.87, 0.69, 0.73, 2.1,
    2.95, 1.02, 2.05, 0.53, 1.71,
    0.62, 1.77, 3.37, 2.0, 1.19,
    3.13, 2.72, 1.95, 1.54, 2.43,
    0.95, 3.36, 2.61, 2.64, 0.81,
    1.48, 1.08, 2.76, 3.24, 3.11,
    0.82, 1.46, 2.62, 1.3, 1.41,
    2.84, 0.62, 1.27, 3.25, 1.02,
    3.33, 1.15, 2.39, 1.99, 3.16,
    0.69, 3.41, 1.93, 1.85, 1.24,
    3.24, 3.44, 1.95, 2.16, 3.14,
    3.41, 2.63, 1.0, 3.29, 1.44,
    2.75, 1.14, 3.43, 1.7, 1.56,
    2.68, 3.12, 2.78, 3.39, 2.69,
    2.34, 2.48, 2.28, 0.94, 1.35,
    2.54, 1.18, 0.85, 0.81, 1.59,
    1.79, 1.02, 1.45, 1.03, 3.12,
    2.28, 1.19, 0.79, 1.36, 1.89,
    2.96, 1.99, 3.06, 0.66, 1.7,
    0.66, 0.81, 2.06, 3.31, 1.57,
    2.38, 3.15, 1.92, 0.67, 0.56,
    2.89, 1.97, 1.47, 1.01, 1.48,
    2.28, 1.72, 0.56, 1.36, 2.28,
    0.85, 0.64, 1.5, 2.6, 2.39,
    3.02, 3.29, 1.98, 1.5, 2.19,
    1.58, 0.61, 2.67, 2.89, 1.87,
    1.35, 1.71, 0.63, 3.26, 1.6,
    2.39, 1.14, 2.69, 1.57, 1.47,
    3.08, 3.07, 1.37, 2.71, 3.24,
    0.71, 2.13, 2.96, 3.38, 1.02,
    1.65, 1.51, 3.36, 1.49, 1.18,
    2.83, 1.24, 2.1, 2.44, 1.19,
    2.1, 3.33, 0.86, 3.23, 1.91,
    1.55, 0.74, 2.38, 1.79, 0.61,
    0.62, 1.11, 0.51, 2.56, 3.23,
    1.41, 0.73, 0.86, 1.59, 2.36,
    2.74, 1.87, 1.74, 2.96, 0.97,
    2.93, 3.45, 3.41, 1.75, 2.94,
    3.49, 2.64, 0.91, 0.78, 2.41,
    0.96, 2.1, 1.64, 0.84, 0.57,
    2.85, 2.69, 3.09, 0.76, 1.23,
    1.59, 0.84, 3.0, 3.05, 1.14,
    3.47, 1.82, 1.45, 2.39, 0.92,
    0.66, 1.05, 3.24, 1.97, 2.54,
    0.88, 1.78, 3.46, 2.69, 1.91,
    2.2, 2.37, 3.0, 3.35, 1.28,
    1.99, 1.96, 0.8, 0.74, 1.18,
    0.84, 1.12, 0.53, 0.58, 0.62,
    3.12, 1.62, 0.51, 3.12, 2.59,
    1.6, 2.79, 3.03, 1.8, 2.53,
    1.29, 2.44, 0.78, 3.04, 2.58,
    1.84, 1.8, 2.35, 1.15, 3.45,
    2.46, 2.78, 2.09, 2.64, 1.2,
    1.96, 2.47, 0.78, 2.66, 3.4,
    3.3, 0.73, 1.51, 1.78, 1.66,
    0.7, 2.19, 1.95, 1.97, 2.47,
    1.73, 2.96, 0.57, 1.05, 2.86,
    2.26, 2.4, 3.29, 1.05, 1.54,
    1.18, 2.91, 1.56, 2.2, 2.23,
    1.98, 3.39, 2.83, 3.06, 1.32,
    1.37, 3.0, 2.34, 2.17, 2.77,
    1.02, 1.2, 3.32, 3.26, 2.31,
    2.19, 1.51, 1.1, 2.72, 0.5,
    3.45, 2.54, 2.79, 1.11, 3.39,
    2.42, 2.61, 0.63, 1.41, 2.61,
    1.14, 3.14, 3.23, 2.98, 2.11,
    1.42, 1.2, 2.55, 1.34, 3.12,
    3.09, 1.47, 2.84, 2.06, 3.24,
    2.05, 1.67, 3.46, 2.34, 1.12,
    1.42, 2.14, 1.0, 2.86, 1.93,
    2.5, 2.02, 0.97, 0.65, 0.58,
    1.65, 1.31, 1.25, 1.75, 0.87,
    1.29, 1.47, 1.07, 2.88, 2.81,
    1.18, 1.25, 0.75, 2.53, 2.35,
    1.29, 3.38, 2.21, 2.89, 2.37,
    2.38, 1.32, 2.69, 2.17, 1.01,
    0.91, 2.12, 2.26, 0.67, 0.83,
    1.3, 0.91, 2.82, 3.3, 1.99,
    1.3, 0.6, 1.23, 1.03, 3.15,
    2.95, 2.79, 3.43, 2.62, 1.1,
    1.4, 0.68, 1.47, 1.87, 3.43,
    2.56, 1.91, 1.99, 2.6, 1.65,
    2.42, 2.16, 2.75, 1.26, 0.91,
    2.89, 1.76, 0.96, 2.1, 1.52,
    0.96, 2.96, 0.64, 1.38, 2.34,
    0.54, 2.23, 1.25, 3.03, 1.53,
    2.98, 1.92, 0.6, 1.03, 0.83,
    2.32, 2.69, 2.27, 1.09, 2.05,
    3.02, 2.54, 1.33, 1.86, 1.13,
    2.76, 3.41, 2.35, 3.35, 3.18,
    2.06, 1.75, 2.87, 1.94, 2.76,
    0.93, 2.04, 2.83, 0.53, 1.64,
    1.03, 1.19, 3.16, 2.3, 2.94,
    2.25, 0.64, 3.01, 2.02, 2.14,
    3.04, 0.91, 3.46, 3.15, 0.85,
    3.3, 1.75, 1.3, 2.98, 2.8,
    3.32, 2.99, 0.76, 3.13, 1.21,
    0.85, 3.34, 2.47, 3.38, 3.38,
    2.52, 2.96, 1.43, 2.31, 0.91,
    1.45, 2.23, 2.25, 3.22, 1.24,
    1.92, 0.89, 2.38, 2.41, 3.23,
    2.72, 2.39, 3.22, 1.54, 1.02,
    0.54, 0.85, 3.08, 2.55, 2.8,
    1.67, 0.52, 3.4, 2.47, 3.21,
    2.4, 1.53, 0.57, 0.71, 0.98,
    2.53, 3.26, 2.08, 1.44, 0.85,
    2.62, 1.92, 1.92, 3.36, 1.61,
    0.97, 3.0, 1.23, 0.62, 3.31,
    2.0, 0.85, 3.36, 1.16, 3.09,
    2.18, 1.1, 0.71, 2.08, 3.19,
    1.03, 3.41, 0.67, 1.76, 1.39,
    1.36, 2.22, 1.76, 1.57, 3.14,
    2.91, 1.19, 1.94, 1.88, 2.88,
    2.07, 1.2, 2.2, 0.76, 0.72,
    3.11, 3.06, 0.87, 2.26, 1.96,
    1.62, 2.04, 1.87, 2.69, 3.27,
    3.06, 0.76, 3.19, 0.93, 2.44,
    2.13, 2.19, 3.41, 1.05, 0.93,
    2.12, 1.02, 1.49, 2.68, 2.42,
    0.66, 1.01, 1.49, 1.55, 1.95,
    3.09, 1.74, 3.0, 1.76, 1.25,
    1.55, 1.29, 2.65, 1.67, 1.38,
    0.89, 1.83, 2.29, 2.4, 1.1,
    3.17, 3.09, 2.84, 1.39, 0.59,
    1.19, 2.87, 0.91, 2.42, 1.18,
    1.47, 1.93, 1.33, 2.5, 1.86,
    3.19, 1.53, 2.81, 1.5, 2.96,
    2.73, 1.93, 2.77, 2.83, 2.3,
    0.8, 3.05, 2.08, 2.47, 1.45,
    1.22, 2.42, 2.68, 2.51, 3.19,
    0.65, 3.19, 1.12, 3.22, 1.81,
    2.5, 2.5, 0.67, 1.09, 3.29,
    1.34, 1.46, 3.19, 1.28, 2.31,
    3.29, 3.43, 2.29, 1.72, 1.78,
    0.54, 3.4, 3.13, 3.01, 0.91,
    2.51, 3.44, 2.81, 2.88, 1.64,
    0.76, 3.32, 1.64, 1.35, 1.64
]);

ShiftAvailability = array2d(1..200, 1..3, [
    0, 1, 0,
    0, 1, 0,
    1, 0, 0,
    1, 0, 1,
    1, 1, 0,
    1, 0, 1,
    1, 1, 0,
    1, 0, 1,
    1, 1, 0,
    0, 0, 0,
    1, 1, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 1, 0,
    0, 1, 0,
    0, 0, 0,
    1, 0, 1,
    0, 1, 0,
    0, 0, 1,
    0, 1, 0,
    0, 1, 0,
    0, 0, 0,
    0, 1, 1,
    1, 0, 1,
    0, 0, 0,
    0, 0, 1,
    1, 0, 1,
    1, 1, 0,
    1, 1, 1,
    1, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    1, 0, 0,
    0, 1, 1,
    0, 0, 0,
    0, 0, 1,
    1, 1, 0,
    0, 1, 0,
    0, 0, 1,
    1, 0, 1,
    0, 0, 0,
    0, 0, 1,
    1, 1, 0,
    1, 0, 0,
    1, 0, 0,
    1, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 1,
    1, 0, 0,
    0, 1, 0,
    0, 1, 1,
    1, 0, 0,
    0, 0, 0,
    0, 1, 0,
    0, 0, 0,
    1, 1, 1,
    0, 0, 0,
    0, 0, 0,
    1, 0, 0,
    1, 1, 0,
    1, 1, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 1,
    0, 0, 0,
    1, 0, 0,
    0, 1, 0,
    0, 0, 1,
    0, 0, 1,
    1, 0, 0,
    0, 0, 0,
    0, 1, 1,
    1, 0, 1,
    0, 0, 0,
    1, 1, 0,
    1, 1, 0,
    1, 0, 1,
    0, 1, 0,
    0, 1, 0,
    0, 1, 0,
    1, 0, 1,
    0, 1, 0,
    1, 0, 1,
    0, 0, 0,
    0, 1, 0,
    0, 0, 1,
    0, 0, 1,
    0, 1, 0,
    0, 0, 1,
    0, 0, 0,
    0, 0, 0,
    1, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 1, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 1, 0,
    0, 0, 1,
    0, 0, 1,
    0, 0, 0,
    1, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 1, 0,
    1, 0, 0,
    0, 1, 0,
    0, 0, 0,
    0, 0, 1,
    0, 0, 1,
    1, 0, 1,
    1, 0, 0,
    0, 0, 0,
    0, 0, 0,
    1, 1, 1,
    0, 0, 0,
    0, 0, 1,
    0, 0, 0,
    1, 0, 1,
    0, 1, 0,
    0, 0, 1,
    1, 1, 0,
    1, 1, 1,
    1, 0, 0,
    1, 0, 1,
    0, 1, 1,
    0, 0, 1,
    1, 0, 1,
    0, 0, 0,
    1, 0, 0,
    0, 0, 0,
    1, 0, 0,
    1, 0, 0,
    1, 1, 0,
    0, 0, 0,
    1, 1, 0,
    1, 1, 0,
    1, 0, 1,
    1, 0, 0,
    1, 0, 0,
    1, 0, 0,
    0, 0, 0,
    0, 1, 0,
    0, 0, 0,
    0, 0, 0,
    0, 1, 1,
    0, 0, 0,
    0, 1, 0,
    0, 1, 1,
    0, 1, 0,
    1, 0, 0,
    1, 1, 1,
    0, 0, 0,
    1, 1, 1,
    0, 1, 0,
    1, 0, 0,
    0, 0, 0,
    1, 1, 0,
    0, 0, 1,
    1, 1, 1,
    0, 0, 0,
    1, 0, 0,
    1, 0, 0,
    1, 1, 0,
    0, 1, 0,
    0, 0, 1,
    1, 0, 0,
    0, 1, 0,
    0, 1, 0,
    0, 0, 1,
    1, 0, 1,
    1, 0, 0,
    0, 1, 0,
    0, 0, 1,
    1, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 1, 0,
    1, 0, 0,
    1, 1, 0,
    1, 1, 0,
    1, 1, 0,
    0, 0, 0,
    0, 0, 1,
    0, 0, 1,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 1, 0,
    0, 0, 1,
    0, 1, 1
]);

UnfulfilledPositionWeight = 1000;

MiniZinc Model:
% Employee Assignment Problem
% Goal: Assign employees to shifts in different restaurants based on skills and preferences

% Input parameters
int: NumRestaurants;     % Number of restaurants
int: NumEmployees;       % Number of employees
int: NumShifts;          % Number of shifts per day
int: NumSkills;          % Number of possible skills

% 3D array: Demand[restaurant, shift, skill]
array[1..NumRestaurants, 1..NumShifts, 1..NumSkills] of int: Demand;

% 2D array: EmployeeSkills[employee, skill] - 1 if employee has the skill, 0 otherwise
array[1..NumEmployees, 1..NumSkills] of int: EmployeeSkills;

% 2D array: SkillPreference[employee, skill] - preference level of employee for each skill
array[1..NumEmployees, 1..NumSkills] of int: SkillPreference;

% 2D array: ShiftAvailability[employee, shift] - 1 if employee is available for the shift, 0 otherwise
array[1..NumEmployees, 1..NumShifts] of int: ShiftAvailability;

% Cost weight for unfulfilled positions
int: UnfulfilledPositionWeight;

% Decision variable: Assignment[restaurant, shift, skill, employee] - 1 if employee is assigned, 0 otherwise
array[1..NumRestaurants, 1..NumShifts, 1..NumSkills, 1..NumEmployees] of var 0..1: Assignment;

% Constraint: Each demand for a skill in a restaurant shift should be met by assigned employees
constraint
    forall(r in 1..NumRestaurants, s in 1..NumShifts, k in 1..NumSkills) (
        sum(e in 1..NumEmployees) (
            Assignment[r, s, k, e] * EmployeeSkills[e, k] * ShiftAvailability[e, s]
        ) >= Demand[r, s, k]
    );

% Objective: Minimize the cost of unfulfilled positions and less preferred assignments
var int: total_cost;

% Cost of unfulfilled positions
var int: unfulfilled_cost = sum(r in 1..NumRestaurants, s in 1..NumShifts, k in 1..NumSkills) (
    let {
        var int: fulfilled_positions = sum(e in 1..NumEmployees) (
            Assignment[r, s, k, e] * EmployeeSkills[e, k] * ShiftAvailability[e, s]
        )
    } in max(0, Demand[r, s, k] - fulfilled_positions) * UnfulfilledPositionWeight
);

% Cost of assigning employees to less preferred positions
var int: preference_cost = sum(r in 1..NumRestaurants, s in 1..NumShifts, k in 1..NumSkills, e in 1..NumEmployees) (
    Assignment[r, s, k, e] * (10 - SkillPreference[e, k])
);

% Total cost
constraint total_cost = unfulfilled_cost + preference_cost;

% Minimize the total cost
solve minimize total_cost;

% Output the assignment schedule
output [
    "Assignment Schedule:\n" ++
    concat([
        "Restaurant ", show(r), ", Shift ", show(s), ", Skill ", show(k), ": " ++
        concat([ if Assignment[r, s, k, e] = 1 then "Employee " ++ show(e) ++ " " else "" endif | e in 1..NumEmployees ]) ++ "\n"
        | r in 1..NumRestaurants, s in 1..NumShifts, k in 1..NumSkills
    ])
];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.