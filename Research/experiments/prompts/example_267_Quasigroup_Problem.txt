You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 267
- Name: Quasigroup Problem
- Domain: Mathematics
- Objective: satisfaction

Problem Description:
# Problem QuasiGroup

This is [Problem 003](https://www.csplib.org/Problems/prob003/) at CSPLib.

An order n quasigroup is a Latin square of size n.
That is, an n×n multiplication table in which each element occurs once in every row and column.
A quasigroup can be specified by a set and a binary multiplication operator, ∗ defined over this set.
Quasigroup existence problems determine the existence or non-existence of quasigroups of
a given size with additional properties. For example:
  - QG3: quasigroups for which (a ∗ b) ∗ (b ∗ a) = a
  - QG5: quasigroups for which ((b ∗ a) ∗ b) ∗ b = a
  - QG6: quasigroups for which (a ∗ b) ∗ b = a ∗ (a ∗ b)
For each of these problems, we may additionally demand that the quasigroup is idempotent.
That is, a ∗ a = a for every element a.

## Data
  A unique integer, the order of the problem instance

## Example
  ```
    1    2   3   4
    4    1   2   3
    3    4   1   2
    2    3   4   1
  ```

## Model
  You can find a step-by-step modeling process in this [Jupyter notebook](https://pycsp.org/documentation/models/CSP/Quasigroup/).

  constraints: [Element](http://pycsp.org/documentation/constraints/Element)

## Execution
  - python QuasiGroup.py -variant=base-v3 -data=number
  - python QuasiGroup.py -variant=base-v4 -data=number
  - python QuasiGroup.py -variant=base-v5 -data=number
  - python QuasiGroup.py -variant=base-v6 -data=number
  - python QuasiGroup.py -variant=base-v7 -data=number
  - python QuasiGroup.py -variant=aux-v3 -data=number
  - python QuasiGroup.py -variant=aux-v4 -data=number
  - python QuasiGroup.py -variant=aux-v5 -data=number
  - python QuasiGroup.py -variant=aux-v7 -data=number

## Links
  - https://www.csplib.org/Problems/prob003/
  - https://www.cril.univ-artois.fr/XCSP22/competitions/csp/csp

## Tags
  academic, notebook, csplib, xcsp22

<br />

## _Alternative Model(s)_

#### QuasiGroup_z.py
 - constraints: [AllDifferent](http://pycsp.org/documentation/constraints/AllDifferent), [Element](http://pycsp.org/documentation/constraints/Element)
 - tags: academic, csplib, mzn08


MiniZinc Model:
include "globals.mzn";

% Order of the quasigroup
int: n = 4;

% Quasigroup
array[1..n, 1..n] of var 1..n: Q;

% Each element occurs once in every row and column
constraint forall(i in 1..n)(alldifferent(row(Q, i)));
constraint forall(i in 1..n)(alldifferent(col(Q, i)));

% Quasigroup properties
constraint forall(a in 1..n, b in 1..n)(Q[Q[a,b], Q[b,a]] = a);
constraint forall(a in 1..n, b in 1..n)(Q[Q[Q[b,a],b],b] = a);
constraint forall(a in 1..n, b in 1..n)(Q[Q[a,b],b] = Q[a, Q[a,b]]);

% Quasigroup is idempotent
constraint forall(a in 1..n)(Q[a,a] = a);

solve satisfy;

output ["Quasigroup:\n"] ++ [show(Q[i,j]) ++ " " | i in 1..n, j in 1..n];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.