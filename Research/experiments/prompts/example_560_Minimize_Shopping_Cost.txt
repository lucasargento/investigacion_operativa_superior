You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 560
- Name: Minimize Shopping Cost
- Domain: Optimization
- Objective: minimization

Problem Description:
The problem is about shopping different kinds of parts from a set of different stores. Each store may or may not have each specific part. The goal is to minimize the cost of buying all parts. The cost includes the price of the parts and the shipping cost for each store. The tricky part is that for each store there is a shipping cost and sometimes buying a part at the lower price, means buying it at a store that the shipping would make it more expensive than buying it from a store that is more expensive but have other less expensive parts. The decision variables are which store to buy each product from, the total cost for the parts, the delivery cost, and the total cost which is the sum of the part cost and the delivery cost. The constraints are that a selected part must be in an available store, the total cost for the parts is the sum of the cost of the parts from the selected stores, and the delivery cost is the sum of the delivery costs of the stores where something is bought from. The objective is to minimize the total cost.


MiniZinc Model:
include "globals.mzn"; 

int: num_parts;
int: num_stores;

array[1..num_parts, 1..num_stores] of float: product_stores;
array[1..num_stores] of float: store_delivery_costs;

% decision variables
array[1..num_parts] of var 1..num_stores: x; % which store to by product p?

var 0.0..max(array1d(product_stores)): part_cost; 
var 0.0..max(store_delivery_costs): delivery_cost;
var float: total_cost = part_cost + delivery_cost;

solve minimize total_cost;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint

  total_cost >= 0.0 /\

  % a selected part must be in an available store
  forall(p in 1..num_parts) (
     % note: " ... > 0" don't work, must be greater than 0
     product_stores[p,x[p]] > 0.01
  )
  /\

  % total cost for the parts
  part_cost = sum([product_stores[p,x[p]] | p in 1..num_parts])
  /\

  % the delivery cost
  delivery_cost = sum([
                    % is there something bought from shop s?
                    if sum([x[p] = s | p in 1..num_parts]) > 0 then 
                        store_delivery_costs[s] 
                    else 
                        0 
                    endif                 
                | s in 1..num_stores])
;

output 
[
 "x: \(x)\n",
 "part_cost: \(part_cost)\n",
 "delivery_cost: \(delivery_cost)\n",
 "total_cost: \(total_cost)\n",
];

num_parts = 3;
num_stores = 3;

% product_stores[p,s]: price 0.0 means that p is _not_ available at store s
product_stores = 
array2d(1..num_parts,1..num_stores,
[
0.0,  2.25, 2.9,
0.0,  3.00, 0.0,
2.0, 15.00, 7.0,
]);

store_delivery_costs = [12.56, 15.2, 33.5];

Expected Output:
{
  "x": [
    2,
    2,
    1
  ],
  "part_cost": 7.25,
  "delivery_cost": 27.76,
  "_objective": 35.01000000000001
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.