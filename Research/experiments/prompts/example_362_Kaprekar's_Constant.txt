You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 362
- Name: Kaprekar's Constant
- Domain: Number Theory
- Objective: satisfaction

Problem Description:
The problem is based on Kaprekar's Constant. Given any four-digit number (whose digits are not all identical), the following steps are performed: 
1. Rearrange the string of digits to form the largest and smallest 4-digit numbers possible. 
2. Subtract the smaller number from the larger. 
3. Use the number obtained and repeat the above process. 
The process eventually hits 6174 and then stays there. The amazing thing is that every four-digit number whose digits are not all the same will eventually hit 6174, in at most 7 steps, and then stay there. The task is to model this process using MiniZinc, a medium-level constraint modelling language, and find the number of solutions for different number of steps.


MiniZinc Model:
include "globals.mzn"; 
int: n = 4;
int: base = 10;
int: rows = base; % 7 steps for n = 4
int: max_val = ceil(pow(int2float(base), int2float(n)))-1; % 9999;
int: min_val = max_val div base;

% The end number(s) for base = 10 and n = 2..9.
% n >= 10 don't work well on a 32-bit machine.
% See http://www.hakank.org/minizinc/kaprekars_constant2.mzn
% for calculating the end number(s) for a base and length n.
%
array[2..10] of set of int: nums = 
 array1d(2..10,
 [ 
 {},                     % 2 none
 {495},                  % 3
 {6174},                 % 4
 {},                     % 5 none
 {549945, 631764},       % 6
 {},                     % 7 none
 {63317664, 97508421},   % 8
 {554999445, 864197532}, % 9
 {6333176664, 9753086421, 9975084201} % 10 % don't work on a 32-bit machine
 % {86431976532},         % 11   
 % {999750842001,997530864201,975330866421,633331766664,555499994445}, % 12
 % {8643319766532}        % 13
 ]);

% decision variables
array[1..rows] of var 0..max_val: x;

% where is the fixpoint (6174 for n=4)? This is the number of iterations. 
% There are pos-1 steps.
var 1..rows: pos; 

predicate reverse(array[int] of var 0..base-1: a, array[int] of var 0..base-1: rev) =
   let { 
      int: len = length(a)
   }
   in
   forall(i in 1..len) (
    rev[i] = a[len-i+1]
   )
;

predicate toNum(array[int] of var 0..base-1: a, var 0..max_val: n, int: base) =
          let { int: len = length(a) }
          in
          n = sum(i in 1..len) (
            ceil(pow(int2float(base), int2float(len-i))) * a[i]
          )
;



% 
% do the Kaprakar procedure
%
predicate kaprekar(var 0..max_val: s, var 0..max_val: t, int: base) =
  let {
     array[1..n] of var 0..base-1: s_num,
     array[1..n] of var 0..base-1: s_ordered,
     array[1..n] of var 0..base-1: s_reverse, 
     var 0..max_val: ord_num,
     var 0..max_val: rev_num
  }
  in
  toNum(s_num, s, base)
  /\
  sort(s_num, s_ordered)
  /\
  reverse(s_ordered, s_reverse)
  /\
  toNum(s_ordered, ord_num, base)
  /\
  toNum(s_reverse,rev_num, base)
  /\
  t = rev_num - ord_num
;


% solve satisfy;
solve :: int_search(x ++ [pos], input_order, indomain_min, complete) satisfy;

% constraint  trace("min_val: " ++ show(min_val) ++ " max_val: " ++ show(max_val) ++ "\n" , 1=1);

constraint

  forall(i in 2..rows) (
     kaprekar(x[i-1], x[i], base)
  )

  % test one number
  /\ x[1] = 3141

  /\
  not(x[1] in nums[n]) % skip the fixpoint numbers
  /\ 
  % get the position
  let {
     var 1..rows: i
   } in
     pos = i
     /\
     x[i] in nums[n]
     /\
     (i > 1 -> x[i-1] != x[i])
   
 
  %/\ % get all cycles of length pos (i.e. pos-1 steps)
  %pos = 2
;

output [

  "x: " ++ show(x) ++ "\n" ++
  "pos: " ++ show(pos) ++ "\n" ++ 
  "start: " ++ show(x[1]) ++ "\n"
]
++
[
  show(x[i]) ++ " "
  | i in 1..fix(pos)
]
++ 
["\n"];

Expected Output:
{
  "x": [
    3141,
    3177,
    6354,
    3087,
    8352,
    6174,
    6174,
    6174,
    6174,
    6174
  ],
  "pos": 6
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.