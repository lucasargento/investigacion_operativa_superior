You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 140
- Name: Graceful Graphs
- Domain: Combinatorial mathematics
- Objective: satisfaction

Problem Description:
---
Title:    Graceful Graphs
Proposer: Karen Petrie
Category: Combinatorial mathematics
---


A labelling $f$ of the nodes of a graph with $q$ edges is graceful if $f$ assigns each
node a unique label from $\{0, 1, \ldots , q\}$ and when each edge $xy$ is labelled with
$|f(x)-f(y)|$, the edge labels are all different. Gallian surveys graceful graphs, i.e. graphs with a graceful labelling, and lists the
graphs whose status is known.

<center>
<figure>
  <img src="assets/k4.png" alt="solution to $K_4$ " height="300">
  <figcaption>A graceful labelling of $K_4$ </figcaption>
</figure>
</center>

{prob007} is a special case of a graceful graph where the graph is a line.


MiniZinc Model:
include "globals.mzn"; 

int: m = 16;
int: n = 8;
array[1..n] of var 0..m: nodes;
array[1..m, 1..2] of var 1..n: graph;
array[1..m] of var 1..m: edges;



solve :: int_search(nodes, first_fail, indomain_min, complete) satisfy;

constraint
  forall(i in 1..m) (
    abs(nodes[graph[i,1]] - nodes[graph[i,2]]) = edges[i]  
  )
  /\
  all_different(edges) 
  /\ 
  all_different(nodes)
;

graph =
array2d(1..m, 1..2,
[1, 2,
1, 3,
1, 4,
2, 3,
2, 4,
3, 4,

5, 6,
5, 7,
5, 8,
6, 7,
6, 8,
7, 8,

1, 5,
2, 6,
3, 7,
4, 8]);

output
[
  "nodes: " ++ show(nodes) ++ "\n" ++
  "edges: " ++ show(edges) ++ "\n"
];

Expected Output:
{
  "nodes": [
    0,
    1,
    5,
    16,
    6,
    15,
    13,
    3
  ],
  "graph": [
    [
      1,
      2
    ],
    [
      1,
      3
    ],
    [
      1,
      4
    ],
    [
      2,
      3
    ],
    [
      2,
      4
    ],
    [
      3,
      4
    ],
    [
      5,
      6
    ],
    [
      5,
      7
    ],
    [
      5,
      8
    ],
    [
      6,
      7
    ],
    [
      6,
      8
    ],
    [
      7,
      8
    ],
    [
      1,
      5
    ],
    [
      2,
      6
    ],
    [
      3,
      7
    ],
    [
      4,
      8
    ]
  ],
  "edges": [
    1,
    5,
    16,
    4,
    15,
    11,
    9,
    7,
    3,
    2,
    12,
    10,
    6,
    14,
    8,
    13
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.