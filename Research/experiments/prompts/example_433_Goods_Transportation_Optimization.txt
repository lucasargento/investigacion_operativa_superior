You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 433
- Name: Goods Transportation Optimization
- Domain: Supply Chain Management
- Objective: minimization

Problem Description:
The optimization problem is focused on efficiently allocating goods from a set of origins, denoted by OriginNum, to a set of destinations, represented by DestinationNum. Each originating point has a certain supply of goods, Supply_i, where i is an origin. Correspondingly, each destination point has a specific demand, Demand_j, where j is a destination. The cost associated with sending goods from origin i to destination j is represented by Cost_{i,j}. The objective is to minimize the total transportation cost while meeting the demands at the destinations without exceeding the supplies at the origins.


Input Data (data.dzn):
OriginNum = 2;
DestinationNum = 4;
Supply = [| 29, 49 |];
Demand = [| 6, 28, 19, 23 |];
Cost = [| 5, 10, 6, 3 | 8, 5, 4, 7 |];

MiniZinc Model:
% Parameters
int: OriginNum;
int: DestinationNum;
array[1..OriginNum] of int: Supply;
array[1..DestinationNum] of int: Demand;
array[1..OriginNum, 1..DestinationNum] of int: Cost;

% Decision Variables
array[1..OriginNum, 1..DestinationNum] of var 0..max(Supply) : Transport;

% Constraints
% The total goods transported from each origin should not exceed its supply
constraint forall(i in 1..OriginNum) (
    sum(j in 1..DestinationNum) (Transport[i,j]) <= Supply[i]
);

% The total goods transported to each destination should meet its demand
constraint forall(j in 1..DestinationNum) (
    sum(i in 1..OriginNum) (Transport[i,j]) = Demand[j]
);

% Objective
var int: TotalCost = sum(i in 1..OriginNum, j in 1..DestinationNum) (Transport[i,j] * Cost[i,j]);
solve minimize TotalCost;

% Output
output [ "Transport[" ++ show(i) ++ "," ++ show(j) ++ "]=" ++ show(Transport[i,j]) ++ "\n" | i in 1..OriginNum, j in 1..DestinationNum ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.