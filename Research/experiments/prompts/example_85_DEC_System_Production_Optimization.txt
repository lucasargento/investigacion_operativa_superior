You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 85
- Name: DEC System Production Optimization
- Domain: Manufacturing and Production
- Objective: maximization

Problem Description:
Digital Equipment Corporation (DEC) has introduced new families of computer systems with different memory, disk storage, and expansion capabilities. Each system is either a general-purpose (GP) system or a workstation (WS) system. Each system must have an integer number of disk drives. Additionally, for each system, an average number of units of disk drive per system is requested by customers. Each system uses a specific amount of units of 256K memory boards per system and has a price in dollars. The in-house supplier of CPUs for DEC has a maximum number of units of CPUs that it can provide due to debugging problems. (Each system requires exactly 1 CPU) The supply of disk drives is uncertain and is estimated by the manufacturer and has an upper and lower bound. The supply of 256k memory boards is also limited and has an upper and lower bound. For each system, there is an estimated maximum demand for the next quarter. Additionally, there is a maximum demand for the whole GP family and the whole WS family for the next quarter. Included in the projections, is a preorder demand that has been received for each type of system that must be fulfilled in the next quarter. To address the shortage of 256K memory boards, DEC has access to some units of an alternative memory board that can only be used in certain systems. To make the problem easier to solve, you can assume the number of systems produced is a floating point number. How many of which system should DEC produce and using what memories and disks to maximize the profit for the next quarter?


Input Data (data.dzn):
N = 5;
IsWorkstation = [False, False, False, True, True];
Price = [60000, 40000, 30000, 30000, 15000];
DiskDrives = [0.3, 1.7, 0, 1.4, 0];
MemoryBoards = [4, 2, 2, 2, 1];
Demand = [1800, 999999, 300, 999999, 999999];
Preorder = [0, 500, 0, 500, 400];
AltCompatible = [True, False, False, False, False];
MaxCpu = 7000;
MinDisk = 3000;
MaxDisk = 7000;
MinMemory = 8000;
MaxMemory = 16000;
DemandGP = 3800;
DemandWS = 3200;
AltMemory = 4000;


MiniZinc Model:
% Empty model file

Expected Output:
{
  "_objective": 271250000.0
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.