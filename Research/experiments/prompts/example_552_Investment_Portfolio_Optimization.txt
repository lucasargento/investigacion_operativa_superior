You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 552
- Name: Investment Portfolio Optimization
- Domain: Finance
- Objective: maximization

Problem Description:
A portfolio manager with a fixed budget of $100 million is considering eight investment opportunities. The manager must choose an investment level for each alternative ranging from $0 to $40 million. The permissible allocations are discretized to intervals of $10 million. A unit of investment is defined as $10 million. The budget is 10 and the amounts to invest are the integers in the range from 0 to 4. The net annual returns from the investment opportunities are expressed in millions of dollars. A ninth opportunity, not shown in the table, is available for funds left over from the first eight investments. The return is 5% per year for the amount invested, or equivalently, $0.5 million for each $10 million invested. The manager's goal is to maximize the total annual return without exceeding the budget. The problem is formulated as a mixed-integer linear program with the objective function being nonlinear. The problem is similar in structure to the knapsack problem.


MiniZinc Model:
int: n = 4;
int: m = 8;
array[0..n,1..m] of int: returns;

array[0..n, 1..m] of var 0..1: x; % x, MIP version
array[1..m] of var 0..n: choices; % the choices
array[1..m] of var int: the_returns;

int: budget = 10; % total 10 million
int: not_invested_returns = 5; % return for not invested (0.5*10)
var 0..budget: not_invested;
var 0..1000: z;


% solve satisfy;
% solve maximize z;
solve :: int_search(
        [x[i,j] | i in 0..n, j in 1..m],
        smallest, 
        indomain_min,
        complete) 
    maximize z;
    % satisfy;    

constraint
    forall(j in 1..m) (
       sum([x[i,j] | i in 0..n])  <= 1
    ) 
    /\
    % z >= 223 /\ % for solve satisfy
    z = sum(i in 0..n, j in 1..m, ) (
          returns[i,j]*x[i,j]
        ) + not_invested*not_invested_returns
    /\
    sum(i in 0..n, j in 1..m) (i*x[i,j])+not_invested <= budget

    /\
    forall(j in 1..m) (
       the_returns[j] >= 0 /\
       the_returns[j] = sum([returns[i,j]*x[i,j] | i in 0..n]) /\
       choices[j] = sum([i*x[i,j] | i in 0..n])
    )
;

% multiplied with 10
returns = array2d(0..n,1..m, [
 0, 0, 0, 0, 0, 0, 0, 0, % 0
41,18,15,22,13,42,22,10, % 1
58,30,25,38,24,59,35,17, % 2
65,39,33,48,32,66,42,23, % 3
68,45,38,55,39,68,46,28  % 4
]);


output
[
 "x: " ++ show(x) ++ "\n" ++
 "choices: " ++ show(choices) ++ "\n" ++
 "the_returns: " ++ show(the_returns) ++ "\n" ++
 "not_invested: " ++ show(not_invested) ++ "\n" ++
 "z: " ++ show(z) ++ "\n"

];

Expected Output:
{
  "x": [
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    [
      1,
      0,
      0,
      1,
      0,
      1,
      1,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "choices": [
    2,
    1,
    1,
    2,
    0,
    2,
    2,
    0
  ],
  "the_returns": [
    58,
    18,
    15,
    38,
    0,
    59,
    35,
    0
  ],
  "not_invested": 0,
  "z": 223,
  "_objective": 223
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.