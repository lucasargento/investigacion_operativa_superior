You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 168
- Name: Knapsack Problem for Mountain Trip
- Domain: Optimization
- Objective: maximization

Problem Description:
A tourist is planning a trip to the mountains and needs to pack his knapsack. The knapsack can carry a maximum of 4kg (400 decagrams). The tourist has a list of 22 potential items to bring, each with a specific weight and a value representing its importance for the trip. The items include a map, compass, water, sandwich, glucose, tin, banana, apple, cheese, beer, suntan cream, camera, T-shirt, trousers, umbrella, waterproof trousers, waterproof overclothes, note-case, sunglasses, towel, socks, and a book. The tourist can choose any combination of items from the list, but only one of each item is available. He cannot cut or diminish the items, so he can only take whole units of any item. The problem is to determine which items the tourist should carry in his knapsack so that their total weight does not exceed 400 decagrams and their total value is maximized.


MiniZinc Model:
int: num_items = 22;
array[1..num_items, 1..2] of int: items;
array[1..num_items] of string: items_str;

% decision variables
array[1..num_items] of var 0..1: x;
var int: total_weight = sum(i in 1..num_items) ( x[i]*items[i,1] );
var int: total_value  = sum(i in 1..num_items) ( x[i]*items[i,2] );

solve :: int_search(
        x, 
        input_order, 
        indomain_max, 
        complete) 
    maximize total_value;
    % satisfy;


constraint
    total_weight <= 400 

    % /\ total_value = 1030 % testing all optimal solutions
;

output 
[
  "total_value: " ++ show(total_value) ++ "\n" ++ 
  "total_weight: " ++ show(total_weight) ++ "\n"
] ++
[
   if fix(x[i]) > 0 then 
     show(items_str[i]) ++ ": " ++ show(x[i]) ++ " value: " ++ show(items[i,2]) ++ "\n"
   else 
     ""
   endif
   | i in 1..num_items

]
 ++ ["\n"]
;


%
% Data
%

items_str = 
[
"map","compass","water","sandwich","glucose","tin","banana","apple","cheese",
"beer","suntancream","camera","T-shirt","trousers","umbrella","waterproof trousers",
"waterproof overclothes","note-case","sunglasses","towel","socks","book"];


%
% weight (dag) (each)  value (each)  pieces(s)
%
items = array2d(1..num_items, 1..2, [
9,       150,
13,      35,
153,     200,
50,      160,
15,      60,
68,      45,
27,      60,
39,      40,
23,      30,
52,      10,
11,      70,
32,      30,
24,      15,
48,      10,
73,      40,
42,      70,
43,      75,
22,      80,
7,       20,
18,      12,
4,       50,
30,      10
]);

Expected Output:
{
  "x": [
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    0,
    1,
    0
  ],
  "_objective": 1030
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.