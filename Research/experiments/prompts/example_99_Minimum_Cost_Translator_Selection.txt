You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 99
- Name: Minimum Cost Translator Selection
- Domain: Scheduling
- Objective: minimization

Problem Description:
A team of translators is being assembled for the summer Olympics to translate from English into other languages. There is a pool of translators available. Each translator can translate into a certain set of languages and comes with a specific cost. Select the combination of translators that ensures all required languages can be translated into, at the minimum possible cost.


Input Data (data.dzn):
M = 8;
RequiredLanguages = ["FR", "AR", "GE", "RU", "SP", "CH", "IT", "PO"];

N = 6;
Cost = [12000, 16000, 13000, 15000, 9000, 7000];
TranslatorLanguagesMatrix = [
    % FR AR GE RU SP CH IT PO
    |1, 1, 0, 0, 0, 0, 1, 0| % Translator 1
    |0, 0, 1, 1, 0, 1, 0, 0|, % Translator 2
    |0, 1, 0, 0, 0, 1, 0, 0|, % Translator 3
    |1, 0, 0, 0, 1, 0, 1, 1|, % Translator 4
    |1, 0, 1, 1, 1, 0, 0, 0|, % Translator 5
    |0, 0, 1, 0, 1, 0, 0, 1|  % Translator 6
];

MiniZinc Model:
% Empty model file

Expected Output:
{
  "_objective": 35000.0
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.