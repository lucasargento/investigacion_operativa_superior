You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 254
- Name: Mine Operation Optimization
- Domain: Mining
- Objective: maximization

Problem Description:
To maximize profit, which mines should be operated each year and how much should they produce? The company has K mines and can operate at most MaxWork in any given year. For each mine k, there is a royalty cost of Royalty, a production limit of Limit, and the material extracted has a quality of Quality. Each client i requires a material with at least RequiredQuality. The price per unit of material sold is Price, with a discount Discount applied to the royalty cost for each unit sold.


Input Data (data.dzn):
n_mines = 4;
n_maxwork = 3;
royalty = [5000000.0, 4000000.0, 4000000.0, 5000000.0];
limit = [2000000.0, 2500000.0, 1300000.0, 3000000.0];
quality = [1.0, 0.7, 1.5, 0.5];
requiredquality = [0.9, 0.8, 1.2, 0.6, 1.0];
price = 10;
discount = 0.1;

MiniZinc Model:
% Parameters
int: n_mines; % Number of mines
int: n_maxwork; % Maximum number of mines that can be operated in a year
array[1..n_mines] of float: royalty; % Royalty cost for each mine
array[1..n_mines] of float: limit; % Production limit for each mine
array[1..n_mines] of float: quality; % Quality of material from each mine
array[1..5] of float: requiredquality; % Required quality for each year
float: price; % Price per unit of material
float: discount; % Discount rate

% Decision Variables
array[1..n_mines, 1..5] of var 0..1: isoperated; % Whether each mine is operated in each year
array[1..n_mines, 1..5] of var 0.0..limit[1..n_mines]: amount; % Amount of ore produced by each mine in each year

% Constraints
constraint forall(i in 1..5) (
    sum(k in 1..n_mines) (isoperated[k, i]) <= n_maxwork % At most n_maxwork mines can be operated in a year
);

constraint forall(i in 1..5) (
    sum(k in 1..n_mines) (amount[k, i] * quality[k]) = requiredquality[i] * sum(k in 1..n_mines) (amount[k, i]) % The quality of the blended ore must meet the required quality
);

constraint forall(k in 1..n_mines, i in 1..5) (
    amount[k, i] <= limit[k] * isoperated[k, i] % The amount of ore produced by a mine cannot exceed its limit
);

% Objective
var float: profit; % Total profit
constraint profit = sum(i in 1..5) (price * sum(k in 1..n_mines) (amount[k, i]) - sum(k in 1..n_mines) (royalty[k] * isoperated[k, i])) * pow(1 - discount, i - 1);
solve maximize profit;

% Output
output [ if fix(isoperated[k, i]) = 1 then "1" else "0" endif | k in 1..n_mines, i in 1..5] ++ [ "\n" ] ++
       [ show(fix(amount[k, i])) | k in 1..n_mines, i in 1..5];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.