You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 3
- Name: Aircraft Landing Problem
- Domain: Scheduling
- Objective: minimization

Problem Description:
The Aircraft Landing Problem involves determining optimal landing times for a set of aircraft while minimizing penalties associated with deviations from target landing times. Each aircraft must land within a given time window and maintain a required separation time from other aircraft. Landing too early or too late incurs a penalty proportional to the time difference. The objective is to minimize the total penalty while ensuring all constraints are met.


Input Data (data.dzn):
TotalAircrafts = 10;

EarliestLandingTime = [129, 195, 89, 90, 110, 120, 124, 126, 135, 160];
TargetLandingTime = [155, 258, 98, 106, 123, 135, 138, 140, 150, 180];
LatestLandingTime = [689, 653, 517, 501, 634, 603, 657, 592, 510, 604];

PenaltyTimeAfterTarget = [24, 25, 10, 13, 10, 20, 24, 12, 16, 27];
PenaltyTimeBeforeTarget = [24, 25, 10, 13, 10, 20, 24, 12, 16, 27];

SeparationTimeMatrix = array2d(1..10, 1..10,
  [
    99999, 11, 12, 10, 10, 11, 12, 12, 12, 10,
    14, 99999, 10, 12, 12, 10, 13, 14, 11, 13,
    11, 14, 99999, 10, 11, 12, 9, 10, 11, 13,
    8, 10, 11, 99999, 8, 12, 8, 8, 9, 9,
    10, 10, 14, 14, 99999, 10, 8, 14, 11, 10,
    11, 9, 11, 11, 14, 99999, 9, 9, 9, 12,
    12, 13, 13, 8, 14, 14, 99999, 8, 13, 11,
    14, 8, 8, 14, 12, 8, 14, 99999, 8, 12,
    11, 12, 11, 11, 13, 11, 11, 14, 99999, 9,
    11, 9, 10, 10, 8, 14, 8, 14, 9, 99999
  ]
);

MiniZinc Model:
% ============================================================
% AIRCRAFT LANDING PROBLEM (ALP)
% ============================================================
%
% PROBLEM DESCRIPTION:
% -------------------
% The goal is to determine optimal landing times for a set of aircraft
% while minimizing penalties due to deviations from target landing times.
%
% - Each aircraft must land within a given time window.
% - Each aircraft has a target landing time.
% - Landing too early or too late incurs a penalty.
% - There is a required separation time between landings.
%
% OBJECTIVE:
% ----------
% Minimize the total penalty while ensuring all constraints are met.
%
% PARAMETERS PROVIDED IN JSON:
% {
%     "TotalAircrafts": <int>,
%     "EarliestLandingTime": [...],
%     "LatestLandingTime": [...],
%     "TargetLandingTime": [...],
%     "PenaltyTimeAfterTarget": [...],
%     "PenaltyTimeBeforeTarget": [...],
%     "SeparationTimeMatrix": [..., ...]
% }
% ============================================================


% -----------------------------
% 1) PARAMETERS
% -----------------------------

int: TotalAircrafts;

array[1..TotalAircrafts] of int: EarliestLandingTime;
array[1..TotalAircrafts] of int: LatestLandingTime;
array[1..TotalAircrafts] of int: TargetLandingTime;

array[1..TotalAircrafts] of int: PenaltyTimeAfterTarget;
array[1..TotalAircrafts] of int: PenaltyTimeBeforeTarget;

array[1..TotalAircrafts, 1..TotalAircrafts] of int: SeparationTimeMatrix;


% -----------------------------
% 2) DECISION VARIABLES
% -----------------------------
% x[i] = actual landing time for aircraft i
% Must lie within [EarliestLandingTime[i], LatestLandingTime[i]].
array[1..TotalAircrafts] of var int: LandingTimes;


% -----------------------------
% 3) CONSTRAINTS
% -----------------------------

% (C1) Each aircraft i must land between its earliest and latest times.
constraint
  forall(i in 1..TotalAircrafts) (
    LandingTimes[i] >= EarliestLandingTime[i] /\ LandingTimes[i] <= LatestLandingTime[i]
  );

% (C2) Separation: for i < j, aircraft j lands after i by at least
%     SeparationTimeMatrix[i,j].
constraint
  forall(i, j in 1..TotalAircrafts where i < j) (
    LandingTimes[j] >= LandingTimes[i] + SeparationTimeMatrix[i,j]
  );


% -----------------------------
% 4) PENALTY CALCULATION
% -----------------------------
% Penalty[i] = cost if aircraft i lands before or after target time.
% We use a piecewise expression to handle "before" vs. "after" target.
array[1..TotalAircrafts] of var int: Penalty;

constraint
  forall(i in 1..TotalAircrafts) (
    Penalty[i] =
      if LandingTimes[i] <= TargetLandingTime[i] then
         PenaltyTimeBeforeTarget[i] * (TargetLandingTime[i] - LandingTimes[i])
      else
         PenaltyTimeAfterTarget[i] * (LandingTimes[i] - TargetLandingTime[i])
      endif
  );


% -----------------------------
% 5) OBJECTIVE FUNCTION
% -----------------------------

% Minimize the sum of penalties over all aircraft.
var int: TotalPenalty = sum(i in 1..TotalAircrafts) (Penalty[i]);
solve minimize TotalPenalty;


% -----------------------------
% 6) OUTPUT
% -----------------------------

% Print the landing schedule, penalties, and total penalty
output [
    "Optimal Aircraft Landing Schedule:\n",
    forall(i in 1..TotalAircrafts) (
        concat([
            "  Aircraft ", show(i), ": Lands at ", show(LandingTimes[i]),
            " (Penalty: ", show(Penalty[i]), ")\n"
        ])
    ),
    "Total Penalty: ", show(TotalPenalty), "\n"
];


Expected Output:
{
  "x": [
    155,
    195,
    205,
    215,
    223,
    233,
    242,
    250,
    258,
    267
  ],
  "penalty": [
    0,
    1575,
    1070,
    1417,
    1000,
    1960,
    2496,
    1320,
    1728,
    2349
  ],
  "_objective": 14915
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.