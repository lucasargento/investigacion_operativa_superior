You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 343
- Name: Find Missing Number in Concatenated Sequence
- Domain: Number Theory
- Objective: satisfaction

Problem Description:
Given a string with numbers from 1 to 250 concatenated in random order, but missing one number, the task is to find the missing number. The model assumes that we know the range of the numbers, i.e., that we know the maximum number of the original sequence. The model sometimes finds spurious solutions, especially if it's an ordered list. For ordered sequences, there are many solutions. However, for randomly ordered problems, it seems to be just a few solutions and all with the correct missing number.


Input Data (data.dzn):
n=250;
max_len=3;
digits_all=[1,2,3,4,5,6,7,8,9,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,2,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,0,5,1,5,2,5,3,5,4,5,5,5,6,5,7,5,8,5,9,6,0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,7,0,7,1,7,2,7,3,7,4,7,5,7,6,7,7,7,8,7,9,8,0,8,1,8,2,8,3,8,4,8,5,8,6,8,7,8,8,8,9,9,0,9,1,9,2,9,3,9,4,9,5,9,6,9,7,9,8,9,9,1,0,0,1,0,1,1,0,2,1,0,3,1,0,4,1,0,5,1,0,6,1,0,7,1,0,8,1,0,9,1,1,0,1,1,1,1,1,2,1,1,3,1,1,4,1,1,5,1,1,6,1,1,7,1,1,8,1,1,9,1,2,0,1,2,1,1,2,2,1,2,3,1,2,4,1,2,5,1,2,6,1,2,7,1,2,8,1,2,9,1,3,0,1,3,1,1,3,2,1,3,3,1,3,4,1,3,5,1,3,6,1,3,7,1,3,8,1,3,9,1,4,0,1,4,1,1,4,2,1,4,3,1,4,4,1,4,5,1,4,6,1,4,7,1,4,8,1,4,9,1,5,0,1,5,1,1,5,2,1,5,3,1,5,4,1,5,5,1,5,6,1,5,7,1,5,8,1,5,9,1,6,0,1,6,1,1,6,2,1,6,3,1,6,4,1,6,5,1,6,6,1,6,7,1,6,8,1,6,9,1,7,0,1,7,1,1,7,2,1,7,3,1,7,4,1,7,5,1,7,6,1,7,7,1,7,8,1,7,9,1,8,0,1,8,1,1,8,2,1,8,3,1,8,4,1,8,5,1,8,6,1,8,7,1,8,8,1,8,9,1,9,0,1,9,1,1,9,2,1,9,3,1,9,4,1,9,5,1,9,6,1,9,7,1,9,8,1,9,9,2,0,0,2,0,1,2,0,2,2,0,3,2,0,4,2,0,5,2,0,6,2,0,7,2,0,8,2,0,9,2,1,0,2,1,1,2,1,2,2,1,3,2,1,4,2,1,5,2,1,6,2,1,7,2,1,8,2,1,9,2,2,0,2,2,1,2,2,2,2,2,3,2,2,4,2,2,5,2,2,6,2,2,7,2,2,8,2,2,9,2,3,0,2,3,1,2,3,2,2,3,3,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,4,0,2,4,1,2,4,2,2,4,3,2,4,4,2,4,5,2,4,6,2,4,7,2,4,8,2,4,9,2,5,0];
num_digits_all=642;
% missing number: 78
% missing_numbers = [222,2,191,59,221,4,168,118,50,208,219,155,66,159,38,16,58,196,3,77,128,124,8,71,189,54,182,139,166,123,110,207,171,83,41,47,53,1,148,187,73,76,211,181,18,141,145,60,43,169,20,167,238,23,52,86,226,144,232,93,194,116,223,146,100,117,12,242,142,104,121,200,98,61,132,170,156,62,74,119,137,248,107,35,75,237,150,36,13,25,112,101,206,131,40,92,87,202,49,183,160,105,103,15,218,195,11,174,240,34,115,99,48,42,17,245,173,7,32,70,153,79,14,163,63,65,85,26,198,250,88,201,227,190,192,126,6,37,243,151,149,127,33,236,188,109,82,56,84,10,210,179,184,154,186,80,157,89,214,30,102,140,233,161,176,96,68,193,199,230,29,135,217,22,114,64,203,205,72,147,108,152,246,138,224,180,216,24,69,209,215,249,90,106,91,122,9,134,231,178,19,204,235,45,27,129,55,165,228,229,5,39,125,133,234,111,212,172,51,164,177,175,31,57,95,158,113,94,225,130,162,241,220,197,120,67,28,247,46,81,244,136,185,213,21,143,44,239,97]
digits_missing=[2,2,2,2,1,9,1,5,9,2,2,1,4,1,6,8,1,1,8,5,0,2,0,8,2,1,9,1,5,5,6,6,1,5,9,3,8,1,6,5,8,1,9,6,3,7,7,1,2,8,1,2,4,8,7,1,1,8,9,5,4,1,8,2,1,3,9,1,6,6,1,2,3,1,1,0,2,0,7,1,7,1,8,3,4,1,4,7,5,3,1,1,4,8,1,8,7,7,3,7,6,2,1,1,1,8,1,1,8,1,4,1,1,4,5,6,0,4,3,1,6,9,2,0,1,6,7,2,3,8,2,3,5,2,8,6,2,2,6,1,4,4,2,3,2,9,3,1,9,4,1,1,6,2,2,3,1,4,6,1,0,0,1,1,7,1,2,2,4,2,1,4,2,1,0,4,1,2,1,2,0,0,9,8,6,1,1,3,2,1,7,0,1,5,6,6,2,7,4,1,1,9,1,3,7,2,4,8,1,0,7,3,5,7,5,2,3,7,1,5,0,3,6,1,3,2,5,1,1,2,1,0,1,2,0,6,1,3,1,4,0,9,2,8,7,2,0,2,4,9,1,8,3,1,6,0,1,0,5,1,0,3,1,5,2,1,8,1,9,5,1,1,1,7,4,2,4,0,3,4,1,1,5,9,9,4,8,4,2,1,7,2,4,5,1,7,3,7,3,2,7,0,1,5,3,7,9,1,4,1,6,3,6,3,6,5,8,5,2,6,1,9,8,2,5,0,8,8,2,0,1,2,2,7,1,9,0,1,9,2,1,2,6,6,3,7,2,4,3,1,5,1,1,4,9,1,2,7,3,3,2,3,6,1,8,8,1,0,9,8,2,5,6,8,4,1,0,2,1,0,1,7,9,1,8,4,1,5,4,1,8,6,8,0,1,5,7,8,9,2,1,4,3,0,1,0,2,1,4,0,2,3,3,1,6,1,1,7,6,9,6,6,8,1,9,3,1,9,9,2,3,0,2,9,1,3,5,2,1,7,2,2,1,1,4,6,4,2,0,3,2,0,5,7,2,1,4,7,1,0,8,1,5,2,2,4,6,1,3,8,2,2,4,1,8,0,2,1,6,2,4,6,9,2,0,9,2,1,5,2,4,9,9,0,1,0,6,9,1,1,2,2,9,1,3,4,2,3,1,1,7,8,1,9,2,0,4,2,3,5,4,5,2,7,1,2,9,5,5,1,6,5,2,2,8,2,2,9,5,3,9,1,2,5,1,3,3,2,3,4,1,1,1,2,1,2,1,7,2,5,1,1,6,4,1,7,7,1,7,5,3,1,5,7,9,5,1,5,8,1,1,3,9,4,2,2,5,1,3,0,1,6,2,2,4,1,2,2,0,1,9,7,1,2,0,6,7,2,8,2,4,7,4,6,8,1,2,4,4,1,3,6,1,8,5,2,1,3,2,1,1,4,3,4,4,2,3,9,9,7];
num_digits_missing=640;
number_candidates=[{2,22,222},{22,222,2},{222,22,2,221},{222,22,221,2,21,219},{221,21,219,1,19,191},{219,19,191,9,91},{191,91,1,15,159},{15,159,5,59},{159,59,9,92},{92,2,22,221},{22,221,2,21,214},{221,21,214,1,14,141},{214,14,141,4,41},{141,41,1,16,168},{16,168,6,68},{168,68,8,81},{81,1,11,118},{11,118,1,18,185},{118,18,185,8,85},{185,85,5,50},{50,2,20,208},{2,20,208},{20,208,8,82},{208,8,82},{82,2,21,219},{21,219,1,19,191},{219,19,191,9,91},{191,91,1,15,155},{15,155,5,55},{155,55,5,56},{56,6,66},{66,6,61},{61,1,15,159},{15,159,5,59},{159,59,9,93},{93,3,38},{38,8,81},{81,1,16,165},{16,165,6,65},{165,65,5,58},{58,8,81},{81,1,19,196},{19,196,9,96},{196,96,6,63},{63,3,37},{37,7,77},{77,7,71},{71,1,12,128},{12,128,2,28},{128,28,8,81},{81,1,12,124},{12,124,2,24,248},{124,24,248,4,48},{248,48,8,87},{87,7,71},{71,1,11,118},{11,118,1,18,189},{118,18,189,8,89},{189,89,9,95},{95,5,54},{54,4,41},{41,1,18,182},{18,182,8,82},{182,82,2,21,213},{21,213,1,13,139},{213,13,139,3,39},{139,39,9,91},{91,1,16,166},{16,166,6,66},{166,66,6,61},{61,1,12,123},{12,123,2,23,231},{123,23,231,3,31},{231,31,1,11,110},{11,110,1,10,102},{110,10,102,2,20,207},{102,2,20,207},{20,207,7,71},{207,7,71},{71,1,17,171},{17,171,7,71},{171,71,1,18,183},{18,183,8,83},{183,83,3,34},{34,4,41},{41,1,14,147},{14,147,4,47},{147,47,7,75},{75,5,53},{53,3,31},{31,1,11,114},{11,114,1,14,148},{114,14,148,4,48},{148,48,8,81},{81,1,18,187},{18,187,8,87},{187,87,7,77},{77,7,73},{73,3,37},{37,7,76},{76,6,62},{62,2,21,211},{21,211,1,11,111},{211,11,111,1,118},{111,11,118,1,18,181},{118,18,181,8,81},{181,81,1,11,118},{11,118,1,18,181},{118,18,181,8,81},{181,81,1,14,141},{14,141,4,41},{141,41,1,11,114},{11,114,1,14,145},{114,14,145,4,45},{145,45,5,56},{56,6,60},{60,4,43},{4,43},{43,3,31},{31,1,16,169},{16,169,6,69},{169,69,9,92},{92,2,20,201},{20,201,1,16,167},{201,1,16,167},{16,167,6,67},{167,67,7,72},{72,2,23,238},{23,238,3,38},{238,38,8,82},{82,2,23,235},{23,235,3,35},{235,35,5,52},{52,2,28},{28,8,86},{86,6,62},{62,2,22,226},{22,226,2,26},{226,26,6,61},{61,1,14,144},{14,144,4,44},{144,44,4,42},{42,2,23,232},{23,232,3,32},{232,32,2,29},{29,9,93},{93,3,31},{31,1,19,194},{19,194,9,94},{194,94,4,41},{41,1,11,116},{11,116,1,16,162},{116,16,162,6,62},{162,62,2,22,223},{22,223,2,23,231},{223,23,231,3,31},{231,31,1,14,146},{14,146,4,46},{146,46,6,61},{61,1,10,100},{10,100,1,11},{100,1,11,117},{1,11,117},{11,117,1,17,171},{117,17,171,7,71},{171,71,1,12,122},{12,122,2,22,224},{122,22,224,2,24,242},{224,24,242,4,42},{242,42,2,21,214},{21,214,1,14,142},{214,14,142,4,42},{142,42,2,21,210},{21,210,1,10,104},{210,10,104,4,41},{104,4,41},{41,1,12,121},{12,121,2,21,212},{121,21,212,1,12,120},{212,12,120,2,20,200},{120,20,200,9,98},{200,9,98},{9,98},{98,8,86},{86,6,61},{61,1,11,113},{11,113,1,13,132},{113,13,132,3,32},{132,32,2,21,217},{21,217,1,17,170},{217,17,170,7,70},{170,70,1,15,156},{1,15,156},{15,156,5,56},{156,56,6,66},{66,6,62},{62,2,27},{27,7,74},{74,4,41},{41,1,11,119},{11,119,1,19,191},{119,19,191,9,91},{191,91,1,13,137},{13,137,3,37},{137,37,7,72},{72,2,24,248},{24,248,4,48},{248,48,8,81},{81,1,10,107},{10,107,7,73},{107,7,73},{73,3,35},{35,5,57},{57,7,75},{75,5,52},{52,2,23,237},{23,237,3,37},{237,37,7,71},{71,1,15,150},{15,150,5,50},{150,50,3,36},{3,36},{36,6,61},{61,1,13,132},{13,132,3,32},{132,32,2,25},{25,5,51},{51,1,11,112},{11,112,1,12,121},{112,12,121,2,21,210},{121,21,210,1,10,101},{210,10,101,1,12,120},{101,1,12,120},{12,120,2,20,206},{120,20,206,6,61},{206,6,61},{61,1,13,131},{13,131,3,31},{131,31,1,14,140},{14,140,4,40},{140,40,9,92},{9,92},{92,2,28},{28,8,87},{87,7,72},{72,2,20,202},{20,202,2,24,249},{202,2,24,249},{24,249,4,49},{249,49,9,91},{91,1,18,183},{18,183,8,83},{183,83,3,31},{31,1,16,160},{16,160,6,60},{160,60,1,10,105},{1,10,105},{10,105,5,51},{105,5,51},{51,1,10,103},{10,103,3,31},{103,3,31},{31,1,15,152},{15,152,5,52},{152,52,2,21,218},{21,218,1,18,181},{218,18,181,8,81},{181,81,1,19,195},{19,195,9,95},{195,95,5,51},{51,1,11,111},{11,111,1,117},{111,11,117,1,17,174},{117,17,174,7,74},{174,74,4,42},{42,2,24,240},{24,240,4,40},{240,40,3,34},{3,34},{34,4,41},{41,1,11,115},{11,115,1,15,159},{115,15,159,5,59},{159,59,9,99},{99,9,94},{94,4,48},{48,8,84},{84,4,42},{42,2,21,217},{21,217,1,17,172},{217,17,172,7,72},{172,72,2,24,245},{24,245,4,45},{245,45,5,51},{51,1,17,173},{17,173,7,73},{173,73,3,37},{37,7,73},{73,3,32},{32,2,27},{27,7,70},{70,1,15,153},{1,15,153},{15,153,5,53},{153,53,3,37},{37,7,79},{79,9,91},{91,1,14,141},{14,141,4,41},{141,41,1,16,163},{16,163,6,63},{163,63,3,36},{36,6,63},{63,3,36},{36,6,65},{65,5,58},{58,8,85},{85,5,52},{52,2,26},{26,6,61},{61,1,19,198},{19,198,9,98},{198,98,8,82},{82,2,25,250},{25,250,5,50},{250,50,8,88},{8,88},{88,8,82},{82,2,20,201},{20,201,1,12,122},{201,1,12,122},{12,122,2,22,227},{122,22,227,2,27},{227,27,7,71},{71,1,19,190},{19,190,9,90},{190,90,1,19,192},{1,19,192},{19,192,9,92},{192,92,2,21,212},{21,212,1,12,126},{212,12,126,2,26},{126,26,6,66},{66,6,63},{63,3,37},{37,7,72},{72,2,24,243},{24,243,4,43},{243,43,3,31},{31,1,15,151},{15,151,5,51},{151,51,1,11,114},{11,114,1,14,149},{114,14,149,4,49},{149,49,9,91},{91,1,12,127},{12,127,2,27},{127,27,7,73},{73,3,33},{33,3,32},{32,2,23,236},{23,236,3,36},{236,36,6,61},{61,1,18,188},{18,188,8,88},{188,88,8,81},{81,1,10,109},{10,109,9,98},{109,9,98},{98,8,82},{82,2,25},{25,5,56},{56,6,68},{68,8,84},{84,4,41},{41,1,10,102},{10,102,2,21,210},{102,2,21,210},{21,210,1,10,101},{210,10,101,1,17,179},{101,1,17,179},{17,179,7,79},{179,79,9,91},{91,1,18,184},{18,184,8,84},{184,84,4,41},{41,1,15,154},{15,154,5,54},{154,54,4,41},{41,1,18,186},{18,186,8,86},{186,86,6,68},{68,8,80},{80,1,15,157},{1,15,157},{15,157,5,57},{157,57,7,78},{78,8,89},{89,9,92},{92,2,21,214},{21,214,1,14,143},{214,14,143,4,43},{143,43,3,30},{30,1,10,102},{1,10,102},{10,102,2,21,214},{102,2,21,214},{21,214,1,14,140},{214,14,140,4,40},{140,40,2,23,233},{2,23,233},{23,233,3,33},{233,33,3,31},{31,1,16,161},{16,161,6,61},{161,61,1,11,117},{11,117,1,17,176},{117,17,176,7,76},{176,76,6,69},{69,9,96},{96,6,66},{66,6,68},{68,8,81},{81,1,19,193},{19,193,9,93},{193,93,3,31},{31,1,19,199},{19,199,9,99},{199,99,9,92},{92,2,23,230},{23,230,3,30},{230,30,2,29},{2,29},{29,9,91},{91,1,13,135},{13,135,3,35},{135,35,5,52},{52,2,21,217},{21,217,1,17,172},{217,17,172,7,72},{172,72,2,22,221},{22,221,2,21,211},{221,21,211,1,11,114},{211,11,114,1,14,146},{114,14,146,4,46},{146,46,6,64},{64,4,42},{42,2,20,203},{20,203,3,32},{203,3,32},{32,2,20,205},{20,205,5,57},{205,5,57},{57,7,72},{72,2,21,214},{21,214,1,14,147},{214,14,147,4,47},{147,47,7,71},{71,1,10,108},{10,108,8,81},{108,8,81},{81,1,15,152},{15,152,5,52},{152,52,2,22,224},{22,224,2,24,246},{224,24,246,4,46},{246,46,6,61},{61,1,13,138},{13,138,3,38},{138,38,8,82},{82,2,22,224},{22,224,2,24,241},{224,24,241,4,41},{241,41,1,18,180},{18,180,8,80},{180,80,2,21,216},{2,21,216},{21,216,1,16,162},{216,16,162,6,62},{162,62,2,24,246},{24,246,4,46},{246,46,6,69},{69,9,92},{92,2,20,209},{20,209,9,92},{209,9,92},{92,2,21,215},{21,215,1,15,152},{215,15,152,5,52},{152,52,2,24,249},{24,249,4,49},{249,49,9,99},{99,9,90},{90,1,10,106},{1,10,106},{10,106,6,69},{106,6,69},{69,9,91},{91,1,11,112},{11,112,1,12,122},{112,12,122,2,22,229},{122,22,229,2,29},{229,29,9,91},{91,1,13,134},{13,134,3,34},{134,34,4,42},{42,2,23,231},{23,231,3,31},{231,31,1,11,117},{11,117,1,17,178},{117,17,178,7,78},{178,78,8,81},{81,1,19,192},{19,192,9,92},{192,92,2,20,204},{20,204,4,42},{204,4,42},{42,2,23,235},{23,235,3,35},{235,35,5,54},{54,4,45},{45,5,52},{52,2,27},{27,7,71},{71,1,12,129},{12,129,2,29},{129,29,9,95},{95,5,55},{55,5,51},{51,1,16,165},{16,165,6,65},{165,65,5,52},{52,2,22,228},{22,228,2,28},{228,28,8,82},{82,2,22,229},{22,229,2,29},{229,29,9,95},{95,5,53},{53,3,39},{39,9,91},{91,1,12,125},{12,125,2,25},{125,25,5,51},{51,1,13,133},{13,133,3,33},{133,33,3,32},{32,2,23,234},{23,234,3,34},{234,34,4,41},{41,1,11,111},{11,111,1,112},{111,11,112,1,12,121},{112,12,121,2,21,212},{121,21,212,1,12},{212,12,121,2,21,217},{121,21,217,1,17,172},{217,17,172,7,72},{172,72,2,25},{25,5,51},{51,1,11,116},{11,116,1,16,164},{116,16,164,6,64},{164,64,4,41},{41,1,17,177},{17,177,7,77},{177,77,7,71},{71,1,17,175},{17,175,7,75},{175,75,5,53},{53,3,31},{31,1,15,157},{15,157,5,57},{157,57,7,79},{79,9,95},{95,5,51},{51,1,15,158},{15,158,5,58},{158,58,8,81},{81,1,11,113},{11,113,1,13,139},{113,13,139,3,39},{139,39,9,94},{94,4,42},{42,2,22,225},{22,225,2,25},{225,25,5,51},{51,1,13,130},{13,130,3,30},{130,30,1,16,162},{1,16,162},{16,162,6,62},{162,62,2,22,224},{22,224,2,24,241},{224,24,241,4,41},{241,41,1,12,122},{12,122,2,22,220},{122,22,220,2,20,201},{220,20,201,1,19,197},{201,1,19,197},{19,197,9,97},{197,97,7,71},{71,1,12,120},{12,120,2,20,206},{120,20,206,6,67},{206,6,67},{67,7,72},{72,2,28},{28,8,82},{82,2,24,247},{24,247,4,47},{247,47,7,74},{74,4,46},{46,6,68},{68,8,81},{81,1,12,124},{12,124,2,24,244},{124,24,244,4,44},{244,44,4,41},{41,1,13,136},{13,136,3,36},{136,36,6,61},{61,1,18,185},{18,185,8,85},{185,85,5,52},{52,2,21,213},{21,213,1,13,132},{213,13,132,3,32},{132,32,2,21,211},{21,211,1,11,114},{211,11,114,1,14,143},{114,14,143,4,43},{143,43,3,34},{34,4,44},{44,4,42},{42,2,23,239},{23,239,3,39},{239,39,9,99},{99,9,97},{97,7}];
% Save as find_missing_number2_250_78.dzn

MiniZinc Model:
include "globals.mzn"; 

int: n;
int: num_digits_all;
int: num_digits_missing;
int: max_len; % max length of a number

% ordered list of all digits of the concatenated numbers 1..n.
array[1..num_digits_all] of int: digits_all; 
int: sum_all = sum(digits_all);

% (random) list of concatenated numbers 1..n where one number is missing
array[1..num_digits_missing] of int: digits_missing; 

int: sum_missing = sum(digits_missing);

% digit sum of the missing number
int: diff_digit_sum = sum_all - sum_missing;
% length of the missing number
int: diff_len = num_digits_all - num_digits_missing;

% the digits in the missing number
array[0..9] of int: digit_occurrence_all = array1d(0..9, [sum([digits_all[i] = d | i in 1..num_digits_all]) | d in 0..9]);
array[0..9] of int: digit_occurrence_missing = array1d(0..9, [sum([digits_missing[i] = d | i in 1..num_digits_missing]) | d in 0..9]);
set of int: digits_in_missing_number = { d | d in 0..9 where digit_occurrence_all[d] - digit_occurrence_missing[d] > 0};

% number candidates in each digit position
array[1..num_digits_missing] of set of int: number_candidates;

% The domain of the missing number
set of int: missing_domain = { i | i in 1..n where digit_sum(i) = diff_digit_sum /\ digit_length(i) == diff_len };

%
% decision variables
%

% number assigned to each position, where a m-length number get m places
% in the list
array[1..num_digits_all] of var 1..n: x;

% start positions of each number
array[1..n] of var 1..num_digits_all: start_pos;

% var 1..n: missing;
var missing_domain: missing;

% missing number as an array
% array[1..max_len] of var 0..9: missing_a;
% have add 0 since the number array might have leading 0's
array[1..max_len] of var digits_in_missing_number union {0} : missing_a;

%
% functions
%
% the length of a number. Note that we have to use m+1 in the parameter to log10/1
function int: digit_length(int: m) = 
   ceil(log10(m+1))
;

% the digits of a number
function array[int] of int: digits(int: m) =
     let {
       int: len = digit_length(m);
       array[1..len] of int: a = [(m mod pow(10,len-i+1)) div pow(10,len-i) | i in 1..len ];
     } in 
     a
;

% digit sum of a number (not reduced!)
function int: digit_sum(int: m) =
     let {
       int: len = digit_length(m);
       int: ds = m - sum([9*(m div pow(10,len-i+1)) | i in 1..len])
     } in 
     ds
;

% alternative variant
function int: digit_sum1(int: m) =
   sum(digits(m))
;


% convert a number <-> array.
% Note: There might be leading zeros in the array.
%
% n = to_num_base(a, base)
function var int: to_num_base(array[int] of var int: a, int: base) =
          let { int: len = card(index_set(a));
                var int: n = sum(i in index_set(a)) (
                   pow(base, len-i) * a[i] 
                 );
         } in n
;

% n = to_num(a) ( base 10)
function var int: to_num(array[int] of var int: a) = to_num_base(a, 10);


solve satisfy;
% solve :: int_search(x, first_fail, indomain_split, complete) satisfy;

constraint
 % just to show the complexity of the problem 
 trace("missing_domain: \(missing_domain)\n") /\
 trace("digits_in_missing_number: \(digits_in_missing_number)\n") /\
 % trace("number_candidates: \(number_candidates)\n") /\

 % reduce domains of the number candidate for each digit position
 forall(i in 1..num_digits_missing) (
   % trace("i:\(i) d:\(digits_missing[i]) candidates: \(number_candidates[i])\n" ) /\
   x[i] in number_candidates[i]
 )
 /\

 % digit sum of the missing number:
 %   difference between sum of all digits of numbers 1..n and the digit sum of missing digits
 missing = to_num(missing_a)
 /\
 diff_digit_sum = sum(missing_a)
 /\ % start positions are distinct
 all_different(start_pos)
 /\
 % loop through all the number 1..n and see if there is a place where they can fit.
 % For the missing number we don't try to find any place to fit, but place it last in 
 % the x array
 forall(i in 1..n) ( 
     let {
        int: len = digit_length(i);
        array[int] of 0..9: s = digits(i);
        var 1..num_digits_all: p;
     } in
     if missing != i then
        % Not the missing number: Check for its place
        forall(j in 0..len-1) (
           digits_missing[p+j] = s[j+1] 
           /\
           x[p+j] = i 
           /\
           start_pos[i] = p
        )
     else
       % The missing number. Check for proper digit sum and length
       digit_sum(i) = diff_digit_sum
       /\
       len = diff_len
       /\
       forall(j in 0..len-1) (
           x[p+j] = i 
           /\
           start_pos[i] = p
       )
     endif
  )  
  % special care for the missing number
  /\ % place it last in the solution array and the position array
  forall(i in num_digits_missing+1..num_digits_all) (
     x[i] = missing 
  )
  /\
  start_pos[missing] = num_digits_missing+1
;

constraint
  forall(i in 1..n) (
     count(x,i,digit_length(i))
  )
;

output [
  "missing_domain: \(missing_domain)\n",
  "missing: \(missing)\n",
  % "digits_missing: \(digits_missing)\n",
  % "x: \(x)\n",
  % "start_pos: \(start_pos)\n",
]
++
[ "solution:\n" ]
++
[
  if fix(x[i]) != fix(x[i+1]) then 
    show(x[i]) ++ ","
  else 
    ""
  endif ++
  if i = num_digits_all then
    " (," ++ show(missing) ++ ")"
  else "" endif
  | i in 1..num_digits_all
]
;

%
% data
%

% % 1..50
% n = 50;
% max_len = 2;
% num_digits_all = 91;
% digits_all = [1,2,3,4,5,6,7,8,9,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,2,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,0];
% num_digits_missing = 89;

% digits_missing = [1,2,4,2,5,1,6,9,1,8,3,4,4,7,1,1,3,1,1,2,1,5,4,5,4,2,1,9,7,4,4,1,3,2,1,3,0,5,1,4,1,0,4,8,5,0,4,9,2,9,4,1,4,6,4,0,3,3,2,8,2,0,3,6,3,7,3,2,6,2,7,3,5,1,7,4,3,8,3,2,3,9,2,3,6,2,2,2,4]; % missing number is 38

% ordered sequence
% num_digits_missing = 89;

% Strange cases:
%   12: 11 sols of 12, 8 sols of 21. Though for missing=21 there are 21 solutions with just 21.
%   
% digits_missing = [1,2,3,4,5,6,7,8,9,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,2,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,5,0]; % 49 missing (21 solutions)
% digits_missing = [1,2,3,4,5,6,7,8,9,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,2,0,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,0]; % 21 missing (21 solutions)
% digits_missing = [1,2,3,4,5,6,7,8,9,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,0]; % 20 missing, 21 solutions

% digits_missing = [1,2,3,4,5,6,7,8,9,1,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,2,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,0]; % 19 missing (21 solutions)
% digits_missing = [1,2,3,4,5,6,7,8,9,1,0,1,1,1,3,1,4,1,5,1,6,1,7,1,8,1,9,2,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,3,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,9,4,0,4,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,5,0]; % 12 missing (sols 12 and 21)

Expected Output:
{
  "x": [
    222,
    222,
    222,
    2,
    191,
    191,
    191,
    59,
    59,
    221,
    221,
    221,
    4,
    168,
    168,
    168,
    118,
    118,
    118,
    50,
    50,
    208,
    208,
    208,
    219,
    219,
    219,
    155,
    155,
    155,
    66,
    66,
    159,
    159,
    159,
    38,
    38,
    16,
    16,
    58,
    58,
    196,
    196,
    196,
    3,
    77,
    77,
    128,
    128,
    128,
    124,
    124,
    124,
    8,
    71,
    71,
    189,
    189,
    189,
    54,
    54,
    182,
    182,
    182,
    139,
    139,
    139,
    166,
    166,
    166,
    123,
    123,
    123,
    110,
    110,
    110,
    207,
    207,
    207,
    171,
    171,
    171,
    83,
    83,
    41,
    41,
    47,
    47,
    53,
    53,
    1,
    148,
    148,
    148,
    187,
    187,
    187,
    73,
    73,
    76,
    76,
    211,
    211,
    211,
    181,
    181,
    181,
    18,
    18,
    141,
    141,
    141,
    145,
    145,
    145,
    60,
    60,
    43,
    43,
    169,
    169,
    169,
    20,
    20,
    167,
    167,
    167,
    238,
    238,
    238,
    23,
    23,
    52,
    52,
    86,
    86,
    226,
    226,
    226,
    144,
    144,
    144,
    232,
    232,
    232,
    93,
    93,
    194,
    194,
    194,
    116,
    116,
    116,
    223,
    223,
    223,
    146,
    146,
    146,
    100,
    100,
    100,
    117,
    117,
    117,
    12,
    12,
    242,
    242,
    242,
    142,
    142,
    142,
    104,
    104,
    104,
    121,
    121,
    121,
    200,
    200,
    200,
    98,
    98,
    61,
    61,
    132,
    132,
    132,
    170,
    170,
    170,
    156,
    156,
    156,
    62,
    62,
    74,
    74,
    119,
    119,
    119,
    137,
    137,
    137,
    248,
    248,
    248,
    107,
    107,
    107,
    35,
    35,
    75,
    75,
    237,
    237,
    237,
    150,
    150,
    150,
    36,
    36,
    13,
    13,
    25,
    25,
    112,
    112,
    112,
    101,
    101,
    101,
    206,
    206,
    206,
    131,
    131,
    131,
    40,
    40,
    92,
    92,
    87,
    87,
    202,
    202,
    202,
    49,
    49,
    183,
    183,
    183,
    160,
    160,
    160,
    105,
    105,
    105,
    103,
    103,
    103,
    15,
    15,
    218,
    218,
    218,
    195,
    195,
    195,
    11,
    11,
    174,
    174,
    174,
    240,
    240,
    240,
    34,
    34,
    115,
    115,
    115,
    99,
    99,
    48,
    48,
    42,
    42,
    17,
    17,
    245,
    245,
    245,
    173,
    173,
    173,
    7,
    32,
    32,
    70,
    70,
    153,
    153,
    153,
    79,
    79,
    14,
    14,
    163,
    163,
    163,
    63,
    63,
    65,
    65,
    85,
    85,
    26,
    26,
    198,
    198,
    198,
    250,
    250,
    250,
    88,
    88,
    201,
    201,
    201,
    227,
    227,
    227,
    190,
    190,
    190,
    192,
    192,
    192,
    126,
    126,
    126,
    6,
    37,
    37,
    243,
    243,
    243,
    151,
    151,
    151,
    149,
    149,
    149,
    127,
    127,
    127,
    33,
    33,
    236,
    236,
    236,
    188,
    188,
    188,
    109,
    109,
    109,
    82,
    82,
    56,
    56,
    84,
    84,
    10,
    10,
    210,
    210,
    210,
    179,
    179,
    179,
    184,
    184,
    184,
    154,
    154,
    154,
    186,
    186,
    186,
    80,
    80,
    157,
    157,
    157,
    89,
    89,
    214,
    214,
    214,
    30,
    30,
    102,
    102,
    102,
    140,
    140,
    140,
    233,
    233,
    233,
    161,
    161,
    161,
    176,
    176,
    176,
    96,
    96,
    68,
    68,
    193,
    193,
    193,
    199,
    199,
    199,
    230,
    230,
    230,
    29,
    29,
    135,
    135,
    135,
    217,
    217,
    217,
    22,
    22,
    114,
    114,
    114,
    64,
    64,
    203,
    203,
    203,
    205,
    205,
    205,
    72,
    72,
    147,
    147,
    147,
    108,
    108,
    108,
    152,
    152,
    152,
    246,
    246,
    246,
    138,
    138,
    138,
    224,
    224,
    224,
    180,
    180,
    180,
    216,
    216,
    216,
    24,
    24,
    69,
    69,
    209,
    209,
    209,
    215,
    215,
    215,
    249,
    249,
    249,
    90,
    90,
    106,
    106,
    106,
    91,
    91,
    122,
    122,
    122,
    9,
    134,
    134,
    134,
    231,
    231,
    231,
    178,
    178,
    178,
    19,
    19,
    204,
    204,
    204,
    235,
    235,
    235,
    45,
    45,
    27,
    27,
    129,
    129,
    129,
    55,
    55,
    165,
    165,
    165,
    228,
    228,
    228,
    229,
    229,
    229,
    5,
    39,
    39,
    125,
    125,
    125,
    133,
    133,
    133,
    234,
    234,
    234,
    111,
    111,
    111,
    212,
    212,
    212,
    172,
    172,
    172,
    51,
    51,
    164,
    164,
    164,
    177,
    177,
    177,
    175,
    175,
    175,
    31,
    31,
    57,
    57,
    95,
    95,
    158,
    158,
    158,
    113,
    113,
    113,
    94,
    94,
    225,
    225,
    225,
    130,
    130,
    130,
    162,
    162,
    162,
    241,
    241,
    241,
    220,
    220,
    220,
    197,
    197,
    197,
    120,
    120,
    120,
    67,
    67,
    28,
    28,
    247,
    247,
    247,
    46,
    46,
    81,
    81,
    244,
    244,
    244,
    136,
    136,
    136,
    185,
    185,
    185,
    213,
    213,
    213,
    21,
    21,
    143,
    143,
    143,
    44,
    44,
    239,
    239,
    239,
    97,
    97,
    78,
    78
  ],
  "start_pos": [
    91,
    4,
    45,
    13,
    539,
    344,
    298,
    54,
    503,
    376,
    271,
    166,
    224,
    308,
    263,
    38,
    290,
    108,
    513,
    123,
    629,
    441,
    131,
    480,
    226,
    319,
    523,
    608,
    433,
    403,
    571,
    299,
    359,
    279,
    212,
    222,
    345,
    36,
    540,
    240,
    85,
    288,
    118,
    634,
    521,
    613,
    87,
    286,
    249,
    20,
    560,
    133,
    89,
    60,
    528,
    372,
    573,
    40,
    8,
    116,
    185,
    196,
    313,
    446,
    315,
    31,
    606,
    422,
    482,
    301,
    55,
    454,
    98,
    198,
    214,
    100,
    46,
    641,
    306,
    393,
    615,
    370,
    83,
    374,
    317,
    135,
    244,
    327,
    398,
    493,
    498,
    242,
    146,
    583,
    575,
    420,
    639,
    183,
    284,
    160,
    231,
    405,
    260,
    174,
    257,
    495,
    209,
    459,
    367,
    74,
    551,
    228,
    580,
    443,
    281,
    151,
    163,
    17,
    200,
    603,
    177,
    500,
    71,
    51,
    542,
    341,
    356,
    48,
    525,
    588,
    237,
    187,
    545,
    504,
    435,
    620,
    203,
    468,
    65,
    408,
    110,
    171,
    631,
    140,
    113,
    157,
    456,
    92,
    353,
    219,
    350,
    462,
    303,
    387,
    28,
    193,
    395,
    577,
    33,
    254,
    414,
    591,
    310,
    562,
    530,
    68,
    125,
    14,
    120,
    190,
    80,
    557,
    295,
    273,
    568,
    417,
    565,
    510,
    381,
    474,
    105,
    62,
    251,
    384,
    623,
    390,
    95,
    364,
    57,
    335,
    5,
    338,
    424,
    148,
    268,
    42,
    600,
    321,
    427,
    180,
    329,
    246,
    448,
    515,
    451,
    234,
    77,
    22,
    484,
    378,
    102,
    554,
    626,
    400,
    487,
    477,
    438,
    265,
    25,
    597,
    10,
    1,
    154,
    471,
    585,
    137,
    332,
    533,
    536,
    430,
    507,
    143,
    411,
    548,
    518,
    361,
    216,
    128,
    636,
    276,
    594,
    168,
    347,
    617,
    292,
    465,
    610,
    206,
    490,
    324
  ],
  "missing": 78,
  "missing_a": [
    0,
    7,
    8
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.