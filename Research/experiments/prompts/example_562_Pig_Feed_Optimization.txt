You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 562
- Name: Pig Feed Optimization
- Domain: Agriculture
- Objective: minimization

Problem Description:
A farmer is raising pigs for market and wishes to determine the quantities of the available types of feed (corn, tankage, and alfalfa) that should be given to each pig. The objective is to determine which mix will meet certain nutritional requirements at a minimum cost. The number of units of each type of basic nutritional ingredient contained within 1 kilogram of each feed type is given, along with the daily nutritional requirements and feed costs. The problem is to formulate an integer program for this problem with the following constraints: 1) The farmer wants to have at most 2 feed types in the mix. 2) The farmer thinks that satisfying all the nutritional requirements costs him too much. He wants to keep only two of the three requirements. The model should minimize the cost while satisfying only two (any two) of the three nutritional requirements.


MiniZinc Model:
int: num_ingredients = 3;
int: num_feeds       = 3;
array[1..num_ingredients, 1..num_feeds] of int: ingredients_per_feed = 
      array2d(1..num_ingredients, 1..num_feeds, [90, 20, 40,
                                                 30, 80, 60,
                                                 10, 20, 60]);
array[1..num_feeds] of int: feed_cost = [84,72,60]; % in cents
array[1..num_ingredients] of int: min_daily_requirements = [200, 180,150];

% mix of feeds
array[1..num_feeds] of var 0..100: mix;
% total cost
var 0..1000: tot_cost;
% which daily requirements are met?
array[1..num_ingredients] of var 0..1: daily_req_met;

solve minimize tot_cost;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
    % daily requirements
    forall(i in 1..num_ingredients) (
      % hard constraint version
      % sum(j in 1..num_feeds) (mix[j]*ingredients_per_feed[i,j]) >= min_daily_requirements[i]

      % soft constraint version according to requirement 3.
      (sum(j in 1..num_feeds) (mix[j]*ingredients_per_feed[i,j]) >= min_daily_requirements[i]) <-> (daily_req_met[i] = 1)
    )
    /\
    tot_cost = sum(j in 1..num_feeds) ( mix[j]*feed_cost[j])
    
    %  2. Suppose the farmer wants to have at most 2 feed types in the mix. 
    %     Modify the model of part (a) to take the new restriction into account.
    /\ sum(j in 1..num_feeds) (bool2int(mix[j] > 0)) <= 2

    %  3. The farmer thinks that satisfying all the nutritional requirements costs him 
    %     too much. He wants to keep only two of the three requirements. Modify the model 
    %     of part (a) to minimize the cost while satisfying only two (any two) of the 
    %     three nutritional requirements.
    /\ sum(daily_req_met) = 2
;


output
[
  "mix: " ++ show(mix) ++ "\n" ++
  "tot_cost: " ++ show(tot_cost) ++ "\n" ++
  "daily_req_met: " ++ show(daily_req_met) ++ "\n"
 
];

Expected Output:
{
  "mix": [
    0,
    0,
    3
  ],
  "tot_cost": 180,
  "daily_req_met": [
    0,
    1,
    1
  ],
  "_objective": 180
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.