You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 126
- Name: Langford's Number Problem
- Domain: Combinatorial Mathematics
- Objective: satisfaction

Problem Description:
---
Title:    Langford's number problem
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


Consider two sets of the numbers from 1 to 4. The problem is to arrange  the eight numbers in the two sets into a single sequence in which the two 1's appear one number apart, the two 2's appear two numbers apart, the two 3's appear three numbers apart, and the two 4's appear four numbers apart.

The problem generalizes to the L($k$,$n$) problem, which is to arrange
$k$ sets of numbers 1 to $n$, so that each appearance of the number
$m$ is $m$ numbers on from the last. For example, the L(3,9) problem
is to arrange 3 sets of the numbers 1 to 9 so that the first two 1's
and the second two 1's appear one number apart, the first two 2's and
the second two 2's appear two numbers apart, etc.

A graphical representation of L(2,4), with black=1, red=2, blue=3 and
yellow=4 is given below.

![](assets/langford.gif)


MiniZinc Model:
include "globals.mzn";

int: k;
set of int: positionDomain = 1..2*k;

array[positionDomain] of var positionDomain: position;
% better presentation:
array[positionDomain] of var 1..k: solution;

solve :: int_search(position, first_fail, indomain_min, complete) satisfy;

constraint
  forall(i in 1..k) (
     position[i+k] = position[i] + i+1 /\
     % hakank: added this
     solution[position[i]] = i /\ 
     solution[position[k+i]] = i
  )
  /\   
  all_different(position)
  /\ % symmetry breaking
  solution[1] < solution[2*k]
;


output [
  show(solution), "\n"

];

%
% data
%
k = 4;
% k = 7;
% k = 8;
% k = 10;
% k = 20;

Expected Output:
{
  "position": [
    5,
    1,
    2,
    3,
    7,
    4,
    6,
    8
  ],
  "solution": [
    2,
    3,
    4,
    2,
    1,
    3,
    1,
    4
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.