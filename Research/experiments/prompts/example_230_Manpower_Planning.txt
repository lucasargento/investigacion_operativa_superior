You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 230
- Name: Manpower Planning
- Domain: Human Resources
- Objective: minimization

Problem Description:
The companyâ€™s declared objective is to minimize costs. It has K categories of requirements, with each category consisting of I different requirements. The strength of each requirement category is denoted by Strength, whereas the cost reductions per unit less waste in each category and the additional costs per unit more waste in each category are represented by LessOneWaste and MoreOneWaste, respectively. The number of recruits in each category is given by Recruit, and the cost of redundancy per recruit in each category is CostRedundancy. The company can allow NumOverman over-managed categories, with each over-managed category incurring a cost of CostOverman. Similarly, NumShortwork short-work categories are permissible, each one resulting in a cost of CostShort. How should they operate in order to minimize these costs?


Input Data (data.dzn):
**Output Data:**

```
requirement = [| 1000, 1400, 1000
              | 500, 2000, 1500
              | 0, 2500, 2000 |];
strength = [2000, 1500, 1000];
lessonewaste = [0.25, 0.2, 0.1];
moreonewaste = [0.1, 0.05, 0.05];
recruit = [500, 800, 500];
costredundancy = [200, 500, 500];
num_overman = 150;
costoverman = [1500, 2000, 3000];
num_shortwork = 50;
costshort = [500, 400, 400];
```

MiniZinc Model:
% Define parameters
int: K; % Number of categories
int: I; % Number of years
array[1..K, 1..I] of int: requirement; % Manpower requirements
array[1..K] of int: strength; % Current strength of manpower
array[1..K] of float: lessonewaste; % Wastage rates of manpower with less than one year's service
array[1..K] of float: moreonewaste; % Wastage rates of manpower with more than one year's service
array[1..K] of int: recruit; % Number of workers that can be recruited
array[1..K] of int: costredundancy; % Redundancy payment
int: num_overman; % Maximum number of overmanned workers
array[1..K] of int: costoverman; % Extra cost per overmanned worker
int: num_shortwork; % Maximum number of short-time workers
array[1..K] of int: costshort; % Cost per short-time worker

% Define decision variables
array[1..K, 1..I] of var 0..recruit[1..K]: Recruit; % Number of recruits
array[1..K, 1..I] of var 0..num_overman: Overman; % Number of overmanned workers
array[1..K, 1..I] of var 0..num_shortwork: Short; % Number of short-time workers

% Define constraints
constraint forall(k in 1..K, i in 1..I) (
  if i = 1 then
    strength[k] + Recruit[k,i] - Overman[k,i] - Short[k,i] = requirement[k,i]
  else
    strength[k] + sum(j in 1..i)(Recruit[k,j]*(1 - lessonewaste[k])) - Overman[k,i] - Short[k,i] = requirement[k,i]
  endif
);

% Define objective function
var int: total_cost = sum(k in 1..K, i in 1..I) (
  costredundancy[k]*Recruit[k,i] + costoverman[k]*Overman[k,i] + costshort[k]*Short[k,i]
);

% Minimize total cost
solve minimize total_cost;

% Output
output [ "recruit: " ++ show(Recruit) ++ "\n" ++
         "overmanning: " ++ show(Overman) ++ "\n" ++
         "short: " ++ show(Short) ++ "\n" ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.