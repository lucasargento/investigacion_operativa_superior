You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 447
- Name: Car Selection Problem
- Domain: Transportation
- Objective: maximization

Problem Description:
The Car Selection Problem is a mixed integer programming model that aims to assign ParticipantNum participants to CarNum cars in a way that maximizes the total number of assignments. Each participant is interested in a subset of cars, represented by InterestMatrix_{p,c}, where p and c index participants and cars, respectively. The objective is to find the optimal assignment of participants to cars that satisfies certain constraints.


Input Data (data.dzn):
ParticipantNum = 25;
CarNum = 25;
InterestMatrix = array2d(1..ParticipantNum, 1..CarNum, [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1]);

MiniZinc Model:
% Parameters
int: ParticipantNum;
int: CarNum;
array[1..ParticipantNum, 1..CarNum] of 0..1: InterestMatrix;

% Decision Variables
% AssignMatrix[p,c] is 1 if participant p is assigned to car c, 0 otherwise
array[1..ParticipantNum, 1..CarNum] of var 0..1: AssignMatrix;

% Objective
% Maximize the total number of assignments
var int: total_assignments = sum(p in 1..ParticipantNum, c in 1..CarNum) (AssignMatrix[p,c]);
maximize total_assignments;

% Constraints
% Each participant can be assigned to at most one car
constraint forall(p in 1..ParticipantNum) (sum(c in 1..CarNum) (AssignMatrix[p,c]) <= 1);

% Each car can be assigned to at most one participant
constraint forall(c in 1..CarNum) (sum(p in 1..ParticipantNum) (AssignMatrix[p,c]) <= 1);

% A participant can only be assigned to a car if they are interested in it
constraint forall(p in 1..ParticipantNum, c in 1..CarNum) (AssignMatrix[p,c] <= InterestMatrix[p,c]);

% A car can only be assigned to a participant if they are interested in it
constraint forall(p in 1..ParticipantNum, c in 1..CarNum) (AssignMatrix[p,c] >= InterestMatrix[p,c]);

% Solve
solve satisfy;

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.