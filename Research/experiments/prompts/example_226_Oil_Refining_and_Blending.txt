You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 226
- Name: Oil Refining and Blending
- Domain: Manufacturing
- Objective: maximization

Problem Description:
LP or MILP

What buying, storing and manufacturing policy should the company pursue in order to maximize profit?

{
    "buy_price": [[BuyPrice for i in 1,...,I] for m in 1,...,M],
    "sell_price": SellPrice,
    "is_vegetable": [IsVegetable for i in 1,...,I],
    "max_vegetable_refining_per_month": MaxVegRefiningPerMonth,
    "max_non_vegetable_refining_per_month": MaxNonVegRefiningPerMonth,
    "storage_size": StorageSize,
    "storage_cost": StorageCost,
    "max_hardness": MaxHardness,
    "min_hardness": MinHardness,
    "hardness": [Hardness for i in 1,...,I],
    "init_amount": InitialAmount,
    "min_usage": MinUsage,
    "dependencies": [Dependencies for i in 1,...,I]
}


Input Data (data.dzn):
buy_price = [|110, 120, 130, 110, 115|130, 130, 110, 90, 115|110, 140, 130, 100, 95|120, 110, 120, 120, 125|100, 120, 150, 110, 105|90, 100, 140, 80, 135|];
sell_price = 150;
is_vegetable = [true, true, false, false, false];
max_vegetable_refining_per_month = 200;
max_non_vegetable_refining_per_month = 250;
storage_size = 1000;
storage_cost = 5;
min_hardness = 3;
max_hardness = 6;
hardness = [8.8, 6.1, 2.0, 4.2, 5.0];
init_amount = 500;
min_usage = 20;
dependencies = [|0, 0, 0, 0, 1|0, 0, 0, 0, 1|0, 0, 0, 0, 0|0, 0, 0, 0, 0|0, 0, 0, 0, 0|];

MiniZinc Model:
% Parameters
int: M; % Number of months
int: I; % Number of oils
array[1..M, 1..I] of int: buy_price; % Buying price of each oil in each month
int: sell_price; % Selling price of the final product
array[1..I] of bool: is_vegetable; % Whether each oil is vegetable or not
int: max_vegetable_refining_per_month; % Maximum vegetable oil refining capacity per month
int: max_non_vegetable_refining_per_month; % Maximum non-vegetable oil refining capacity per month
int: storage_size; % Maximum storage capacity for each oil
int: storage_cost; % Storage cost per ton per month
int: min_hardness; % Minimum hardness of the final product
int: max_hardness; % Maximum hardness of the final product
array[1..I] of float: hardness; % Hardness of each oil
int: init_amount; % Initial amount of each oil in storage
int: min_usage; % Minimum usage of each oil if it is used
array[1..I, 1..I] of bool: dependencies; % Dependency matrix of oils

% Decision Variables
array[1..M, 1..I] of var 0..storage_size: buy; % Amount of each oil to buy in each month
array[1..M, 1..I] of var 0..storage_size: refine; % Amount of each oil to refine in each month
array[1..M, 1..I] of var 0..storage_size: storage; % Amount of each oil in storage in each month

% Constraints
constraint forall(m in 1..M)(
  sum(i in 1..I)(refine[m, i]) <= sell_price % Total refined oil should not exceed selling price
);

constraint forall(m in 1..M)(
  sum(i in 1..I where is_vegetable[i])(refine[m, i]) <= max_vegetable_refining_per_month % Vegetable oil refining capacity
);

constraint forall(m in 1..M)(
  sum(i in 1..I where not is_vegetable[i])(refine[m, i]) <= max_non_vegetable_refining_per_month % Non-vegetable oil refining capacity
);

constraint forall(m in 1..M, i in 1..I)(
  storage[m, i] <= storage_size % Storage capacity for each oil
);

constraint forall(m in 1..M)(
  sum(i in 1..I)(hardness[i] * refine[m, i]) / sum(i in 1..I)(refine[m, i]) >= min_hardness % Minimum hardness of final product
);

constraint forall(m in 1..M)(
  sum(i in 1..I)(hardness[i] * refine[m, i]) / sum(i in 1..I)(refine[m, i]) <= max_hardness % Maximum hardness of final product
);

constraint forall(m in 1..M, i in 1..I)(
  if refine[m, i] > 0 then refine[m, i] >= min_usage else true endif % Minimum usage of each oil if it is used
);

constraint forall(m in 1..M, i in 1..I, j in 1..I)(
  if dependencies[i, j] then refine[m, i] <= refine[m, j] else true endif % Dependency constraints
);

% Objective
var int: profit = sum(m in 1..M, i in 1..I)(sell_price * refine[m, i] - buy_price[m, i] * buy[m, i] - storage_cost * storage[m, i]);
solve maximize profit;

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.