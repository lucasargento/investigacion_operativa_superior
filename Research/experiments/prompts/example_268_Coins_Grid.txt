You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 268
- Name: Coins Grid
- Domain: Academic
- Objective: maximization

Problem Description:
# Problem CoinsGrid

From Tony Hurlimann, A coin puzzle, SVOR-contest 2007.

## Data
  Two integers n and c

## Model
  constraints: [Sum](http://pycsp.org/documentation/constraints/Sum)

## Execution
  - python CoinsGrid.py -data=[number,number]

## Links
  - https://link.springer.com/book/10.1007/978-3-319-25883-6
  - https://www.cril.univ-artois.fr/XCSP22/competitions/cop/cop

## Tags
  academic, recreational, xcsp22


MiniZinc Model:
include "globals.mzn";

% Define the variables
var int: n;
var int: c;

% Define the constraint
constraint n + c = 10;

% Define the objective function
solve maximize n;

% Output the solution
output ["n = ", show(n), "\nc = ", show(c)];

Expected Output:
{
  "n": 2147483646,
  "c": -2147483636,
  "_objective": 2147483646
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.