You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 441
- Name: Lot-sizing Problem
- Domain: Production Planning
- Objective: minimization

Problem Description:
Lot-sizing problems are production planning problems where Periods are predefined and production of an item during a Periods involves a discrete event such as the payment of a cost or the loss of production capacity. These events can occur due to the placement of an order or the set-up, startup, or changeover of a machine. The demand for each of the Items across each period is represented by Demand_{i,j}, while the total production capacity available in each period is defined by TotalPeriodCapacity_j. Each item has a specific capacity ItemCapacity_{i,j} which could decrease in each period due to mentioned events. Holding costs for items are indicated by HoldingCost_i, while backorder costs and fixed order costs are represented by BackorderCost_i and FixedCost_i, respectively. The initial stock of each item is provided by InitialStock_i.


Input Data (data.dzn):
NumItems = 8;
NumPeriods = 8;
Demand = [|59, 46, 141, 45, 93, 85, 94, 104
          |75, 34, 135, 146, 16, 54, 33, 140
          |22, 101, 97, 59, 103, 40, 24, 40
          |105, 96, 156, 28, 87, 155, 29, 140
          |44, 136, 76, 38, 94, 50, 14, 31
          |76, 33, 160, 20, 160, 109, 79, 145
          |69, 154, 109, 23, 105, 49, 25, 127
          |54, 46, 157, 78, 103, 81, 137, 21|];
TotalPeriodCapacity = [802, 689, 916, 804, 661, 692, 894, 719];
ItemCapacity = [|146, 108, 105, 96, 102, 112, 126, 96
                |110, 97, 139, 86, 112, 102, 138, 134
                |127, 90, 105, 130, 125, 149, 124, 84
                |93, 149, 99, 123, 96, 104, 148, 145
                |142, 126, 140, 97, 148, 148, 148, 127
                |85, 142, 134, 126, 143, 88, 110, 124
                |110, 138, 117, 110, 136, 129, 120, 138
                |88, 124, 99, 138, 110, 145, 102, 122|];
HoldingCost = [1, 1, 1, 1, 1, 1, 1, 1];
BackorderCost = [2, 2, 2, 2, 2, 2, 2, 2];
FixedCost = [100, 200, 200, 300, 400, 250, 500, 300];
InitialStock = [0, 20, 10, 6, 3, 2, 1, 4];

MiniZinc Model:
% Parameters
int: NumItems;
int: NumPeriods;
array[1..NumItems, 1..NumPeriods] of int: Demand;
array[1..NumPeriods] of int: TotalPeriodCapacity;
array[1..NumItems, 1..NumPeriods] of int: ItemCapacity;
array[1..NumItems] of int: HoldingCost;
array[1..NumItems] of int: BackorderCost;
array[1..NumItems] of int: FixedCost;
array[1..NumItems] of int: InitialStock;

% Decision Variables
array[1..NumItems, 1..NumPeriods] of var 0..TotalPeriodCapacity[NumPeriods]: Production;
array[1..NumItems, 1..NumPeriods] of var 0..TotalPeriodCapacity[NumPeriods]: Stock;
array[1..NumItems, 1..NumPeriods] of var 0..1: Order;

% Constraints
constraint forall(i in 1..NumItems, j in 1..NumPeriods) (
    if j = 1 then
        Stock[i,j] = InitialStock[i] + Production[i,j] - Demand[i,j]
    else
        Stock[i,j] = Stock[i,j-1] + Production[i,j] - Demand[i,j]
    endif
);

constraint forall(j in 1..NumPeriods) (
    sum(i in 1..NumItems) (Production[i,j]) <= TotalPeriodCapacity[j]
);

constraint forall(i in 1..NumItems, j in 1..NumPeriods) (
    Production[i,j] <= ItemCapacity[i,j] * Order[i,j]
);

% Objective Function
var int: TotalCost = sum(i in 1..NumItems, j in 1..NumPeriods) (
    HoldingCost[i] * max(0, Stock[i,j]) +
    BackorderCost[i] * max(0, -Stock[i,j]) +
    FixedCost[i] * Order[i,j]
);

solve minimize TotalCost;

% Output
output [ "Total Cost: " ++ show(TotalCost) ++ "\n" ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.