You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 487
- Name: Prime Number Finder
- Domain: Number Theory
- Objective: satisfaction

Problem Description:
The problem is about finding prime numbers using MiniZinc. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The code defines a number 'nn' in the range of 1 to 120. It also defines a variable 'num_divisors' to count the number of divisors of 'nn' and a set 'divisor' to store the divisors of 'nn'. A variable 'is_prime' is used to indicate whether 'nn' is a prime number or not. The code includes a predicate 'divisors' to calculate the number of divisors of 'nn'. The problem is to find the value of 'nn' such that it is a prime number. The output of the code includes the value of 'nn', the number of divisors, the divisors of 'nn', and whether 'nn' is a prime number or not.


MiniZinc Model:
include "globals.mzn";
int: m = 120;
var 1..m: nn;

var 0..m: num_divisors;
% int: t = (n div 2)+1; % number of elements in the divisors array
var set of 1..m: divisor; 
var 0..1: is_prime;


%
% Calculate the number of divisors of n
%
predicate divisors(var int: n, var int: num_divisors, var set of int: d) =
   let { 
         int: ubn = ub(n), 
         int: t = (ubn div 2)+1
       } 
   in 
    n > 1 /\
    % is a divisor?
    forall(i in 2..t) (
        (i in d <-> n mod i = 0) 
        % /\
        % (not(i in d) <-> n mod i > 0)
     ) 
    /\
    forall(i in t+1..ubn-1) (
        not(i in d)
    )
    /\
    1 in d 
    /\
    n in d
    /\ 
    num_divisors = card(d)
;

% solve satisfy;
solve :: set_search([divisor], first_fail, indomain_min, complete) satisfy;

constraint
   % nn = 100 /\
   divisors(nn, num_divisors, divisor)
   /\
   (is_prime = 1 <-> num_divisors = 2) /\
   (is_prime = 0 <-> num_divisors > 2)

   % /\ is_prime = 1
;


output [
"nn: " ++ show(nn) ++ "\n"++
"num_divisors: " ++ show(num_divisors) ++ "\n"++
"divisor: " ++ show(divisor) ++ "\n"++
"is_prime: " ++ show(is_prime) ++ "\n"
];

Expected Output:
{
  "nn": 120,
  "num_divisors": 16,
  "divisor": {
    "set": [
      [
        1,
        6
      ],
      8,
      10,
      12,
      15,
      20,
      24,
      30,
      40,
      60,
      120
    ]
  },
  "is_prime": 0
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.