You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 55
- Name: Hidato
- Domain: Puzzles and Games
- Objective: satisfaction

Problem Description:
The Hidato puzzle is a logic puzzle game where a grid of cells is given, some of which are filled with numbers. The goal is to fill the remaining cells with consecutive numbers that will form a path from the start number to the end number, where the path is a sequence of horizontally, vertically, or diagonally adjacent cells. The start and end numbers are circled.


Input Data (data.dzn):
% Problem from the book:
% Gyora Bededek: "Hidato: 2000 Pure Logic Puzzles"
% Problem 188 (Genius)
c = 12;
r = 12;
puzzle = array2d(1..r, 1..c,
 [
     0,  0,134,  2,  4,  0,  0,  0,  0,  0,  0,  0,
   136,  0,  0,  1,  0,  5,  6, 10,115,106,  0,  0,
   139,  0,  0,124,  0,122,117,  0,  0,107,  0,  0,
     0,131,126,  0,123,  0,  0, 12,  0,  0,  0,103,
     0,  0,144,  0,  0,  0,  0,  0, 14,  0, 99,101,
     0,  0,129,  0, 23, 21,  0, 16, 65, 97, 96,  0,
    30, 29, 25,  0,  0, 19,  0,  0,  0, 66, 94,  0,
    32,  0,  0, 27, 57, 59, 60,  0,  0,  0,  0, 92,
     0, 40, 42,  0, 56, 58,  0,  0, 72,  0,  0,  0,
     0, 39,  0,  0,  0,  0, 78, 73, 71, 85, 69,  0,
    35,  0,  0, 46, 53,  0,  0,  0, 80, 84,  0,  0,
    36,  0, 45,  0,  0, 52, 51,  0,  0,  0,  0, 88,
 ]);

MiniZinc Model:
% 
% Hidato puzzle in MiniZinc.
% 
% http://www.shockwave.com/gamelanding/hidato.jsp
% http://www.hidato.com/
%
% """
% Puzzles start semi-filled with numbered tiles.
% The first and last numbers are circled.
% Connect the numbers together to win. Consecutive
% number must touch horizontally, vertically, or
% diagonally.
% """

% Some statistics:
% For a 3 x 3 puzzle the following number of puzzles are possible,
% given the position of 1:
% 
%   1 0 0
%   0 0 0 
%   0 0 0
% 138 possible solutions
%
%   0 1 0
%   0 0 0
%   0 0 0
% 50 possible solutions
%
%   0 0 0
%   0 1 0
%   0 0 0
% 32 possible solutions

% All solutions:
%   0 0 0
%   0 0 0
%   0 0 0
% 784 possible solutions


% 
% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc page: http://www.hakank.org/minizinc
%
include "globals.mzn"; 

int: r;                        % Number of rows in the puzzle
int: c;                        % Number of columns in the puzzle
array[1..r, 1..c] of int: puzzle;  % The puzzle grid with fixed tiles

array[1..r, 1..c] of var 1..r*c: grid;  % Variable representing the puzzle grid

solve satisfy;

% Constraints

% Place all integers from 1 to r*c uniquely
constraint all_different([grid[i,j] | i in 1..r, j in 1..c]) :: domain;

% Place the fixed tiles from the puzzle into the grid
constraint forall(i in 1..r, j in 1..c) (
    puzzle[i,j] > 0 -> 
        grid[i,j] = puzzle[i,j]
);

% Constraint 3: Ensure that each number k from 1 to r*c-1 is followed by k+1 in a valid move
constraint forall(k in 1..r*c-1) (
    let {
        var 1..r: i;           % Row index of k
        var 1..c: j;           % Column index of k
        var {-1,0,1}: a;       % Change in row for next number
        var {-1,0,1}: b        % Change in column for next number
    }
    in
    k = grid[i, j] % Fix the current number k
    /\
    i+a >= 1 /\ j+b >= 1    % Ensure the next position is within bounds
    /\
    i+a <= r /\ j+b <= c
    /\
    not(a = 0 /\ b = 0)     % Ensure movement is not stagnant
    /\
    k + 1 = grid[i+a, j+b]     % Ensure the next number is k + 1
);

% output
output 
[
  if j = 1 then "\n" else " " endif ++
    show_int(3, grid[i,j])
  | i in 1..r, j in 1..c

];

Expected Output:
{
  "grid": [
    [
      137,
      135,
      134,
      2,
      4,
      7,
      8,
      9,
      114,
      113,
      112,
      111
    ],
    [
      136,
      138,
      133,
      1,
      3,
      5,
      6,
      10,
      115,
      106,
      105,
      110
    ],
    [
      139,
      132,
      125,
      124,
      121,
      122,
      117,
      116,
      11,
      107,
      109,
      104
    ],
    [
      140,
      131,
      126,
      127,
      123,
      120,
      118,
      12,
      13,
      108,
      102,
      103
    ],
    [
      141,
      130,
      144,
      128,
      22,
      119,
      17,
      15,
      14,
      98,
      99,
      101
    ],
    [
      142,
      143,
      129,
      24,
      23,
      21,
      18,
      16,
      65,
      97,
      96,
      100
    ],
    [
      30,
      29,
      25,
      26,
      20,
      19,
      61,
      62,
      64,
      66,
      94,
      95
    ],
    [
      32,
      31,
      28,
      27,
      57,
      59,
      60,
      75,
      63,
      67,
      93,
      92
    ],
    [
      33,
      40,
      42,
      55,
      56,
      58,
      76,
      74,
      72,
      70,
      68,
      91
    ],
    [
      34,
      39,
      41,
      43,
      54,
      77,
      78,
      73,
      71,
      85,
      69,
      90
    ],
    [
      35,
      38,
      44,
      46,
      53,
      49,
      50,
      79,
      80,
      84,
      86,
      89
    ],
    [
      36,
      37,
      45,
      47,
      48,
      52,
      51,
      81,
      82,
      83,
      87,
      88
    ]
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.