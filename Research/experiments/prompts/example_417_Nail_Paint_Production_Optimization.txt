You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 417
- Name: Nail Paint Production Optimization
- Domain: Manufacturing
- Objective: maximization

Problem Description:
A fashion company produces two types of nail paints , gel and acrylic . The profit per unit of gel is $ 80 and the profit per unit of acrylic is $ 200 . It takes 4 hours to produce the raw materials for one unit of gel , 3 hour to mix and 6 hours in packing . It takes 2 hours to produce the raw materials for one unit of acrylic , 5 hour to mix and 2.3 hours in packing . Per month , 290 hours are available for preparing the raw materials , 480 hours for mixing and 510 hours for packing the nail paints .   How many of each type of nail paint should be produced in order to maximize the total monthly profit ?


MiniZinc Model:
include "globals.mzn";

% number of units of gel paint
var int: gel;
% number of units of acrylic paint
var int: acrylic;

% units of paint must be non-negative
constraint gel >= 0;
constraint acrylic >= 0;

% 290 hours are available for producing raw materials
% it takes 4 hours to produce the raw materials for gel paint and 2 hours to produce the raw materials for acrylic paint
constraint 4 * gel + 2 * acrylic <= 290;

% 480 hours are available for mixing
% it take 3 hours to mix gel paint and 5 hours to mix acrylic paint
constraint 3 * gel + 5 * acrylic <= 480;

% 510 hours are available for packing
% it take 6 hours to pack gel paint and 2.3 hours to pack acrylic paint
constraint 6 * gel + 2.3 * acrylic <= 510;

% the profit per unit of gel is $80 and the profit per unit of acrylic is $200
var int: profit = 80 * gel + 200 * acrylic;

% maximize profit
solve maximize profit;

% Output
output ["Gel: " ++ show(gel) ++ "\nAcrylic: " ++ show(acrylic) ++ "\nProfit: " ++ show(profit)];

Expected Output:
{
  "gel": 0,
  "acrylic": 96,
  "_objective": 19200
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.