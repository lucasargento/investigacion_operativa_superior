You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 247
- Name: Electricity Capacity Planning
- Domain: Energy
- Objective: minimization

Problem Description:
What is the capacity expansion plan that results in the minimum cost, given the Demand in period T, the maximum oil capacity OilCap in period T, the CoalCost per unit, the NukeCost per unit, the maximum nuclear capacity MaxNuke, the lifetime of a coal plant CoalLife, and the lifetime of a nuclear plant NukeLife?


Input Data (data.dzn):
T = 12;
Demand = [10, 15, 17, 20, 13, 19, 10, 25, 30, 33, 30, 35];
OilCap = [15, 14, 13, 10, 10, 7, 5, 5, 5, 5, 5, 5];
CoalCost = 10;
NukeCost = 5;
MaxNuke = 20;
CoalLife = 5;
NukeLife = 10;

MiniZinc Model:
% Parameters
int: T; % Number of years
array[1..T] of int: Demand; % Demand for each year
array[1..T] of int: OilCap; % Oil capacity for each year
int: CoalCost; % Cost per unit of coal capacity
int: NukeCost; % Cost per unit of nuclear capacity
int: MaxNuke; % Maximum nuclear capacity
int: CoalLife; % Lifetime of a coal plant
int: NukeLife; % Lifetime of a nuclear plant

% Decision Variables
array[1..T] of var 0..Demand[T]: CoalCapAdded; % Coal capacity added each year
array[1..T] of var 0..Demand[T]: NukeCapAdded; % Nuclear capacity added each year

% Total cost
var int: TotalCost;

% Constraints
constraint forall(t in 1..T)(
  % Total capacity must meet demand
  sum(i in max(1, t-CoalLife+1)..t)(CoalCapAdded[i]) +
  sum(i in max(1, t-NukeLife+1)..t)(NukeCapAdded[i]) + OilCap[t] >= Demand[t]
);

constraint forall(t in 1..T)(
  % Nuclear capacity must not exceed maximum
  sum(i in max(1, t-NukeLife+1)..t)(NukeCapAdded[i]) <= MaxNuke
);

% Objective
constraint TotalCost = sum(t in 1..T)(CoalCost * CoalCapAdded[t] + NukeCost * NukeCapAdded[t]);

% Minimize total cost
solve minimize TotalCost;

% Output
output ["{\"coal_cap_added\": [", join(", ", [show(CoalCapAdded[t]) | t in 1..T]), "], \"nuke_cap_added\": [", join(", ", [show(NukeCapAdded[t]) | t in 1..T]), "], \"total_cost\": ", show(TotalCost), "}"];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.