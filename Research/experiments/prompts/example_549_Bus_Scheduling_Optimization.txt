You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 549
- Name: Bus Scheduling Optimization
- Domain: Operations Research
- Objective: minimization

Problem Description:
The problem is about bus scheduling. Given a number of time slots and the minimum number of buses required at each time slot, the goal is to determine how many buses should start the schedule at each time slot. The objective is to minimize the total number of buses used. There are constraints that there must be 0 or more buses at each time slot, the number of buses for a time slot and the next one should meet the demand for the current time slot, and the demand 'around the clock' meaning the number of buses for the last time slot and the first one should meet the demand for the last time slot. The problem is taken from Taha's 'Introduction to Operations Research', page 58, and is a slightly more general model than Taha's.


MiniZinc Model:
int: time_slots; % number of time slots

% demand: minimum number of buses at time t
array[1..time_slots] of int: demands; 

% result array: how many buses start the schedule at time slot t
array[1..time_slots] of var 0..max(demands): x;

% the objective to minimize: the total number of buses
var int: z = sum(i in 1..time_slots) (x[i]);

% minimize the number of buses needed
solve :: int_search(x, first_fail, indomain_min, complete) minimize z;
% solve satisfy;

constraint
  % must be 0 or more buses at each time slot
  forall(i in 1..time_slots) (x[i] >= 0)

  /\ % meet the demands for this and the next time slot
  forall(i in 1..time_slots-1) (x[i]+x[i+1] >= demands[i])

  /\ % demand "around the clock"
  x[time_slots] + x[1] >= demands[time_slots]

%  /\ % for solve satisfy
%  sum(i in 1..time_slots) (x[i]) = 26
;

%
% data
%
time_slots = 6;
demands = [8, 10, 7, 12, 4, 4];

output
[
  "x: " ++ show(x) ++ "\n" ++
  "z: " ++ show(z) ++ "\n"
];

Expected Output:
{
  "x": [
    0,
    8,
    2,
    5,
    7,
    4
  ],
  "_objective": 26
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.