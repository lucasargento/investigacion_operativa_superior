You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 468
- Name: Lexicographical Order Matrix
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The problem is about enforcing a lexicographical order on a matrix of domain variables. The matrix is defined such that both adjacent rows and adjacent columns are lexicographically ordered. This means that each row and each column must be in a non-decreasing order. For example, given a matrix with two rows and three columns, the first row <2, 2, 3> is lexicographically less than or equal to the second row <2, 3, 1>, the first column <2, 2> is lexicographically less than or equal to the second column <2, 3>, and the second column <2, 3> is lexicographically less than or equal to the third column <3, 1>. The problem is to find a matrix that satisfies these conditions.


MiniZinc Model:
include "globals.mzn"; 

int: r = 2;
int: c = 3;
array[1..r, 1..c] of var 1..4: x;

predicate lex2_me(array[int, int] of var int: x) =
  let {
    int: lbx1 = min(index_set_1of2(x)),
    int: ubx1 = max(index_set_1of2(x)),
    int: lbx2 = min(index_set_2of2(x)),
    int: ubx2 = max(index_set_2of2(x))

  } in
 forall(i in lbx1+1..ubx1) (
     lex_less( [x[i-1, j] | j in index_set_2of2(x)], [x[i, j] | j in index_set_2of2(x)])
  )
  /\
  forall(j in lbx2+1..ubx2) (
     lex_less( [x[i, j-1] | i in index_set_1of2(x)], [x[i, j] | i in index_set_1of2(x)])
  )
;

predicate cp2d(array[int,int] of var int: x, array[int,int] of var int: y) =
  assert(index_set_1of2(x) = index_set_1of2(y) /\
         index_set_2of2(x) = index_set_2of2(y),
           "cp2d: x and y have different sizes",
     forall(i in index_set_1of2(x), j in index_set_2of2(x)) (
         y[i,j] = x[i,j]
    ) 
  )
; 

% solve satisfy;
solve :: int_search([x[i,j] | i in 1..r, j in 1..c], first_fail, indomain_min, complete) satisfy;

constraint
  cp2d(x, array2d(1..r, 1..c, 
     [
       2,2,3,
       2,3,1
     ]))
  /\
  lex2_me(x)
;

output [
 if j = 1 then "\n" else " "  endif ++
   show(x[i,j])
 | i in 1..r, j in 1..c
] ++ ["\n"];

Expected Output:
{
  "x": [
    [
      2,
      2,
      3
    ],
    [
      2,
      3,
      1
    ]
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.