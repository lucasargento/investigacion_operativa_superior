You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 455
- Name: Sliding Time Window Task Scheduling
- Domain: Scheduling
- Objective: satisfaction

Problem Description:
The problem is about scheduling tasks within a sliding time window. The tasks are represented as a collection, each with an origin and duration. The sliding time window is defined by a start time and a window size. The sum of the intersections of all the tasks with the interval [START, START+WINDOW_SIZE-1] should be less than or equal to a given limit. An intersection here refers to the duration of a task that falls within the time window. The goal is to find a schedule that satisfies these constraints. For example, given a window size of 9, a limit of 6, and tasks with origins and durations of (10,3), (5,1), and (6,2), the intersections of these tasks with the interval [5, 13] are 3, 1, and 2 respectively. The sum of these intersections (3+1+2) does not exceed the limit of 6, so the schedule is valid.


MiniZinc Model:
int: n = 3;
int: max_time = 13;
array[1..n, 1..2] of var 1..max_time: tasks;
int: window_size = 9;
var int: limitx;
int: start = 5;
array[start..start+window_size-1] of var 0..n: occupied;

predicate sliding_time_window_from_start(
                                   int: window_size, 
                                   var int: limitx, 
                                   array[int, 1..2] of var int: tasks, 
                                   int: start) =

   % how many tasks occupies this time entry
   forall(i in start..start+window_size-1) (
      occupied[i] = sum(j in min(index_set_1of2(tasks))..max(index_set_1of2(tasks))) (
         bool2int(
             i >= tasks[j, 1] /\ i < tasks[j, 1] + tasks[j, 2]
         )
      )
   )
  /\
  limitx >=  sum(occupied)
;

predicate cp2d(array[int,int] of var int: x, array[int,int] of var int: y) =
  assert(index_set_1of2(x) = index_set_1of2(y) /\
         index_set_2of2(x) = index_set_2of2(y),
           "cp2d: x and y have different sizes",
     forall(i in index_set_1of2(x), j in index_set_2of2(x)) (
         y[i,j] = x[i,j]
    ) 
  )
; 

solve satisfy;

constraint
  limitx = 6
  /\
  cp2d(tasks, array2d(1..n, 1..2, 
     [
       10,3,
        5,1,
        6,2
     ]))
   /\
   sliding_time_window_from_start(window_size, limitx, tasks, start)
;


output [
"window_size: " ++ show(window_size) ++ "\n"++
"limitx: " ++ show(limitx) ++ "\n"++
"tasks: " ++ show(tasks) ++ "\n"++
"start: " ++ show(start) ++ "\n" ++
"occupied: " ++ show(occupied) ++ "\n"
];

Expected Output:
{
  "tasks": [
    [
      10,
      3
    ],
    [
      5,
      1
    ],
    [
      6,
      2
    ]
  ],
  "limitx": 6,
  "occupied": [
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    1,
    0
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.