You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 214
- Name: Spare Parts Production Optimization
- Domain: Manufacturing
- Objective: maximization

Problem Description:
Formulate the problem of determining the quantities of each spare part to be made during the month so as to maximize Profit. Each spare part k requires Time on machine s, and each machine s has a maximum monthly capacity of Capacity.


Input Data (data.dzn):
Here is the data in ".dzn" format:

```
NumParts = 5;
NumMachines = 2;
Time = [|2, 3|, |1, 2|, |3, 2|, |3, 1|, |1, 1|];
Profit = [30, 20, 40, 25, 10];
Capacity = [700, 1000];
```

MiniZinc Model:
% Parameters
int: NumParts; % Number of parts
int: NumMachines; % Number of machines
array[1..NumParts, 1..NumMachines] of int: Time; % Time required for each part on each machine
array[1..NumParts] of int: Profit; % Profit for each part
array[1..NumMachines] of int: Capacity; % Capacity of each machine

% Decision Variables
array[1..NumParts] of var 0..Capacity[1]: quantity; % Quantity of each part to be made

% Objective
maximize sum(k in 1..NumParts)(Profit[k]*quantity[k]);

% Constraints
constraint forall(s in 1..NumMachines)(
    sum(k in 1..NumParts)(Time[k,s]*quantity[k]) <= Capacity[s]
);

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.