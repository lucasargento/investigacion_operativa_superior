You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 328
- Name: Shopping Puzzle
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The problem is a shopping puzzle. There are three husbands: Arthur, Bernard, Charles and three wives: Ann, Barbara, Cynthia. The goal is to find out who is married to whom and how many articles each person bought. The constraints are as follows: Each husband has one wife and each wife has one husband. Arthur has bought 23 more articles than Barbara and Bernard has bought 11 more articles than Ann. Each husband has spent $63 more than his wife. The number of articles bought by each husband and the number of books (and price) bought by each son are represented by variables x and y respectively. The variable w[i,j] is 1 if husband i is married to wife j, and 0 otherwise.


MiniZinc Model:
int: m = 3;
set of int: M = 1..m;

% Husbands:Arthur, Bernard, Charles 
% Wifes   : Ann, Barbara, Cynthia 
array[M, M] of var 0..1: w; % w[i,j]=1 if husband i married to wife j, 0 otherwise 
array[M] of var 1..100: x; % number of articles bought by husband i
array[M] of var 1..100: y; % number of books (and price) bought by son j

solve satisfy;
% solve :: int_search([w[i,j] | i,j in M], "first_fail", "indomain", "complete") satisfy;

constraint
   % Each husband has one wife
   forall(i in M) (
      sum (j in M) (w[i,j]) = 1
   )

   /\ % Each wife has one husband
   forall(j in M) (
     sum(i in M) (w[i,j]) = 1
   )

   /\ % Arthur has bought 23 more articles than Barbara
   x[1] = y[2] + 23
 
   /\ % Bernard has bought 11 more articles than Ann
   x[2] = y[1] + 11
   
   /\ % each husband has spent $63 more than his wife
   forall(i in M) (
       x[i]*x[i]  = sum(j in M) ( w[i,j]*y[j]*y[j]+63)
  )
;


output 
[
  "x: ", show(x), "\n",
  "y: ", show(y), 
]
++
[
  if j = 1 then "\n" else " " endif ++
    show(w[i,j])
  | i,j in M
] ++ ["\n"];

Expected Output:
{
  "w": [
    [
      0,
      0,
      1
    ],
    [
      0,
      1,
      0
    ],
    [
      1,
      0,
      0
    ]
  ],
  "x": [
    33,
    17,
    15
  ],
  "y": [
    6,
    10,
    30
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.