You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 172
- Name: Movie Scheduling
- Domain: Scheduling
- Objective: maximization

Problem Description:
The problem is a movie scheduling problem. Given a list of movies with their respective start and end times, the goal is to schedule as many non-overlapping movies as possible. The movies and their respective time intervals are as follows: 'Tarjan of the Jungle' from 4 to 13, 'The Four Volume Problem' from 17 to 27, 'The President's Algorist' from 1 to 10, 'Steiner's Tree' from 12 to 18, 'Process Terminated' from 23 to 30, 'Halting State' from 9 to 16, 'Programming Challenges' from 19 to 25, ''Discrete' Mathematics' from 2 to 7, and 'Calculated Bets' from 26 to 31. The objective is to maximize the number of movies scheduled without any two movies overlapping in time.


MiniZinc Model:
int: num_movies;
array[1..num_movies, 1..2] of int: data;
array[1..num_movies] of string: movies;

% decision variables
array[1..num_movies] of var 0..1: x;
var 0..num_movies: z = sum(x);

% solve satisfy;
% solve maximize z;
solve :: int_search(x, first_fail, indomain_min, complete) maximize z;

predicate no_overlap(int: start1, int: end1, int: start2, int: end2) =
   start1 > end2 
   \/
   start2 > end1
;


constraint
  % z = 4 %% for solve satisfy
  % /\
  forall(i, j in 1..num_movies where i < j) (
     (x[i] = 1 /\ x[j] = 1) -> no_overlap(data[i,1], data[i,2], data[j,1], data[j,2])
  )
;

output 
[
  "z: " ++ show(z) ++ "\nx: " ++ show(x) ++ "\n"
]
++
[
  if fix(x[i]) = 1 then
    show(movies[i]) ++ ": " ++ show(data[i,1]) ++ ".." ++ show(data[i,2]) ++ "\n"
  else 
   ""
  endif 
  | i in 1..num_movies
];

%
% data
%
num_movies = 9;
data = array2d(1..num_movies, 1..2,
[
 4,13, % "Tarjan of the Jungle",
17,27, % "The Four Volume Problem",
 1,10, % "The President's Algorist",
12,18, % "Steiner's Tree",
23,30, % "Process Terminated",
 9,16, % "Halting State",
19,25, % "Programming Challenges",
 2, 7, % "'Discrete' Mathematics",
26,31  % "Calculated Bets"
]);

movies = [
"Tarjan of the Jungle",
"The Four Volume Problem",
"The President's Algorist",
"Steiner's Tree",
"Process Terminated",
"Halting State",
"Programming Challenges",
"'Discrete' Mathematics",
"Calculated Bets"
];

Expected Output:
{
  "x": [
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1
  ],
  "_objective": 4
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.