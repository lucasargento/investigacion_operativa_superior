You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 89
- Name: Ski Assignment Optimization
- Domain: Scheduling
- Objective: minimization

Problem Description:
The Ski Optimization problem aims to minimize the disparity between skier heights and assigned ski heights. The objective is to find an assignment of skis to skiers such that the sum of disparities is minimized. Each skier should ideally have skis whose height matches their own, but in practice, this is generally not possible. The goal is to optimize the assignment to minimize overall disparities. Disparities are measured in the absolute difference between the skier heights and ski heights.


Input Data (data.dzn):
num_skis = 6;
num_skiers = 5;

ski_heights =   [1, 2, 5, 7, 13, 21]; % original problem
skier_heights = [3, 4, 7, 11, 18];

MiniZinc Model:
% 
% Ski assignment problem in MiniZinc.
%
% From
% Jeffrey Lee Hellrung, Jr.: PIC 60, Fall 2008 â€“ Final Review, December 12, 2008
% http://www.math.ucla.edu/~jhellrun/course_files/Fall%25202008/PIC%252060%2520-%2520Data%2520Structures%2520and%2520Algorithms/final_review.pdf
% """
% 5. Ski Optimization! Your job at Snapple is pleasant but in the winter you've 
% decided to become a ski bum. You've hooked up with the Mount Baldy Ski Resort. 
% They'll let you ski all winter for free in exchange for helping their ski rental 
% shop with an algorithm to assign skis to skiers. Ideally, each skier should 
% obtain a pair of skis whose height matches his or her own height exactly. 
% Unfortunately, this is generally not possible. We define the disparity between 
% a skier and his or her skis to be the absolute value of the difference between 
% the height of the skier and the pair of skis. Our objective is to find an 
% assignment of skis to skiers that minimizes the sum of the disparities. 
% ...
% Illustrate your algorithm by explicitly filling out the A[i, j] table for the 
% following sample data:
%   * Ski heights: 1, 2, 5, 7, 13, 21.
%   * Skier heights: 3, 4, 7, 11, 18.
%
% """
% 

% 
% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc page: http://www.hakank.org/minizinc
%

include "globals.mzn"; 
% include "globals-gecode.mzn"; 

int: num_skis;
int: num_skiers;
array[1..num_skis] of int: ski_heights;
array[1..num_skiers] of int: skier_heights;

% the assignments
array[1..num_skiers] of var 1..num_skis: x;

% minimize the differences
% var int: z = sum(i in 1..num_skiers) ( abs(ski_heights[x[i]] - skier_heights[i]) );
% Without the element constraint
var int: z = sum(i in 1..num_skiers, j in 1..num_skis) (
             bool2int(x[i] = j) * abs(ski_heights[j] - skier_heights[i]) 
    );

% solve satisfy;
solve :: int_search(x, smallest, indomain_min, complete)  minimize z;

constraint
   % z = 7 /\ % for original problem
   all_different(x) % :: domain
;

output [
  show(z) ++ "\n" ++
  show(x) ++ "\n"
];

Expected Output:
{
  "x": [
    2,
    3,
    4,
    5,
    6
  ],
  "_objective": 7
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.