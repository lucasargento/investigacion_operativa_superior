You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 178
- Name: Smallest Superpermutation
- Domain: Combinatorial Mathematics
- Objective: minimization

Problem Description:
The problem is about finding superpermutations. In combinatorial mathematics, a superpermutation on n symbols is a string that contains each permutation of n symbols as a substring. Superpermutations can be shorter than the sum of all permutations because overlap is allowed. For instance, in the case of n = 2, the superpermutation 1221 contains all possible permutations (12 and 21), but the shorter string 121 also contains both permutations. It has been shown that for 1 ≤ n ≤ 5, the smallest superpermutation on n symbols has length 1! + 2! + … + n! The task is to find the smallest superpermutation for a given n. The problem is solved by minimizing the length of the superpermutation, subject to the constraints that each permutation must appear as a substring, all permutations must be different, the first n symbols must be in order, and the superpermutation must be a palindrome.


Input Data (data.dzn):
n=4;
permutations = array2d(1..num_perms, 1..n,
[
1,2,3,4,
1,2,4,3,
1,3,2,4,
1,3,4,2,
1,4,2,3,
1,4,3,2,
2,1,3,4,
2,1,4,3,
2,3,1,4,
2,3,4,1,
2,4,1,3,
2,4,3,1,
3,1,2,4,
3,1,4,2,
3,2,1,4,
3,2,4,1,
3,4,1,2,
3,4,2,1,
4,1,2,3,
4,1,3,2,
4,2,1,3,
4,2,3,1,
4,3,1,2,
4,3,2,1,
]);

MiniZinc Model:
include "globals.mzn"; 

int: n;
int: num_perms = factorial(n);
array[1..num_perms,1..n] of int: permutations;
int: upper_bound = sum([factorial(i) | i in 1..n]);

function int: factorial(int: n) =
  let {
    int: f = product([i | i in 1..n]);
  } in
  f
;

% decision variables
array[1..upper_bound] of var 1..n: x;
array[1..num_perms] of var 1..upper_bound: ps; % where start the p'th permutation
var 0..upper_bound: z = max(ps);

% solve minimize z;
% solve :: int_search(x ++ ps, input_order, indomain_split, complete) minimize z;
solve :: int_search(x ++ ps, occurrence, indomain_split, complete) minimize z;

constraint
  forall(perm in 1..num_perms) (
    forall(j in 0..n-1) (
      x[ps[perm]+j] = permutations[perm,j+1]
    )  
  )

  /\ all_different(ps)


  /\ % symmetry breaking
  forall(i in 1..n) (
    x[i] = i
  )


  /\ % palindrome (experimental)
  forall(i in 1..upper_bound) (
    x[i] = x[upper_bound-i+1]
  )
  % forall(i in 1..z+n-1) (
  %   x[i] = x[z+n-1-i+1]
  % )
;

output [
  "factorial(n): \(factorial(n))\n",
  "upper_bound: \(upper_bound)\n",
  "x: \(x)\n",
  "ps: \(ps)\n",
  "z: \(z)\n",
  "tot_len: \(z+n-1)\n",
];

Expected Output:
{
  "x": [
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    1,
    4,
    2,
    3,
    1,
    2,
    4,
    3,
    1,
    2,
    1,
    3,
    4,
    2,
    1,
    3,
    2,
    4,
    1,
    3,
    2,
    1,
    4,
    3,
    2,
    1
  ],
  "ps": [
    1,
    12,
    22,
    18,
    8,
    29,
    17,
    28,
    6,
    2,
    24,
    13,
    11,
    7,
    27,
    23,
    3,
    19,
    4,
    25,
    20,
    9,
    14,
    30
  ],
  "_objective": 30
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.