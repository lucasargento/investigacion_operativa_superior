You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 234
- Name: Power Station Problem
- Domain: Energy
- Objective: minimization

Problem Description:
Which generators should be working in which periods of the day to minimize the total cost given the demand (Demand) for each period, the number of each generator (NumGenerator), the minimum (MinLevel) and maximum (MaxLevel) levels of each generator, the running costs (RunCost), the extra costs (ExtraCost), and the start-up costs (StartCost) for each generator?


Input Data (data.dzn):
demand = [15000, 30000, 25000, 40000, 27000];
num = [12, 10, 5];
minlevel = [850, 1250, 1500];
maxlevel = [2000, 1750, 4000];
runcost = [1000, 2600, 3000];
extracost = [2.0, 1.3, 3.0];
startcost = [2000, 1000, 500];

MiniZinc Model:
% Define parameters
int: T = 5; % Number of periods
int: K = 3; % Number of generator types
array[1..T] of int: demand; % Demand for each period
array[1..K] of int: num; % Number of each generator type
array[1..K] of int: minlevel; % Minimum level of each generator type
array[1..K] of int: maxlevel; % Maximum level of each generator type
array[1..K] of int: runcost; % Running cost of each generator type
array[1..K] of float: extracost; % Extra cost of each generator type
array[1..K] of int: startcost; % Start-up cost of each generator type

% Define decision variables
array[1..K, 1..T] of var 0..num: numon; % Number of generators of each type that are on in each period
array[1..K, 1..T] of var minlevel..maxlevel: level; % Level at which each generator type is operated in each period

% Define constraints
constraint forall(k in 1..K, t in 1..T) (
    minlevel[k]*numon[k,t] <= level[k,t] /\ level[k,t] <= maxlevel[k]*numon[k,t]
);
constraint forall(t in 1..T) (
    sum(k in 1..K) (level[k,t]) >= demand[t]
);

% Define objective function
var float: total_cost = sum(k in 1..K, t in 1..T) (
    runcost[k]*numon[k,t] + extracost[k]*(level[k,t] - minlevel[k]*numon[k,t]) + startcost[k]*(numon[k,t] > 0)
);

% Minimize total cost
solve minimize total_cost;

% Output solution
output [ "numon: " ++ show(numon) ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.