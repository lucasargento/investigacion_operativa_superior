You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 551
- Name: McEverywhere Restaurant Placement
- Domain: Urban Planning
- Objective: minimization

Problem Description:
The McEverywhere problem involves deciding how many fast food restaurants to build in a town. Building too many will result in wasted capital and building too few will result in lost business. The map shows the locations of 20 homes in a small town. There are no McEverywhere restaurants where the residents can eat. As the planner for McEverywhere corporation, you have been asked to build restaurants so that no resident has to travel more than 4km to reach a restaurant. You can build as many restaurants as you like and restaurants can be built on any cell (including one that has a home on it). Use a direct line between cells to calculate travel distance. The distance between two adjacent cells is 1km and the distance between two diagonal cells is 1.41 km. The question is: What is the minimum number of McEverywhere restaurants needed so that no resident has to travel more than 4km to reach one?


MiniZinc Model:
int: n = 10;
int: max_dist = 4*4; % square this since we don't do a sqrt in dist
array[1..n, 1..n] of int: homes;

% decision variables
array[1..n, 1..n] of var 0..1: x;

array[1..n, 1..n] of var 0..n*n: counts;

var 0..n*n: num_restaurants = sum(x);

% solve satisfy;
% solve minimize num_restaurants;
solve :: int_search(
        [x[i,j] | i,j in 1..n], %  ++ [counts[i,j] | i,j in 1..n], 
        first_fail, %  max_regret,
        indomain_min, 
        complete) 
    % satisfy;
    minimize num_restaurants;


% 
% Calculate the distance between two cells.
% 
% Note: Distance is not squared so we have to 
%       adjust the distance limit as well.
% 
predicate dist(var int: i1, var int: j1, 
               int: i2, int: j2, var int: d) =
      d = abs(i1-i2)*abs(i1-i2) +
            abs(j1-j2)*abs(j1-j2)
;


constraint

   % % slightly slower version.
   % forall(i, j in 1..n where homes[i,j] = 1) (
   %      let {
   %         var 1..10: ri, % index of the restaurant
   %         var 1..10: rj,
   %         var 0..max_dist: d   % the distance (squared so we don't 
   %                        % about sqrt in dist()
   %      } in 
   %      dist(ri,rj, i,j, d)
   %      /\
   %      x[ri,rj] = 1
   % )

   % This is slightly faster.
   % 
   % For each home, there must be one restaurant 
   % in the neighbourhood.
   forall(i, j in 1..n where homes[i,j] = 1) (
      exists(ri,rj in 1..n, d in 0..max_dist) (
         dist(ri,rj, i,j, d)
         /\
         x[ri,rj] = 1
      )
   )

   /\ % count the number of restaurants in the 'hood
      % of each home.
   forall(i, j in 1..n) (
     % if homes[i,j] = 1 then
         counts[i,j] = sum(ri,rj in 1..n, d in 0..max_dist) (
                          bool2int(dist(ri,rj, i,j, d)  /\ x[ri,rj] = 1)
                       )
     % else 
     %   counts[i,j] = 0
     %endif
   )


   % /\ % for solve satisfy
   % num_restaurants = 3

   % /\ % extra constraint, just for fun:
   %    % a home cannot be covered by more than 1 restaurant
   %    % (still needs just 3 restaurants)
   % forall(i,j in 1..n where homes[i,j] = 1) (
   %    counts[i,j] = 1   
   % ) 
;

output [
  "num_restaurants: " ++ show(num_restaurants) ++ "\n"
]
++
[
  if j = 1 then "\n" else " " endif ++
    if fix(x[i,j]) = 1 /\ homes[i,j] = 1 then 
       "X" % Restaurant in the same cell as a home
    elseif fix(x[i,j]) = 1 then
       "R" % just a restaurant
    elseif homes[i,j] = 1 then 
       "H" % Just a home
    else 
       "_"
    endif

  | i,j in 1..n
]
++
[ "\nNum restaurants in the 'hood:"]
++
[
  if j = 1 then "\n" else " " endif ++ 
    if homes[i,j] = 1 then
       show(counts[i,j])
    else 
       "_"
    endif
  | i, j in 1..n
]
 ++ ["\n"]
;


%
% data
%
homes = array2d(1..n, 1..n,
[
  %1 2 3 4 5 6 7 8 9 10
   0,0,0,1,0,0,0,1,1,1, % 1
   0,0,0,1,0,0,1,0,0,0, % 2
   0,0,0,0,0,0,0,1,1,0, % 3
   0,1,0,0,0,0,0,0,0,0, % 4
   1,0,0,0,0,0,0,0,0,0, % 5
   0,1,0,0,1,1,0,0,0,0, % 6
   0,0,0,0,1,0,0,0,1,0, % 7
   0,0,1,0,1,0,0,0,0,0, % 8
   0,0,0,0,1,0,0,0,1,0, % 9
   0,0,0,0,0,0,1,0,0,0, % 10
]);

Expected Output:
{
  "x": [
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ]
  ],
  "counts": [
    [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      1,
      1
    ],
    [
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      1,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2
    ],
    [
      0,
      1,
      1,
      1,
      2,
      2,
      1,
      1,
      1,
      2
    ],
    [
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ],
    [
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ]
  ],
  "_objective": 3
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.