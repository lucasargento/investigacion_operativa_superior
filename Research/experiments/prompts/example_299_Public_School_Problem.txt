You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 299
- Name: Public School Problem
- Domain: Puzzles
- Objective: minimization

Problem Description:
The Public School Problem is a puzzle that involves finding five integer values (x[1] to x[5]) that satisfy a set of constraints. The constraints are as follows: 

1. Each of the five values must be greater than or equal to a variable 'm' which ranges from 21 to 29, and less than or equal to 1000. 
2. The first value is half of the fifth value minus 2. 
3. The sum of the fourth and fifth values is equal to the sum of the second, third values and 14. 
4. The sum of twice the second value and twice the fifth value is equal to the sum of all five values minus 4. 
5. The sum of 32 times the third value and 32 times the fourth value is equal to 13 times the sum of all five values. 

The goal is to minimize the first value (x[1]).


MiniZinc Model:
array[1..5] of var int: x;
var 21..29: m;

solve minimize x[1];

constraint
  forall(i in 1..5) (
     x[i] >= m
     /\
     x[i] <= 1000
  )
  /\
  % the float version don't work
  % x[1] = 0.5 * x[5] - 2.0
  % /\
  % x[4]+x[5] = x[2] + x[3] + 14.0
  % /\
  % x[2]+x[5] = sum(i in 1..5) (0.5 * x[i]) - 2.0
  % /\
  % x[3]+x[4] = sum(i in 1..5) ((13.0/32.0) * x[i])

  % integer version
  2*x[1] = x[5] - 4  % multiply with 2
  /\
  x[4]+x[5] = x[2] + x[3] + 14
  /\
  2*x[2]+2*x[5] = sum(i in 1..5) (x[i]) - 4 % multiply with 2
  /\
  32*x[3]+32*x[4] = 13*sum(i in 1..5) (x[i]) % factor out the division
;

output
[
 show(x)
];

Expected Output:
{
  "x": [
    26,
    70,
    38,
    66,
    56
  ],
  "m": 21,
  "_objective": 26
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.