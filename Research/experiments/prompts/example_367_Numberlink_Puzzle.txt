You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 367
- Name: Numberlink Puzzle
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The problem is a Numberlink problem, also known as Arukone and Nanbarinku. The goal is to connect pairs of identical numbers, or 'nodes', so that the entire board is filled. The connections cannot cross each other. The board is a grid of cells, some of which contain a number. Each number appears exactly twice. The problem is to draw a path through adjacent cells (horizontally or vertically) from one number to another of the same number. Each cell in the grid must be included in a path. The problem is represented as a MiniZinc model. The model has three integer parameters: NR (number of rows), NC (number of columns), and NP (number of pairs). The model also has an array InputM of size NR x NC, which represents the initial state of the board. The decision variables are represented as an array SubM of size NR x NC. The constraints ensure that each end node has one connected neighbor and each interior node has two connected neighbors. The problem is to find a solution that satisfies all the constraints.


Input Data (data.dzn):
% # Numberlink Puzzle
% # Author: Otto Janko
% # Source: http://www.janko.at/Raetsel/
% # URL: http://www.janko.at/Raetsel/Arukone/109.a.htm
% size 10 10
%  -  -  -  6  -  -  -  -  -  -
%  -  -  -  -  -  -  -  -  -  -
%  -  -  5  -  1  4  -  3  -  -
%  -  -  -  -  3  -  -  8  -  -
%  -  2  -  2  -  -  -  -  -  -
%  -  4  -  8  -  7  -  -  -  -
%  -  -  -  -  -  -  -  -  -  -
%  -  -  5  -  6  1  -  7  -  -
%  -  -  -  -  -  -  -  -  -  -
%  -  -  -  -  -  -  -  -  -  -
NP = 8;
NR = 10;
NC = 10;
InputM = array2d(1..NR, 1..NC,
        [0,0,0,6,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,5,0,1,4,0,3,0,0,
        0,0,0,0,3,0,0,8,0,0,
        0,2,0,2,0,0,0,0,0,0,
        0,4,0,8,0,7,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,5,0,6,1,0,7,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0]);

MiniZinc Model:
int: NR; % number of rows
int: NC; % number of columns
int: NP; % number of pairs

array[1..NR, 1..NC] of int: InputM;

% decision variables
array[1..NR, 1..NC] of var 1..NP: SubM;

% solve satisfy;
solve :: int_search(array1d(SubM), first_fail, indomain_split, complete) satisfy;

constraint

   % initialize preoccupied squares
   forall(I in 1..NR, J in 1..NC) (
       if InputM[I,J] > 0 then 
           SubM[I,J] = InputM[I,J]
       else 
          true
       endif
   )
   /\
   % "each end node has one connected neighbor and each interior node has two connected neighbors"
   forall(J in 1..NR, K in 1..NC) (
     let {
        var 1..2: the_sum = sum([SubM[J1,K1]=SubM[J,K] | J1 in {J-1,J,J+1}, K1 in {K-1,K,K+1} where J1 in 1..NR /\ K1 in 1..NC /\
                                          % ((J1 = J) + (K1 = K)) = 1
                                          % /\
                                          ((J1 = J-1 /\ K1 = K) \/
                                          (J1 = J+1 /\ K1 = K) \/
                                          (J1 = J /\ K1 = K-1) \/
                                          (J1 = J /\ K1 = K+1)
                                          )
                           ] )
     } in
     if InputM[J,K] != 0 then
         the_sum = 1
     else 
         the_sum = 2
     endif
   )
;


output [
  if j = 1 then "\n" else " " endif ++
    show_int(2,SubM[i,j])
  | i in 1..NR, j in 1..NC
];

%
% Data
%


% # Numberlink Puzzle
% # Author: Otto Janko
% # Source: http://www.janko.at/Raetsel/
% # URL: http://www.janko.at/Raetsel/Arukone/109.a.htm
% size 10 10
%  -  -  -  6  -  -  -  -  -  -
%  -  -  -  -  -  -  -  -  -  -
%  -  -  5  -  1  4  -  3  -  -
%  -  -  -  -  3  -  -  8  -  -
%  -  2  -  2  -  -  -  -  -  -
%  -  4  -  8  -  7  -  -  -  -
%  -  -  -  -  -  -  -  -  -  -
%  -  -  5  -  6  1  -  7  -  -
%  -  -  -  -  -  -  -  -  -  -
%  -  -  -  -  -  -  -  -  -  -

% NP = 8;
% NR = 10;
% NC = 10;
% InputM = array2d(1..NR, 1..NC,
%         [0,0,0,6,0,0,0,0,0,0,
%         0,0,0,0,0,0,0,0,0,0,
%         0,0,5,0,1,4,0,3,0,0,
%         0,0,0,0,3,0,0,8,0,0,
%         0,2,0,2,0,0,0,0,0,0,
%         0,4,0,8,0,7,0,0,0,0,
%         0,0,0,0,0,0,0,0,0,0,
%         0,0,5,0,6,1,0,7,0,0,
%         0,0,0,0,0,0,0,0,0,0,
%         0,0,0,0,0,0,0,0,0,0]);

Expected Output:
{
  "SubM": [
    [
      6,
      6,
      6,
      6,
      1,
      1,
      1,
      1,
      1,
      1
    ],
    [
      6,
      2,
      2,
      2,
      1,
      4,
      4,
      4,
      4,
      1
    ],
    [
      6,
      2,
      5,
      2,
      1,
      4,
      3,
      3,
      4,
      1
    ],
    [
      6,
      2,
      5,
      2,
      3,
      3,
      3,
      8,
      4,
      1
    ],
    [
      6,
      2,
      5,
      2,
      8,
      8,
      8,
      8,
      4,
      1
    ],
    [
      6,
      4,
      5,
      8,
      8,
      7,
      7,
      7,
      4,
      1
    ],
    [
      6,
      4,
      5,
      4,
      4,
      4,
      4,
      7,
      4,
      1
    ],
    [
      6,
      4,
      5,
      4,
      6,
      1,
      4,
      7,
      4,
      1
    ],
    [
      6,
      4,
      4,
      4,
      6,
      1,
      4,
      4,
      4,
      1
    ],
    [
      6,
      6,
      6,
      6,
      6,
      1,
      1,
      1,
      1,
      1
    ]
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.