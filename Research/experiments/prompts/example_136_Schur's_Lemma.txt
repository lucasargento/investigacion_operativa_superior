You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 136
- Name: Schur's Lemma
- Domain: Combinatorial mathematics
- Objective: satisfaction

Problem Description:
---
Title:    Schur's Lemma
Proposer: Toby Walsh
Category: Combinatorial mathematics
---


The problem is to put $n$ balls labelled ${1,...,n}$ into 3 boxes so that for any triple of balls $(x,y,z)$ with $x+y=z$, not all are in the same box. This has a solution iff $n < 14$.
The problem can be formulated as an 0-1 problem using the variables, $M_{ij}$ for $i \in {1,...,n}, j \in {1,2,3}$ with $M_{ij}$ true iff ball $i$ is in box $j$. The constraints are that a ball must be in exactly one box, $M_{i1} + M_{i2} + M_{i3} = 1$ for all $i \in {1,...,n}$. And for each $x+y=z$ and $j \in {1,2,3}$, not $(M_{xj} \wedge M_{yj} \wedge M_{zj}$). This converts to, $(1-M_{xj}) + (1-M_{yj}) + (1-M_{zj}) \geq 1$ or, $M_{xj} + M_{yj} + M_{zj} \leq 2$.

One natural generalization is to consider partitioning into $k$ boxes (for $k>3$).

Ramsey numbers are closely related, and are described in {prob017}.


Input Data (data.dzn):
n = 7;
c = 3;

MiniZinc Model:
int: n; %% number of balls
int: c; %% number of boxes

array[1..n] of var 1..c: box;

constraint forall(i in 1..n-1, j in i+1 .. n - i)(
	   	    box[i] != box[j] \/ 
		    box[i] != box[i+j] \/ 
		    box[j] != box[i+j]);

solve satisfy;

output ["n = ", show(n), ";\nc = ", show(c), ";\nbox = ",show(box),";\n"];

Expected Output:
{
  "box": [
    3,
    2,
    2,
    1,
    1,
    1,
    1
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.