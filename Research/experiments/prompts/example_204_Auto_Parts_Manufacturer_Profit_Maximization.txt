You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 204
- Name: Auto Parts Manufacturer Profit Maximization
- Domain: Manufacturing
- Objective: maximization

Problem Description:
PROBLEM TYPE
LP

INPUT FORMAT 

{
    "time_required": [[TimeRequired for p in 1, ..., P] for m in 1, ..., M],
    "machine_costs": [MachineCosts for m in 1, ..., M],
    "availability": [Availability for m in 1, ..., M],
    "prices": [Prices for p in 1, ..., P],
    "min_batches": [MinBatches for p in 1, ..., P],
    "standard_cost": StandardCost,
    "overtime_cost": OvertimeCost,
    "overtime_hour": OvertimeHour
}


OBJECTIVE
How many batches of each part should the manufacturer produce each month to maximize profit?


Input Data (data.dzn):
NumMachines = 3;
NumParts = 4;
TimeRequired = [|2, 1, 3, 2|4, 2, 1, 2|6, 2, 1, 2|];
MachineCosts = [160, 10, 15];
Availability = [200, 300, 500];
Prices = [570, 250, 585, 430];
MinBatches = [10, 10, 10, 10];
StandardCost = 20;
OvertimeCost = 30;
OvertimeHour = [400, 400, 300];

MiniZinc Model:
% Define parameters
int: NumMachines;
int: NumParts;
array[1..NumMachines, 1..NumParts] of int: TimeRequired;
array[1..NumMachines] of int: MachineCosts;
array[1..NumMachines] of int: Availability;
array[1..NumParts] of int: Prices;
array[1..NumParts] of int: MinBatches;
int: StandardCost;
int: OvertimeCost;
array[1..NumMachines] of int: OvertimeHour;

% Define decision variables
array[1..NumParts] of var 0..1000: Batches; % Number of batches for each part
array[1..NumMachines] of var 0..1000: MachineHours; % Number of hours for each machine

% Define constraints
constraint forall(m in 2..NumMachines) (
    sum(p in 1..NumParts) (TimeRequired[m,p] * Batches[p]) <= Availability[m]
);

constraint forall(p in 1..NumParts) (
    Batches[p] >= MinBatches[p]
);

constraint MachineHours[1] = sum(p in 1..NumParts) (TimeRequired[1,p] * Batches[p]);

constraint MachineHours[1] <= OvertimeHour[1];

% Define objective function
var int: TotalProfit = sum(p in 1..NumParts) (Prices[p] * Batches[p]) - 
                        sum(m in 1..NumMachines) (MachineCosts[m] * MachineHours[m]) - 
                        StandardCost * min(MachineHours[1], OvertimeHour[1]) - 
                        OvertimeCost * max(0, MachineHours[1] - OvertimeHour[1]);

% Maximize total profit
solve maximize TotalProfit;

% Output
output ["Batches: ", show(Batches), "\n", "TotalProfit: ", show(TotalProfit)];

Expected Output:
{
  "Batches": [
    62,
    10,
    12,
    10
  ],
  "MachineHours": [
    190,
    0,
    0
  ],
  "_objective": 14960
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.