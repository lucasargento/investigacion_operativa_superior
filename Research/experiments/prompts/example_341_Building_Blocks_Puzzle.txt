You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 341
- Name: Building Blocks Puzzle
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The Building Blocks puzzle is a logic puzzle where each of four alphabet blocks has a single letter of the alphabet on each of its six sides. In all, the four blocks contain every letter but Q and Z. By arranging the blocks in various ways, you can spell all of the words listed below. The task is to figure out how the letters are arranged on the four blocks. The words to be spelled are: BAKE, ONYX, ECHO, OVAL, GIRD, SMUG, JUMP, TORN, LUCK, VINY, LUSH, WRAP. The constraints of the problem are that the letters in a word must be on a different die and there must be exactly 6 letters on each die. The goal is to find a satisfying assignment of letters to the blocks that allows all the words to be spelled.


MiniZinc Model:
include "globals.mzn"; 
int: n = 4;
set of int: Cube = 1..n;
int: num_words = 12;
int: m = 24;

int: A = 1;
int: B = 2;
int: C = 3;
int: D = 4;
int: E = 5;
int: F = 6;
int: G = 7;
int: H = 8;
int: I = 9;
int: J = 10;
int: K = 11;
int: L = 12;
int: M = 13;
int: N = 14;
int: O = 15;
int: P = 16;
int: R = 17;
int: S = 18;
int: T = 19;
int: U = 20;
int: V = 21;
int: W = 22;
int: X = 23;
int: Y = 24;

array[1..m] of string: alpha = ["A","B","C","D","E","F","G","H","I","J","K","L","M",
                                "N","O","P","R","S","T","U","V","W","X","Y"];

array[1..num_words, 1..n] of int: words = array2d(1..num_words, 1..n,
  [
   B,A,K,E,
   O,N,Y,X,
   E,C,H,O,
   O,V,A,L,
   G,I,R,D,
   S,M,U,G,
   J,U,M,P,
   T,O,R,N,
   L,U,C,K,
   V,I,N,Y,
   L,U,S,H,
   W,R,A,P
  ]);

% decision variable
array[1..m] of var Cube: dice;

solve satisfy;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
  % the letters in a word must be on a different die
  forall(i in 1..num_words) (
    alldifferent([dice[words[i,j]] | j in 1..n])
  )

  /\
  % there must be exactly 6 letters of each die
  % forall(i in 1..n) (
  %   sum(j in 1..m) (bool2int(dice[j] = i)) = 6
  % )
  % /\
  global_cardinality(dice, [i | i in 1..n], [6 | i in 1..n])

  % symmetry breaking (first word is placed)
  % /\ dice[B] = 1 /\ dice[A] = 2 /\ dice[K] = 3 /\ dice[E] = 4
  /\
  % symmetry breaking
  dice[ 1] <= dice[ 7] /\
  dice[ 7] <= dice[13] % /\
  % dice[13] <= dice[19]

;




output [
  "dice: " ++ show(dice) ++ "\n"
]
++
[  
    if j = 1 then "\nDice" ++ show(i) ++ ": " else "" endif ++
    if fix(dice[j]) = i then
      show(alpha[j]) ++ " "
    else "" endif
 
  | i in 1..n, j in 1..m
];

Expected Output:
{
  "dice": [
    2,
    1,
    2,
    2,
    3,
    1,
    3,
    4,
    1,
    2,
    4,
    3,
    4,
    2,
    1,
    3,
    4,
    2,
    3,
    1,
    4,
    1,
    4,
    3
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.