You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 478
- Name: Cumulative Scheduling Constraint
- Domain: Scheduling
- Objective: minimization

Problem Description:
The problem is about cumulative scheduling constraint or scheduling under resource constraints. It involves a set T of tasks described by the TASKS collection. The cumulative constraint enforces that at each point in time, the cumulated height of the set of tasks that overlap that point, does not exceed a given limit. It also imposes for each task of T the constraint origin+duration=end. Each task is represented by a set of rectangles coloured with the same colour: the sum of the lengths of the rectangles corresponds to the duration of the task, while the height of the rectangles corresponds to the resource consumption of the task. The cumulative constraint holds since at each point in time we don't have a cumulated resource consumption strictly greater than the upper limit enforced by the last argument of the cumulative constraint. The goal is to minimize the maximum end time of the tasks.


MiniZinc Model:
include "globals.mzn"; 

int: n = 5;
array[1..n] of var 1..20: origin;
array[1..n] of var 1..20: duration;
array[1..n] of var 1..20: height;
array[1..n] of var 1..20: end;
var 0..10: limitx; % = 7;  % note: the minimum limit is 7

% solve satisfy;
% solve minimize limitx;
solve minimize max(end);

predicate cp1d(array[int] of var int: x, array[int] of var int: y) =
  assert(index_set(x) = index_set(y),
           "cp1d: x and y have different sizes",
    forall(i in index_set(x)) ( x[i] = y[i] ) )
; 


constraint
  % origin = [1,2,3,6,7]
  duration = [3,9,10, 6,2] /\
  % end = [4,11,13,12,9]
  height = [1,2,1,1,3] /\

  % Note: If we use cumulative from globals.mzn we must handle 
  % end = origin + duration by ourselves
  cumulative(origin, duration, height,limitx)
  /\
  forall(i in 1..n) (
    end[i] = origin[i] + duration[i]
  )
;

output [
  "limit   : ", show(limitx), "\n",
  "origin  : ", show(origin), "\n",
  "duration: ", show(duration), "\n",
  "height  : ", show(height), "\n",
  "end     : ", show(end), "\n",

];

Expected Output:
{
  "origin": [
    1,
    1,
    1,
    1,
    7
  ],
  "duration": [
    3,
    9,
    10,
    6,
    2
  ],
  "height": [
    1,
    2,
    1,
    1,
    3
  ],
  "end": [
    4,
    10,
    11,
    7,
    9
  ],
  "limitx": 6,
  "_objective": 11
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.