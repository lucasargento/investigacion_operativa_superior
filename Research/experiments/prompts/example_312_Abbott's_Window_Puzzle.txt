You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 312
- Name: Abbott's Window Puzzle
- Domain: Puzzles
- Objective: maximization

Problem Description:
The Abbott's Window puzzle is a mathematical problem that involves arranging numbers in a grid. The grid is an 8x8 matrix, where each cell can take a value of 0 or 1. The problem has several constraints that must be satisfied. The sum of the values in each row must be twice the corresponding value in array 'a'. Similarly, the sum of the values in each column must be twice the corresponding value in array 'b'. There are also constraints on the diagonals of the grid. The sum of the values in the diagonal starting from the top left to the bottom right must be twice the corresponding value in array 'c'. The sum of the values in the diagonal starting from the top right to the bottom left must be twice the corresponding value in array 'd'. The sum of the values in the diagonal starting from the bottom left to the top right must be twice the corresponding value in array 'e'. The sum of the values in the diagonal starting from the bottom right to the top left must be twice the corresponding value in array 'f'. The corners of the grid must all be 1. The goal of the problem is to maximize the total sum of the values in the grid.


MiniZinc Model:
int: row = 8;
int: col = 8;
  
set of 1..row: R = 1..row;
set of 1..col: C = 1..col;
array[R,C] of var 0..1: x ;
array[R] of var 0..4: a;
array[C] of var 0..4: b;
array[1..row-2] of var 0..4: c;
array[1..col-1] of var 0..4: d; 
array[1..col-1] of var 0..4: e; 
array[1..row-2] of var 0..4: f;

var int: total_sum = sum(i in R,j in C) (x[i,j]);

constraint
   forall(i in R) (
        sum(j in C) (x[i,j]) = 2*a[i]
   )
;
    
constraint 
     forall(j in C) (
        sum(i in R) (x[i,j]) = 2*b[j]
     )
;

constraint 
    forall(i in 2..row-1) (
      sum(k in 1..i) (x[k,i-k+1]) = 2*c[i-1]
    )
;
    
constraint 
    forall(j in 1..col-1) (
        sum(k in j..row) (x[k,col-k+j]) = 2*d[j]
    )
;

constraint 
   forall(j in 1..col-1) (
        sum(k in 1..row-j+1) (x[k,j+k-1]) = 2*e[j]
   )
;

constraint 
   forall(i in 2..row-1) (
        sum(k in i..row) (x[k,k-i+1]) = 2*f[i-1]
   )
;

constraint 
 x[1,1] = 1 /\
 x[row,1] = 1 /\
 x[1,col] = 1 /\
 x[row,col] = 1 
;

% solve satisfy;
solve :: int_search([x[i,j] | i in R, j in C], first_fail, indomain_min, complete) maximize total_sum;
% solve maximize total_sum;


output [
    if i = 1 /\ j = 1 then
       "total_sum: " ++ show(total_sum) ++ "\n"
       else "" endif ++
       if j = 1 then show(i) ++ " : " else "" endif ++
       show(x[i,j]) ++ if j = col then "\n" else " " endif
    | i in R, j in C
];

Expected Output:
{
  "x": [
    [
      1,
      0,
      0,
      1,
      1,
      1,
      1,
      1
    ],
    [
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ],
    [
      1,
      1,
      1,
      0,
      1,
      1,
      0,
      1
    ],
    [
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ],
    [
      1,
      0,
      0,
      0,
      1,
      1,
      0,
      1
    ],
    [
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ]
  ],
  "a": [
    3,
    3,
    4,
    3,
    3,
    4,
    2,
    4
  ],
  "b": [
    3,
    3,
    3,
    3,
    4,
    4,
    2,
    4
  ],
  "c": [
    0,
    1,
    2,
    2,
    3,
    3
  ],
  "d": [
    3,
    3,
    2,
    2,
    2,
    1,
    1
  ],
  "e": [
    3,
    3,
    2,
    2,
    2,
    1,
    1
  ],
  "f": [
    3,
    3,
    2,
    1,
    1,
    1
  ],
  "_objective": 52
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.