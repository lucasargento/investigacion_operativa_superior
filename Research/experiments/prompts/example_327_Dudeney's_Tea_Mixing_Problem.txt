You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 327
- Name: Dudeney's Tea Mixing Problem
- Domain: Optimization
- Objective: minimization

Problem Description:
This problem is known as Dudeney's tea mixing problem. The problem involves three types of tea, each with a different price. The goal is to find the quantity of each type of tea to buy such that the total price is minimized. The total price is calculated as the sum of the quantity of each type of tea multiplied by its price. The total quantity of tea to be bought is 20 pounds and the total price must be equal to 570 (20 pound * 2s 4 1/2d = 20 * (24+4+1/2) = 570). The quantity of each type of tea must be a non-negative integer.


MiniZinc Model:
int: tea = 3;

set of 1..tea: T = 1..tea;

array[T] of int: price;
array[T] of var int: x;
var int: minexp = sum(i in T) (x[i]*price[i]);  % total price

% minimize total prize
% solve minimize minexp;
solve :: int_search(x, first_fail, indomain_min, complete) minimize minexp;

constraint
  forall(i in T) (x[i] >= 0)
  /\
  sum(i in T) (price[i]*x[i]) = 570 % 20 pound * 2s 4 1/2d = 20 * (24+4+1/2) = 570
  /\
  sum(i in T) (x[i]) = 20 % twenty pound

; 

price = [30, 27, 21];


output
[
  "x: " ++ show(x) ++ "\n" ++
  "minexp: " ++ show(minexp) ++ "\n"
];

Expected Output:
{
  "x": [
    10,
    10,
    0
  ],
  "_objective": 570
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.