You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 364
- Name: High IQ Problem
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The problem is known as the 'High IQ Problem'. It involves a square that contains 24 smaller squares, each with a different integral size. The task is to determine the length of the shaded square. The problem is modeled as a constraint satisfaction problem, where each of the 24 smaller squares is represented by a variable (L1 to L24) with a domain of 1 to 200. The shaded square is represented by the variable L25. The constraints include that all the variables must have different values, the variables must be ordered in ascending order, the sum of the squares of the variables L1 to L24 must equal the square of L25, and a set of length constraints that relate the variables to each other. The problem is solved by finding a value for each variable that satisfies all the constraints.


MiniZinc Model:
include "globals.mzn"; 
int: Top = 200; 

var 1..Top:  L1;
var 1..Top:  L2;
var 1..Top:  L3;
var 1..Top:  L4;
var 1..Top:  L5;
var 1..Top:  L6;
var 1..Top:  L7;
var 1..Top:  L8;
var 1..Top:  L9; 
var 1..Top:  L10; 
var 1..Top:  L11; 
var 1..Top:  L12; 
var 1..Top:  L13; 
var 1..Top:  L14; 
var 1..Top:  L15; 
var 1..Top:  L16; 
var 1..Top:  L17; 
var 1..Top:  L18; 
var 1..Top:  L19; 
var 1..Top:  L20; 
var 1..Top:  L21; 
var 1..Top:  L22; 
var 1..Top:  L23; 
var 1..Top:  L24; 
var 1..Top:  L25; 

array[1..25] of var 1..Top: LD = [L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11,L12,L13,L14,L15,L16,L17,L18,L19,L20,L21,L22,L23,L24,L25];

var int:  LHS;
var int:  RHS;

% solve satisfy;
solve :: int_search(LD ++ [LHS, RHS], first_fail, indomain_min, complete) satisfy;

constraint

    all_different(LD)
    /\ 

    % Ordering
    L1 < L2 /\  L2 < L3 /\  L3 < L4 /\  L4 < L5 /\  L5 < L6 /\  L6 < L7 /\  
    L7 < L8 /\  L8 < L9 /\  L9 < L10 /\  L10 < L11 /\  L11 < L12 /\  L12 < L13 /\  
    L13 < L14 /\  L14 < L15 /\  L15 < L16 /\  L16 < L17 /\  L17 < L18 /\  
    L18 < L19 /\  L19 < L20 /\  L20 < L21 /\  L21 < L22 /\  L22 < L23 /\  
    L23 < L24 /\  L24 < L25 /\ 

    % Sum of Squares Constraint
    L1*L1 + L2*L2 + L3*L3 + L4*L4 + L5*L5 + L6*L6 + L7*L7 + L8*L8 + 
    L9*L9 + L10*L10 + L11*L11 + L12*L12 + L13*L13 + L14*L14 + L15*L15 + 
    L16*L16 + L17*L17 + L18*L18 + L19*L19 + L20*L20 + L21*L21 + L22*L22 + 
    L23*L23 + L24*L24 = L25*L25 /\ 

    % Length Constraints
    L1 + L3 = L4 /\  L4 + L1 = L5 /\ 
    L4 + L5 = L7 /\  L5 + L7 = L8 /\ 
    L3 + L4 + L7 = L9 /\  L1 + L5 + L8 = L11 /\ 
    L2 + L12 = L14 /\  L2 + L14 = L15 /\ 
    L2 + L15 = L16 /\  L10 + L11 = L17 /\ 
    L7 + L8 + L9 = L18 /\  L6 + L16 = L19 /\ 
    L6 + L19 = L20 /\  L9 + L18 = L21 /\ 
    L10 + L17 = L22 /\  L14 + L15 = L23 /\ 
    L13 + L20 = L24 /\  L21 + L22 + L23 = L25 /\ 
    L18 + L21 + L24 = L25 /\  L19 + L20 + L24 = L25 /\ 
    L15 + L16 + L19 + L23 = L25 /\ 
    
    % Double check the Answer
    LHS = L1*L1 + L2*L2 + L3*L3 + L4*L4 + L5*L5 + L6*L6 + L7*L7 + 
    L8*L8 + L9*L9 + L10*L10 + L11*L11 + L12*L12 + L13*L13 + L14*L14 + 
    L15*L15 + L16*L16 + L17*L17 + L18*L18 + L19*L19 + L20*L20 + L21*L21 + 
    L22*L22 + L23*L23 + L24*L24 /\ 

    RHS = L25*L25

;

output [
  "LD: ", show(LD),"\n",
  "LHS: ", show(LHS), "\n",
  "RHS: ", show(RHS), "\n",

];

Expected Output:
{
  "L1": 1,
  "L2": 2,
  "L3": 3,
  "L4": 4,
  "L5": 5,
  "L6": 8,
  "L7": 9,
  "L8": 14,
  "L9": 16,
  "L10": 18,
  "L11": 20,
  "L12": 29,
  "L13": 30,
  "L14": 31,
  "L15": 33,
  "L16": 35,
  "L17": 38,
  "L18": 39,
  "L19": 43,
  "L20": 51,
  "L21": 55,
  "L22": 56,
  "L23": 64,
  "L24": 81,
  "L25": 175,
  "LHS": 30625,
  "RHS": 30625
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.