You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 353
- Name: Norwegian Math Olympiad Puzzle
- Domain: Mathematical Puzzles
- Objective: satisfaction

Problem Description:
The problem is a mathematical puzzle from the Norwegian Math Olympiad. The numbers a, b, and c are positive integers. An apple cost $a, a banana costs $b, and a cherry costs $c. The cost of b apples, b bananas, and a + b cherries is $77. The task is to find the cost for one apple, two bananas, and one cherry. The solution should satisfy the following constraints: b*a + b*b + (a+b)*c = 77, y = a + 2*b + c, y > 0, a > 0, b > 0, c > 0. The solution is y=18, which represents the total cost for one apple, two bananas, and one cherry.


MiniZinc Model:
include "globals.mzn"; 

int: total = 77;
var 1..total: a;
var 1..total: b;
var 1..total: c;

var 1..total: y;


solve satisfy;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
    b*a + b*b + (a+b)*c = total 
    /\ y = a + 2*b + c
    /\ y > 0
    /\ a > 0
    /\ b > 0
    /\ c > 0
;

output ["y=\(y)"]; % this only show a single solution: y=18

Expected Output:
{
  "a": 10,
  "b": 1,
  "c": 6,
  "y": 18
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.