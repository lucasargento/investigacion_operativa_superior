You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 561
- Name: Job-Shop Scheduling
- Domain: Scheduling
- Objective: minimization

Problem Description:
The problem is a job-shop scheduling problem. There are a number of jobs and machines. Each job has a specific order in which it needs to be processed by the machines and each job-machine pair has a specific processing time. The goal is to schedule all jobs on the machines such that the time at which the last job is finished (the 'earliest end time') is minimized. The constraints of the problem are that each job must be processed by the machines in the specified order and that a machine can only process one job at a time.


Input Data (data.dzn):
% 
% Jobshop problem
%
%  *  This origin of this problem is from 
%     S. French: "Sequencing and Scheduling : 
%              an introduction to the mathematics of the
%              job-shop", Ellis Horwood Limited, 1982.
%
%  * Tim Duncan wrote about it in his paper
%    "Scheduling Problems and Constraint Logic Programming:
%     A Simple Example and its Solution", AIAI-TR-120, 1990,
%     page 5. 
%     (The paper also includes a program in CHIP 
%     solving the problem.)
%
% Cf 
%   - http://www.hakank.org/minizinc/newspaper.mzn
%   - http://www.hakank.org/minizinc/newspaper0.mzn
%   The former outputs more information than the latter.
%

num_machines = 4;
num_jobs = 4;
max_time = 200;


%
% The times for each job (here reading)
%
job_times = array2d(1..num_jobs, 1..num_machines, 
   [
    % Guard.  FT  Express  Sun
      30,    60,    2,      5,  % Algy
      75,    25,    3,     10,  % Bertie
      15,    10,    5,     30,  % Charlie
       1,     1,    1,     90   % Digby		
 ]);


%
% The order the jobs (here reading) must be done.
%
% (1: Guardian, 2: Financial Time, 3: Express, 4: Sun)
%
% - Algy order   : - FT, Guardian, Express, Sun
% - Bertie order : - Guardian, Express, FT, Sun
% - Charlie order: - Express, Guardian, FT, Sun
% - Digby order  : - Sun, FT, Guardian, Express
%
job_order = array2d(1..num_jobs, 1..num_machines,
  [% indicating the order in which each newspaper
   % must be read
   % Guardian  FT   Express  Sun
       2,      1,     3,     4,  % Algy
       1,      3,     2,     4,  % Bertie
       2,      3,     1,     4,  % Charlie
       3,      2,     4,     1   % Digby
  ]);

MiniZinc Model:
include "globals.mzn"; 

int: num_jobs;
int: num_machines;


array[1..num_jobs, 1..num_machines] of int: job_times;
array[1..num_jobs, 1..num_machines] of int: job_order;

% for cumulative
array[1..num_jobs] of int: one = [1 | i in 1..num_jobs];


% machines x jobs
% Start/End times for each machine and jobs
int: max_time;
array[1..num_jobs, 1..num_machines] of var 0..max_time: job_start;
array[1..num_jobs, 1..num_machines] of var 0..max_time: job_end;

var 0..max_time: earliest_end_time = max([job_end[machine,job] | 
                                              job in 1..num_jobs, machine in 1..num_machines]);

% t1 is before t2
predicate before(var int: t1, var int: t2) = t1 <= t2;

% t1 is after t2
predicate after(var int: t1, var int: t2) = t1 >= t2;


% solve satisfy;
solve :: int_search(
        % [job_start[machine,job] | machine in 1..num_jobs, job in 1..num_machines], 
        % [job_start[machine,job] | machine in 1..num_machines, job in 1..num_jobs],
        array1d(job_start),
        first_fail,
        indomain_split,
        complete
        )
     minimize earliest_end_time;
     % satisfy;


constraint
    % end times
    forall(job in 1..num_jobs, machine in 1..num_machines) (
        job_end[job,machine] = job_start[job,machine] + job_times[job,machine]
    ) % :: domain

    /\ % ensure non-overlaps of the jobs
    forall(machine in 1..num_machines) (
       cumulative([job_start[job,machine] | job in 1..num_jobs],
                  [job_times[job,machine] | job in 1..num_jobs],
                  one,
                  1) % :: domain
    )

    % /\ % testing: non-overlaps of the machines
    % forall(job in 1..num_jobs) (
    %    cumulative([job_start[job,machine] | machine in 1..num_machines],
    %               [job_times[job,machine] | machine in 1..num_machines],
    %               one,
    %               1)
    % )


   /\ % check the job order
   forall(job in 1..num_jobs) (
      forall(machine1,machine2 in 1..num_machines where machine1 < machine2) (
          if job_order[job,machine1] < job_order[job,machine2] then
             before(job_end[job,machine1], job_start[job,machine2])
          else 
             after(job_start[job,machine1], job_end[job,machine2])
          endif
      )
   ) % :: domain
;


%
% Output
%
output 
[
  "\nEarliest end time: " ++ show(earliest_end_time) ++ "\n" ++
  "\nJob times:"
]
++
[ 
  if machine = 1 then "\n" else " " endif ++
    show(job_times[job,machine])
  | job in 1..num_jobs, machine in 1..num_machines
]
++ 
["\n\nMachine order"] 
++
[  if machine = 1 then "\n" else " " endif ++
     show(job_order[job,machine])
   | job in 1..num_jobs, machine in 1..num_machines
]
++
[ "\njob_start:\n", show2d(job_start), "\n",
  "\njob_end:\n", show2d(job_end), "\n" 
] 
++
[ "\n\nSchedule\n"]
++
[
  if machine = 1 then "\n" ++ show(job) ++ " : "  else " " endif ++
       show(job_start[job,machine]) ++ ".." ++ 
       show(job_end[job,machine]) ++ " "
  | job in 1..num_jobs, machine in 1..num_machines
]
++
[ "\n\nEarliest end time: " ++ show(earliest_end_time) ++ "\n" ]
++
["\n"];

Expected Output:
{
  "job_start": [
    [
      95,
      30,
      125,
      133
    ],
    [
      20,
      98,
      95,
      123
    ],
    [
      5,
      20,
      0,
      90
    ],
    [
      125,
      90,
      127,
      0
    ]
  ],
  "job_end": [
    [
      125,
      90,
      127,
      138
    ],
    [
      95,
      123,
      98,
      133
    ],
    [
      20,
      30,
      5,
      120
    ],
    [
      126,
      91,
      128,
      90
    ]
  ],
  "_objective": 138
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.