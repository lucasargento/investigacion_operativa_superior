You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 538
- Name: Programmer Job Assignment
- Domain: Job Scheduling
- Objective: minimization

Problem Description:
The problem is about assigning five programmers to five programming jobs. Each programmer has a preference for each job, ranked from 1 (most preferred) to 5 (least preferred). The goal is to maximize the total preference of the group by minimizing the sum of the preferences. The preference matrix is as follows:

PROGRAMMER     JOB1 JOB2 JOB3 JOB4 JOB5
PROGRAMMER1    4    1    3    5    2
PROGRAMMER2    2    1    3    4    5
PROGRAMMER3    3    2    4    1    5
PROGRAMMER4    2    3    4    5    1
PROGRAMMER5    4    2    3    1    5

The solution should assign each programmer to a job in such a way that the total sum of preferences is minimized. The solution should also ensure that each job is assigned to exactly one programmer and each programmer is assigned exactly one job.


MiniZinc Model:
int: rows;
int: cols;
array[1..rows, 1..cols] of var 0..1: x;
array[1..rows, 1..cols] of int: cost;
array[1..rows] of var 0..cols: jobs;
var int: summax;


%% From assignment_model.mzn
predicate assignment(array[int, int] of var 0..1: x, 
                     array[int, int] of int: cost, 
                     var int: summa
                 ) = 
   forall(i in index_set_1of2(x)) (
        sum(j in index_set_2of2(x)) (x[i,j]) = 1
    ) 
    /\ % more than one task per person?
   if card(index_set_1of2(x)) = card(index_set_2of2(x)) then
       forall(j in index_set_2of2(x)) (
           sum(i in index_set_1of2(x)) (x[i,j]) = 1
       )
   else  
       forall(j in index_set_2of2(x)) (
          sum(i in index_set_1of2(x)) (x[i,j]) <= 1
       )
   endif
   /\  
   summa = sum(i in index_set_1of2(x), j in index_set_2of2(x)) (
        x[i,j]*cost[i,j]
    )
;

%
% converts a binary matrix to a number array
% 
predicate binmatrix2num(array[int,int] of var int: x, array[int] of var int: nums) =

  forall(i in index_set_1of2(x), j in index_set_2of2(x)) (
     nums[i] = j <-> x[i,j] = 1
  )

;

% solve satisfy;
solve :: int_search([x[i,j] | i in 1..rows, j in 1..cols] ++ jobs, first_fail, indomain_max, complete)  minimize summax;
% solve :: int_search([x[i,j] | i in 1..rows, j in 1..cols], first_fail, indomain_min, complete)  satisfy;


constraint
  assignment(x, cost, summax)
  % /\ summax <= 8
  /\
  binmatrix2num(x, jobs)
;

rows = 5;
cols = 5;

cost = array2d(1..rows, 1..cols, [
4, 1, 3, 5, 2,
2, 1, 3, 4, 5,
3, 2, 4, 1, 5,
2, 3, 4, 5, 1,
4, 2, 3, 1, 5]);


output 
[
  "\njobs: ", show(jobs), "\n",
  "summax: ", show(summax)
] ++ 
[
   if j = 1 then "\n" else " " endif ++
   show(x[i,j]) 
   | i in 1..rows, j in 1..cols
] ++ ["\n"];

Expected Output:
{
  "x": [
    [
      0,
      1,
      0,
      0,
      0
    ],
    [
      1,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      1,
      0
    ],
    [
      0,
      0,
      0,
      0,
      1
    ],
    [
      0,
      0,
      1,
      0,
      0
    ]
  ],
  "jobs": [
    2,
    1,
    4,
    5,
    3
  ],
  "summax": 8,
  "_objective": 8
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.