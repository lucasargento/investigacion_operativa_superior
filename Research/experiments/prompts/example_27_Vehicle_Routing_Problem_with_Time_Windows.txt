You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 27
- Name: Vehicle Routing Problem with Time Windows
- Domain: Transportation and Logistics
- Objective: minimization

Problem Description:
The Vehicle Routing Problem with Time Windows (VRPTW) involves the distribution of goods between depots and customers using a set of vehicles. Each vehicle must serve a subset of customers while respecting its capacity, and each customer has a specific demand that must be met within a predefined time window (given by a lower and upper bound). Additionally, there is a cost associated with traveling between customers (and depots) as well as an expected service time at each customer. The objective is to minimize the total transportation cost while meeting all customer demands within their time windows.


Input Data (data.dzn):
CustomerCount = 10;
VehicleCount = 3;
CustomerDemand = [6, 1, 4, 4, 8, 10, 4, 6, 3, 5];
CustomerLBTW = [87, 70, 88, 140, 58, 193, 39, 87, 174, 88];
CustomerUBTW = [10500, 10800, 11400, 15400, 6700, 20300, 6000, 10400, 18000, 10400];
CustomerDistance = [|0, 1, 19, 4, 18, 15, 8, 1, 2, 10|
                     1, 0, 4, 12, 19, 3, 1, 1, 5, 6|
                     7, 9, 0, 16, 5, 10, 11, 2, 2, 8|
                     10, 4, 7, 0, 15, 19, 1, 15, 4, 13|
                     11, 12, 5, 7, 0, 16, 4, 13, 5, 9|
                     15, 16, 4, 16, 14, 0, 18, 6, 10, 4|
                     1, 6, 1, 18, 19, 5, 0, 17, 4, 3|
                     11, 14, 17, 8, 10, 1, 11, 0, 12, 3|
                     3, 4, 4, 19, 15, 4, 18, 19, 0, 10|
                     2, 5, 11, 12, 9, 12, 3, 17, 1, 0|];
CustomerServiceTime = [11, 8, 15, 8, 13, 13, 13, 7, 8, 7];
VehicleCapacity = [31, 33, 36];


MiniZinc Model:
% Parameters
int: CustomerCount; % Number of customers
int: VehicleCount; % Number of vehicles
set of int: Customers = 1..CustomerCount;
set of int: Vehicles = 1..VehicleCount;

array[Customers] of int: CustomerDemand; % Demand of each customer
array[Customers] of int: CustomerLBTW; % Lower bound of time window for each customer
array[Customers] of int: CustomerUBTW; % Upper bound of time window for each customer
array[Customers, Customers] of int: CustomerDistance; % Distance between customers
array[Customers] of int: CustomerServiceTime; % Service time for each customer
array[Vehicles] of int: VehicleCapacity; % Capacity of each vehicle

% Decision Variables
array[Customers, Vehicles] of var 0..1: x; % x[i, k] = 1 if customer i is served by vehicle k
array[Customers] of var int: ArrivalTime; % Arrival time at each customer
array[Customers] of var int: DepartureTime; % Departure time from each customer

% Objective: Minimize total distance traveled by all vehicles
var int: TotalDistance;
constraint TotalDistance = sum(i in Customers, j in Customers, k in Vehicles) (
    CustomerDistance[i, j] * x[i, k] * x[j, k]
);
solve minimize TotalDistance;

% Constraints
constraint forall(k in Vehicles) (
    sum(i in Customers) (CustomerDemand[i] * x[i, k]) <= VehicleCapacity[k]
);

constraint forall(i in Customers) (
    sum(k in Vehicles) (x[i, k]) = 1
);

constraint forall(i in Customers, j in Customers where i != j, k in Vehicles) (
    x[i, k] + x[j, k] <= 1 \/ DepartureTime[i] + CustomerDistance[i, j] <= ArrivalTime[j]
);

constraint forall(i in Customers) (
    ArrivalTime[i] >= CustomerLBTW[i] /\ ArrivalTime[i] <= CustomerUBTW[i]
);

constraint forall(i in Customers) (
    DepartureTime[i] = ArrivalTime[i] + CustomerServiceTime[i]
);

% Symmetry breaking (optional)
constraint forall(k in Vehicles) (
    x[1, k] = 1
);

% Output
output ["Total Distance: \(TotalDistance)\n"];
output ["Vehicle Routes:\n"];
output [show([i | i in Customers where fix(x[i, k]) = 1]) ++ "\n" | k in Vehicles];

Expected Output:
{
  "Assignment": [
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "_objective": 25
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.