You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 176
- Name: Carpool Fairness
- Domain: Transportation
- Objective: minimization

Problem Description:
The problem is about carpool fairness. In this scenario, n people are sharing a carpool for m days. Each person may choose whether to participate in the carpool on each day. The goal is to allocate the daily driving responsibilities 'fairly'. One possible approach is to split the responsibilities based on how many people use the car. So, on a day when k people use the carpool, each person incurs a responsibility of 1/k. That is, for each person i, we calculate his or her driving obligation Oi. We can then require that person i drives no more than Oi times every m days. The problem is to minimize the differences between Oi and the actual value to get as fair schedule as possible.


Input Data (data.dzn):
% 4 week period 4 persons
num_days = 20;
num_people = 4;
participation = array2d(1..num_people, 1..num_days,
  [ 
    % days 1 2 3 4 5
           1,1,1,0,0,  1,1,1,0,0, 1,1,1,0,0,  1,1,1,0,0, % p 1
           1,0,1,0,0,  1,0,1,0,0, 1,0,1,0,0,  1,0,1,0,0, % p 2
           1,1,1,1,1,  1,1,1,1,1, 1,1,1,1,1,  1,1,1,1,1, % p 3
           0,1,1,1,1,  0,1,1,1,1, 0,1,1,1,1,  0,1,1,1,1, % p 4
  ]);

MiniZinc Model:
include "globals.mzn"; 

int: num_days;
int: num_people;

% the days a person want to car pool (and perhaps drive)
array[1..num_people, 1..num_days] of int: participation;

array[1..num_days] of int: day_people = [sum([participation[p,d] | p in 1..num_people]) | d in 1..num_days ];

% the number of days a person should drive to be fair
array[1..num_people] of int: obligation = 
  [ceil(sum([1/day_people[d]*participation[p,d] | d in 1..num_days])) | p in 1..num_people];

int: obligation_diff = sum(obligation) - num_days;


% decision variables

% who will drive at day d
array[1..num_days] of var 1..num_people: driver;

% how many days drives person p
array[1..num_people] of var 1..num_days: num_drives;
array[1..num_people] of var 0..num_people div abs(num_days-sum(obligation)): diffs;

% the objective: number of discrepances between the
% actual driving and the number in obligation[p]
% var 0..num_people*num_days: z = sum(diffs);
var 0..obligation_diff: z = sum(diffs);

var 0..num_people*num_days: pdiff;

var int: mean = sum(diffs) div num_people;

% solve minimize z;
solve :: int_search(diffs ++ driver ++ num_drives, occurrence, indomain_median, complete) minimize pdiff;

constraint
  % person p don't drive no more than obligation[p] days per num_days
  forall(p in 1..num_people) (
    num_drives[p] = sum([bool2int(driver[d]=p)| d in 1..num_days])
    /\
    num_drives[p] <= obligation[p]
    /\
    diffs[p] = abs(obligation[p]-num_drives[p])
  )
  % /\ z = sum(obligation)-num_days
  /\
  z = obligation_diff
  /\
  pdiff = sum([abs(diffs[p1]-diffs[p2]) | p1,p2 in 1..num_people where p1 < p2])
  /\ % a person can only drive when (s)he participates
  forall(d in 1..num_days) (
    driver[d] in { p | p in 1..num_people where participation[p,d] = 1}
    % forall(p in 1..num_people where participation[p,d] = 0) (
    %   driver[d] != p
    % )
  )

  % symmetry breaking
  % /\ value_precede_chain([1,2,3,4,5,6,7,8], driver)

  % increasing(diffs)
;

output [
  "num_people: ", show(num_people), "\n",
  "num_people div abs(num_days-sum(obligation)): ", show(num_people div abs(num_days-sum(obligation))), "\n",
  "num_days: ", show(num_days), "\n",
  "oligation: ",show(obligation), "\n",
  "sum_oligation: ",show(sum(obligation)), "\n",
  "driver: ", show(driver), "\n",
  "num_drives: ", show(num_drives), "\n",
  "diffs: ", show(diffs), "\n",
  "mean: ", show(mean), "\n",
  "z: ", show(z), "\n",
  "pdiff: ", show(pdiff), "\n"
]
++ ["\nDays:\n"] ++
[
  "day " ++ show_int(2,d) ++ " driver: " ++ show(driver[d]) ++ "\n"
  | d in 1..num_days
]
++ ["\nPeople:\n"] ++
[
  "person" ++ show(p) ++ 
  " (obl: " ++ show(obligation[p]) ++ " drives: " ++ show(num_drives[p]) ++  if obligation[p] != fix(num_drives[p]) then "!" else "" endif ++ ") " ++
  " days: " ++ 
         show(join(",", [show(d) | d in 1..num_days where fix(driver[d]) = p])) ++ "\n"
  | p in 1..num_people
]
++ ["\nSchedule: 'X': drives, 'r': rides, '_': don't participates the day"] ++
[
  if d = 1 then "\n" else " " endif ++
    if fix(driver[d] = p) then "X" 
    elseif participation[p,d] = 1 then "r"
    else "_"
    endif
  | p in 1..num_people, d in 1..num_days
]
;


%
% data
%

% original problem: 1 week
% num_days = 5;
% num_people = 4;
% participation = array2d(1..num_people, 1..num_days,
%   [ 
%     % days 1 2 3 4 5
%            1,1,1,0,0, % p 1
%            1,0,1,0,0, % p 2
%            1,1,1,1,1, % p 3
%            0,1,1,1,1, % p 4
%   ]);

Expected Output:
{
  "driver": [
    1,
    3,
    2,
    3,
    3,
    1,
    3,
    2,
    4,
    4,
    1,
    3,
    2,
    4,
    4,
    3,
    3,
    3,
    4,
    4
  ],
  "num_drives": [
    3,
    3,
    8,
    6
  ],
  "diffs": [
    1,
    0,
    0,
    1
  ],
  "pdiff": 4,
  "_objective": 4
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.