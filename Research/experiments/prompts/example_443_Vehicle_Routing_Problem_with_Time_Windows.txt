You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 443
- Name: Vehicle Routing Problem with Time Windows
- Domain: Transportation
- Objective: minimization

Problem Description:
The Vehicle Routing Problem with Time Windows (VRPTW) involves the distribution of goods between depots and customers using VehicleCount vehicles. Each vehicle has to supply CustomerCount customers, and has a limited capacity, VehicleCapacity_i, for each vehicle i. Each customer, j, has an associated demand, CustomerDemand_j, that must be satisfied within the customer-specific time window, defined by the lower and upper bounds, CustomerLBTW_j and CustomerUBTW_j, respectively. The CustomerDistance_{i,j} parameter represents the distance between customer i to customer j, and CustomerServiceTime_j denotes the service time for customer j.


Input Data (data.dzn):
num_customers = 10;
num_vehicles = 3;
customer_demand = [6, 1, 4, 4, 8, 10, 4, 6, 3, 5];
customer_LBTW = [87, 70, 88, 140, 58, 193, 39, 87, 174, 88];
customer_UBTW = [10500, 10800, 11400, 15400, 6700, 20300, 6000, 10400, 18000, 10400];
customer_distance = [|0, 1, 19, 4, 18, 15, 8, 1, 2, 10|1, 0, 4, 12, 19, 3, 1, 1, 5, 6|7, 9, 0, 16, 5, 10, 11, 2, 2, 8|10, 4, 7, 0, 15, 19, 1, 15, 4, 13|11, 12, 5, 7, 0, 16, 4, 13, 5, 9|15, 16, 4, 16, 14, 0, 18, 6, 10, 4|1, 6, 1, 18, 19, 5, 0, 17, 4, 3|11, 14, 17, 8, 10, 1, 11, 0, 12, 3|3, 4, 4, 19, 15, 4, 18, 19, 0, 10|2, 5, 11, 12, 9, 12, 3, 17, 1, 0|];
customer_service_time = [11, 8, 15, 8, 13, 13, 13, 7, 8, 7];
vehicle_capacity = [31, 33, 36];

MiniZinc Model:
% Number of customers and vehicles
int: num_customers;
int: num_vehicles;

% Customer demands, time windows, distances and service times
array[1..num_customers] of int: customer_demand;
array[1..num_customers] of int: customer_LBTW;
array[1..num_customers] of int: customer_UBTW;
array[1..num_customers, 1..num_customers] of int: customer_distance;
array[1..num_customers] of int: customer_service_time;

% Vehicle capacities
array[1..num_vehicles] of int: vehicle_capacity;

% Decision variables
array[1..num_vehicles, 1..num_customers] of var 0..1: x; % x[i,j] = 1 if vehicle i serves customer j
array[1..num_vehicles, 1..num_customers] of var int: arrival_time; % arrival time of vehicle i at customer j

% Objective: Minimize the total distance travelled by all vehicles
var int: total_distance = sum(i in 1..num_vehicles, j in 1..num_customers, k in 1..num_customers) (x[i,j]*x[i,k]*customer_distance[j,k]);
minimize total_distance;

% Constraints
% Each customer is served by exactly one vehicle
constraint forall(j in 1..num_customers) (sum(i in 1..num_vehicles) (x[i,j]) = 1);

% The total demand served by each vehicle does not exceed its capacity
constraint forall(i in 1..num_vehicles) (sum(j in 1..num_customers) (x[i,j]*customer_demand[j]) <= vehicle_capacity[i]);

% The arrival time at each customer is within the customer's time window
constraint forall(i in 1..num_vehicles, j in 1..num_customers) (arrival_time[i,j] >= customer_LBTW[j]*x[i,j] /\ arrival_time[i,j] <= customer_UBTW[j]*x[i,j]);

% The arrival time at each customer is after the departure time from the previous customer
constraint forall(i in 1..num_vehicles, j in 1..num_customers, k in 1..num_customers) (arrival_time[i,j] >= arrival_time[i,k] + customer_service_time[k]*x[i,k] + customer_distance[k,j]*x[i,j]*x[i,k]);

% The arrival time at each customer is before the departure time to the next customer
constraint forall(i in 1..num_vehicles, j in 1..num_customers, k in 1..num_customers) (arrival_time[i,j] + customer_service_time[j]*x[i,j] + customer_distance[j,k]*x[i,j]*x[i,k] <= arrival_time[i,k]);

solve satisfy;

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.