You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 431
- Name: Job Scheduling Minimization
- Domain: Scheduling
- Objective: minimization

Problem Description:
A set of JobCount jobs need to be processed on a set of MachineCount machines in series. All jobs have the same processing order through all the machines, from machine 1 to machine MachineCount. Each machine can work in parallel. The workflow is as follows: the first job of the sequence goes to the first machine to be processed; meanwhile, other jobs wait. When the first machine has processed the first job, it goes to the second machine, and the second job of the sequence starts to be processed by the first machine; this process continues in sequence. The time required to process job j on machine m is ProcessingTime_{j,m}. The problem aims to minimize the total makespan, which is the time when all jobs have been processed. The goal is to find a sequence of jobs that minimizes the makespan.


Input Data (data.dzn):
JobCount = 9;
MachineCount = 12;
ProcessingTime = [| 10, 18, 13, 10, 14, 3, 18, 15, 19, 13, 12, 13
                  | 16, 18, 19, 5, 1, 7, 1, 19, 4, 18, 19, 11
                  | 9, 2, 15, 7, 15, 4, 12, 16, 18, 15, 3, 19
                  | 8, 16, 19, 2, 13, 9, 16, 13, 8, 5, 17, 15
                  | 15, 2, 3, 3, 18, 12, 8, 11, 11, 14, 10, 12
                  | 2, 17, 2, 2, 4, 19, 11, 15, 13, 12, 14, 5
                  | 9, 2, 7, 10, 9, 7, 7, 14, 19, 10, 7, 14
                  | 18, 19, 19, 13, 14, 3, 3, 3, 4, 7, 14, 10
                  | 14, 4, 10, 16, 18, 6, 3, 2, 11, 10, 9, 4 |];

MiniZinc Model:
% Parameters
int: JobCount; % Number of jobs
int: MachineCount; % Number of machines
array[1..JobCount, 1..MachineCount] of int: ProcessingTime; % Processing time for each job on each machine

% Decision Variables
array[1..JobCount] of var 1..JobCount: JobSequence; % Sequence of jobs
array[1..JobCount, 1..MachineCount] of var 0..sum(ProcessingTime) : StartTime; % Start time for each job on each machine

% Constraints
% Each job must be processed once
constraint alldifferent(JobSequence);

% The start time of the first job on the first machine is 0
constraint StartTime[1,1] = 0;

% The start time of each job on the first machine is the end time of the previous job on the first machine
constraint forall(j in 2..JobCount) (
    StartTime[j,1] = StartTime[j-1,1] + ProcessingTime[JobSequence[j-1],1]
);

% The start time of each job on each machine (except the first) is the maximum of the end time of the previous job on the same machine and the end time of the same job on the previous machine
constraint forall(j in 1..JobCount, m in 2..MachineCount) (
    StartTime[j,m] >= StartTime[j,m-1] + ProcessingTime[JobSequence[j],m-1]
);
constraint forall(j in 2..JobCount, m in 2..MachineCount) (
    StartTime[j,m] >= StartTime[j-1,m] + ProcessingTime[JobSequence[j-1],m]
);

% Objective
% Minimize the makespan, which is the end time of the last job on the last machine
var int: Makespan = StartTime[JobCount,MachineCount] + ProcessingTime[JobSequence[JobCount],MachineCount];
solve minimize Makespan;

% Output
output ["Job Sequence: ", show(JobSequence), "\nMakespan: ", show(Makespan)];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.