You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 436
- Name: Transportation Problem
- Domain: Logistics
- Objective: minimization

Problem Description:
This is a transportation problem where there are multiple origins NumberOfOrigins and destinations NumberOfDestinations. Each origin has a certain supply SupplyOfOrigin, and each destination has a certain demand DemandOfDestination. The goal is to minimize the total cost of transportation TransportationCost. The cost of transporting from an origin i to a destination j is given by CostPerUnit_{i,j}. The problem is subject to the constraints that the total supply from each origin and the total demand at each destination must be met.


Input Data (data.dzn):
NumberOfOrigins = 3;
NumberOfDestinations = 7;
SupplyOfOrigin = [1400, 2600, 2900];
DemandOfDestination = [900, 1200, 600, 400, 1700, 1100, 1000];
CostPerUnit = [| 39, 14, 11, 14, 16, 82, 8
               | 27, 9, 12, 9, 26, 95, 17
               | 24, 14, 17, 13, 28, 99, 20 |];

MiniZinc Model:
% Number of origins and destinations
int: NumberOfOrigins;
int: NumberOfDestinations;

% Supply of each origin and demand of each destination
array[1..NumberOfOrigins] of int: SupplyOfOrigin;
array[1..NumberOfDestinations] of int: DemandOfDestination;

% Cost of transporting from an origin to a destination
array[1..NumberOfOrigins, 1..NumberOfDestinations] of int: CostPerUnit;

% Decision variable: amount transported from each origin to each destination
array[1..NumberOfOrigins, 1..NumberOfDestinations] of var 0..max(SupplyOfOrigin): Transport;

% Objective: Minimize the total cost of transportation
minimize sum(i in 1..NumberOfOrigins, j in 1..NumberOfDestinations) (Transport[i,j] * CostPerUnit[i,j]);

% Constraints: The total supply from each origin and the total demand at each destination must be met
constraint forall(i in 1..NumberOfOrigins) (sum(j in 1..NumberOfDestinations) (Transport[i,j]) = SupplyOfOrigin[i]);
constraint forall(j in 1..NumberOfDestinations) (sum(i in 1..NumberOfOrigins) (Transport[i,j]) = DemandOfDestination[j]);

solve satisfy;

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.