You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 519
- Name: Gardner's Graph Coloring
- Domain: Graph Theory
- Objective: satisfaction

Problem Description:
The problem is to color Gardner's graph. The graph is represented by an array of sets, where each set represents the neighbors of a node in the graph. The graph has 110 nodes. The goal is to assign a color to each node, represented by the array x, such that no two adjacent nodes (i.e., nodes that are neighbors) have the same color. There are 4 possible colors, represented by the numbers 1 to 4. The problem is to find a coloring of the graph that satisfies these constraints.


MiniZinc Model:
int: n = 110;
array[1..n] of set of int: neighbors;

% decision variables
array[1..n] of var 1..4: x; % the colors

solve satisfy;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
  forall(i in 1..n, j in neighbors[i]) (
     x[i] != j
  )
;

output [
   show(x)
];

%
% data
%
neighbors = 
[
{},
{1},
{1,2},
{1,3},
{1,4},
{1,5},
{1,6},
{1,7},
{1,8},
{1,9},
{1,10},
{2,3},
{3,4,12},
{4,5,13},
{5,6,14},
{6,7,15},
{7,8,16},
{8,9,17},
{9,10,18},
{1,10,11,19},
{12,13},
{13,14,21},
{14,15,22},
{15,16,23},
{16,17,24},
{17,18,25},
{18,19,26},
{19,20,27},
{21,22},
{22,23,29},
{23,24,30},
{24,25,31},
{25,26,32},
{26,27,33},
{27,28,34},
{29,30},
{30,31,36},
{31,32,37},
{32,33,38},
{33,34,39},
{34,35,40},
{36,37},
{37,38,42},
{38,39,43},
{39,40,44},
{40,41,45},
{42,43},
{43,44,47},
{44,45,48},
{45,46,49},
{47,48},
{48,49,51},
{49,50,52},
{51,52},
{52,53,54},
{54,55},
{2,12},
{12,21,57},
{21,29,58},
{29,36,59},
{36,42,60},
{42,47,61},
{47,51,62},
{51,54,63},
{54,56,64},
{55,56,65},
{53,55,66},
{50,53,67},
{46,50,68},
{41,46,69},
{35,41,70},
{28,35,71},
{1,20,28,72},
{64,65,66,67},
{63,64,74},
{67,68,74,75},
{62,63,75},
{75,76,77},
{68,69,76,78},
{61,62,77},
{77,78,80},
{78,79,81},
{69,70,79,82},
{60,61,80},
{80,81,84},
{81,82,85},
{82,83,86},
{70,71,83,87},
{59,60,84},
{84,85,89},
{85,86,90},
{86,87,91},
{87,88,92},
{71,72,88,93},
{58,59,89},
{89,90,95},
{90,91,96},
{91,92,97},
{92,93,98},
{93,94,99},
{72,73,94,100},
{2,57,58,95},
{2,95,96,102},
{2,96,97,103},
{2,97,98,104},
{2,98,99,105},
{99,100,106},
{100,101,107},
{1,73,101,108},
{1,2,106,107,108,109}
];

Expected Output:
{
  "x": [
    1,
    2,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    3
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.