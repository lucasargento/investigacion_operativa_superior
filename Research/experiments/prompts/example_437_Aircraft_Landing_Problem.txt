You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 437
- Name: Aircraft Landing Problem
- Domain: Scheduling
- Objective: minimization

Problem Description:
The Aircraft Landing Problem (ALP) is the problem of deciding a landing time on an appropriate runway for each aircraft in a given set of TotalAircrafts aircraft such that each aircraft lands within a predetermined time window defined by an EarliestLandingTime and a LatestLandingTime; and separation criteria between the landing of an aircraft i, and the landing of all successive aircraft j, are respected, determined by SeparationTimeMatrix. Each aircraft has a TargetLandingTime, and penalties are incurred for landing after (PenaltyTimeAfterTarget) or before (PenaltyTimeBeforeTarget) this target time.


Input Data (data.dzn):
TotalAircrafts = 10;
EarliestLandingTime = [129, 195, 89, 90, 110, 120, 124, 126, 135, 160];
TargetLandingTime = [155, 258, 98, 106, 123, 135, 138, 140, 150, 180];
LatestLandingTime = [689, 653, 517, 501, 634, 603, 657, 592, 510, 604];
PenaltyTimeAfterTarget = [24, 25, 10, 13, 10, 20, 24, 12, 16, 27];
PenaltyTimeBeforeTarget = [24, 25, 10, 13, 10, 20, 24, 12, 16, 27];
SeparationTimeMatrix = [|99999, 11, 12, 10, 10, 11, 12, 12, 12, 10| 
                        |14, 99999, 10, 12, 12, 10, 13, 14, 11, 13| 
                        |11, 14, 99999, 10, 11, 12, 9, 10, 11, 13| 
                        |8, 10, 11, 99999, 8, 12, 8, 8, 9, 9| 
                        |10, 10, 14, 14, 99999, 10, 8, 14, 11, 10| 
                        |11, 9, 11, 11, 14, 99999, 9, 9, 9, 12| 
                        |12, 13, 13, 8, 14, 14, 99999, 8, 13, 11| 
                        |14, 8, 8, 14, 12, 8, 14, 99999, 8, 12| 
                        |11, 12, 11, 11, 13, 11, 11, 14, 99999, 9| 
                        |11, 9, 10, 10, 8, 14, 8, 14, 9, 99999|];

MiniZinc Model:
% Parameters
int: TotalAircrafts;
array[1..TotalAircrafts] of int: EarliestLandingTime;
array[1..TotalAircrafts] of int: TargetLandingTime;
array[1..TotalAircrafts] of int: LatestLandingTime;
array[1..TotalAircrafts] of int: PenaltyTimeAfterTarget;
array[1..TotalAircrafts] of int: PenaltyTimeBeforeTarget;
array[1..TotalAircrafts, 1..TotalAircrafts] of int: SeparationTimeMatrix;

% Decision Variables
array[1..TotalAircrafts] of var EarliestLandingTime[i]..LatestLandingTime[i]: LandingTime;

% Constraints
constraint forall(i in 1..TotalAircrafts, j in i+1..TotalAircrafts) (
    LandingTime[j] >= LandingTime[i] + SeparationTimeMatrix[i,j]
);

% Objective Function
var int: TotalPenalty = sum(i in 1..TotalAircrafts) (
    if LandingTime[i] > TargetLandingTime[i] then
        (LandingTime[i] - TargetLandingTime[i]) * PenaltyTimeAfterTarget[i]
    elseif LandingTime[i] < TargetLandingTime[i] then
        (TargetLandingTime[i] - LandingTime[i]) * PenaltyTimeBeforeTarget[i]
    else
        0
    endif
);

% Solve
solve minimize TotalPenalty;

% Output
output [ "LandingTime for Aircraft " ++ show(i) ++ ": " ++ show(LandingTime[i]) ++ "\n" | i in 1..TotalAircrafts ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.