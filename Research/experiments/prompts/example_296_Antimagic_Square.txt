You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 296
- Name: Antimagic Square
- Domain: Academic, Recreational
- Objective: satisfaction

Problem Description:
# Problem AntimagicSquare

An anti-magic square of order n is an arrangement of the numbers 1 to n*n in a square,
such that the sums of the n rows, the n columns and the two main diagonals form a sequence
of 2n + 2 consecutive integers.

## Data
  A unique integer n

## Model
  constraints: [AllDifferent](http://pycsp.org/documentation/constraints/AllDifferent), [Maximum](http://pycsp.org/documentation/constraints/Maximum), [Minimum](http://pycsp.org/documentation/constraints/Minimum), [Sum](http://pycsp.org/documentation/constraints/Sum)

## Execution
  - python AntimagicSquare.py -data=[number]

## Links
  - https://en.wikipedia.org/wiki/Antimagic_square
  - https://www.cril.univ-artois.fr/XCSP23/competitions/csp/csp

## Tags
  academic, recreational, xcsp23


Input Data (data.dzn):
n=3;

MiniZinc Model:
include "globals.mzn";

% The unique integer n
int: n;

% The square
array[1..n, 1..n] of var 1..n*n: square;

% The sums of the rows, columns and diagonals
array[1..2*n+2] of var int: sums;

% All elements in the square are different
constraint alldifferent([square[i,j] | i in 1..n, j in 1..n]);

% The sums of the rows
constraint forall(i in 1..n) (
  sums[i] = sum(j in 1..n) (square[i,j])
);

% The sums of the columns
constraint forall(j in 1..n) (
  sums[n+j] = sum(i in 1..n) (square[i,j])
);

% The sums of the diagonals
constraint sums[2*n+1] = sum(i in 1..n) (square[i,i]);
constraint sums[2*n+2] = sum(i in 1..n) (square[i,n-i+1]);

% The sums form a sequence of consecutive integers
constraint increasing(sums);

% Solve
solve satisfy;

% Output
output [ "square = ", show(square), "\n", "sums = ", show(sums), "\n" ];

Expected Output:
{
  "square": [
    [
      4,
      3,
      8
    ],
    [
      9,
      5,
      1
    ],
    [
      2,
      7,
      6
    ]
  ],
  "sums": [
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.