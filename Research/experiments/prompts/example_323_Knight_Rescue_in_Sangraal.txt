You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 323
- Name: Knight Rescue in Sangraal
- Domain: Games
- Objective: maximization

Problem Description:
In the game of Sangraal, the player arrives at a castle where the Foul Fiend has imprisoned 8 knights. Each knight is bound in a different way, which means it will take a different amount of time to free each one. After being freed, each knight needs a certain amount of time to recover before they can join the player. The player has a total of 20 minutes before the sun sets and the Sangraal arrives. The goal is to determine the maximum number of knights that can be rescued and prepared within this time limit. The time to free each knight and the time they need to recover are given as input. The problem is to determine the start and end times for freeing each knight, which knights to rescue, and the total number of knights rescued.


MiniZinc Model:
include "globals.mzn"; 

int: k = 8;

array[1..k] of int: free; % time to free each knight
array[1..k] of int: prep; % time to prepare each knight
int: time_limit;

array[1..k] of var 0..20: start; % start times
array[1..k] of var 0..100: end; % end times
array[1..k] of var 0..1: rescued; % which knigth to be rescued
var 0..k: z = sum(rescued); % number of knights rescused

solve :: int_search(start ++ rescued, first_fail, indomain_split, complete) maximize z;
% solve :: int_search(start ++ rescued, first_fail, indomain_split, complete) satisfy;

constraint  

  forall(i in 1..k) (
     end[i] = start[i] + free[i] + prep[i] 
     /\
     (end[i] <= time_limit <-> rescued[i] = 1)
  )
  /\
  cumulative(start,free,[1 | i in 1..k], 1)
 
  % /\ z = 6 
;

output 
[
  "start  : ", show(start), "\n",
  "free   : ", show(free), "\n",
  "prep   : ", show(prep), "\n",
  "end    : ", show(end), "\n",
  "rescued: ", show(rescued), "\n",
  "z      : ", show(z),"\n"
];

%
% data
%
free = [1, 1, 2,2, 3, 4, 5,6];
prep = [15,5,15,5,10,15,10,5];
time_limit = 20;

Expected Output:
{
  "start": [
    2,
    14,
    0,
    12,
    3,
    15,
    19,
    6
  ],
  "end": [
    18,
    20,
    17,
    19,
    16,
    34,
    34,
    17
  ],
  "rescued": [
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1
  ],
  "_objective": 6
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.