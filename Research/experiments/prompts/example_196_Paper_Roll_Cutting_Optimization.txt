You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 196
- Name: Paper Roll Cutting Optimization
- Domain: Manufacturing
- Objective: minimization

Problem Description:
PROBLEM TYPE: MILP

PROBLEM INFO:

- A paper company produces large rolls of paper with a width of \var{large_roll_width} inches.
- These large rolls are cut into smaller rolls of various widths options to meet customer demand.
- There are \var{M} different types of smaller rolls.
- The demand for rolls of width \var{inch_j} ​is \var{demand_j}​ units.
- The company has \var{N} different cutting patterns available for producing the smaller rolls.
- For pattern \var{i}, the number of rolls of width \var{j} that are produced is \var{pattern_{i,j}}.

INPUT FORMAT: 

{
    "large_roll_width": large_roll_width,
    "roll_width_options": [inch_j for j in 1, ..., M],
    "demands": [demand_j for j in 1, ..., M],
    "patterns": [[pattern_{i,j} for j in 1, ..., M] for i in 1, ..., N]
}

OBJECTIVE: Determine the minimum number of large \var{large_roll_width}-inch rolls needed to fulfill all the orders.

OUTPUT INFO:

- The different cutting patterns applied to the large rolls are detailed in \var{patterns}.
- The total number of large rolls of paper used in this optimization is \var{total_large_rolls_used}.

OUTPUT FORMAT:

{
    "patterns": [
        {
         "pattern": [pattern_j for i in 1, ..., M]
         "amount": amount_i
        }
        for i in 1, ..., N
    ],
    "total_large_rolls_used": total_large_rolls
}


Input Data (data.dzn):
large_roll_width = 70;

demands = [40, 65, 80, 75];

roll_width_options = [17, 14, 11, 8.5];

patterns = array2d(1..49, 1..4, [
    4, 0, 0, 0,
    3, 1, 0, 0,
    3, 0, 1, 0,
    2, 2, 0, 0,
    3, 0, 0, 2,
    2, 1, 2, 0,
    2, 1, 1, 1,
    2, 1, 0, 2,
    2, 0, 3, 0,
    2, 0, 2, 1,
    2, 0, 1, 2,
    1, 3, 1, 0,
    1, 3, 0, 1,
    1, 2, 2, 0,
    1, 2, 1, 1,
    1, 2, 0, 2,
    1, 1, 3, 0,
    0, 5, 0, 0,
    0, 4, 1, 0,
    0, 4, 0, 1,
    0, 3, 2, 0,
    2, 0, 0, 4,
    1, 1, 2, 2,
    1, 1, 1, 3,
    1, 1, 0, 4,
    1, 0, 4, 1,
    1, 0, 3, 2,
    1, 0, 2, 3,
    1, 0, 1, 4,
    0, 3, 1, 2,
    0, 3, 0, 3,
    0, 2, 3, 1,
    0, 2, 2, 2,
    0, 2, 1, 3,
    0, 2, 0, 4,
    0, 1, 5, 0,
    0, 1, 4, 1,
    0, 1, 3, 2,
    0, 0, 6, 0,
    0, 0, 5, 1,
    1, 0, 0, 6,
    0, 1, 2, 4,
    0, 1, 1, 5,
    0, 1, 0, 6,
    0, 0, 4, 3,
    0, 0, 3, 4,
    0, 0, 2, 5,
    0, 0, 1, 6,
    0, 0, 0, 8
]);

MiniZinc Model:
% Parameters
int: large_roll_width;
array[1..4] of int: demands;
array[1..4] of float: roll_width_options;
array[1..49, 1..4] of int: patterns;

% Variables
array[1..49] of var 0..1000: pattern_amounts; % Amount of each pattern to use
var int: total_large_rolls; % Total number of large rolls used

% Constraints
constraint total_large_rolls = sum(pattern_amounts); % Total large rolls is sum of all pattern amounts

% For each type of smaller roll, the total produced must meet or exceed the demand
constraint forall(j in 1..4) (
    sum(i in 1..49) (patterns[i,j] * pattern_amounts[i]) >= demands[j]
);

% Objective: Minimize the total number of large rolls used
solve minimize total_large_rolls;

% Output
output [ "patterns: " ] ++
[ if fix(pattern_amounts[i]) > 0 then
    "{ \"pattern\": " ++ show([patterns[i,j] | j in 1..4]) ++ ", \"amount\": " ++ show(pattern_amounts[i]) ++ " },\n"
  else "" endif | i in 1..49
] ++
[ "total_large_rolls_used: " ++ show(total_large_rolls) ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.