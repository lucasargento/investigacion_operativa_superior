You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 511
- Name: Gardner's Integer Set
- Domain: Number Theory
- Objective: satisfaction

Problem Description:
The problem is based on a property of a set of integers, originally proposed by Martin Gardner in February 1967. The property is that the product of any two integers in the set is one less than a perfect square. The original set of integers is {1,3,8,120}. The task is to find a fifth number that can be added to the set without destroying this property. The solution to this problem is 0. However, there are other sets of five numbers with this property. The problem is to find all such sets in the range of 0 to 10000. The constraints of the problem are that all numbers in the set must be different, the set must be in increasing order, and for all pairs of numbers in the set, the product of the two numbers must be one less than a perfect square. Additionally, the first four numbers in the set must be 1, 3, 8, and 120, and the fifth number must be either less than 1 or greater than 120.


MiniZinc Model:
include "globals.mzn"; 

int: n = 5;
array[1..n] of var 0..1000: x;


% solve satisfy;
solve :: int_search(x, first_fail, indomain_split, complete) satisfy;

constraint
   all_different(x)
   /\
   increasing(x)
   /\
   forall(i, j in 1..n where i !=j) (
     let {
       var 0..10000: p
     } 
     in
      p*p-1 = (x[i]*x[j])
   )

   /\
   (
     (x[1] < 1 /\ x[2] = 1 /\ x[3] = 3 /\ x[4] = 8 /\ x[5] = 120)
     \/ 
     (x[1] = 1 /\ x[2] = 3 /\ x[3] = 8 /\ x[4] = 120 /\ x[5] > 120)
   )
;

output [
  show(x),"\n",

];

Expected Output:
{
  "x": [
    0,
    1,
    3,
    8,
    120
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.