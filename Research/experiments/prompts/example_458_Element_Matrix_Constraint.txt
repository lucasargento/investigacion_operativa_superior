You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 458
- Name: Element Matrix Constraint
- Domain: Constraints
- Objective: satisfaction

Problem Description:
The problem is about a global constraint in MiniZinc called 'element_matrix'. The 'element_matrix' constraint is defined for a two-dimensional matrix MATRIX[1..MAX_I,1..MAX_J]. The constraint holds if the VALUE is equal to the entry MATRIX[INDEX_I,INDEX_J] of the matrix. For example, if we have a 4x3 matrix and the INDEX_I=1 and INDEX_J=3, the constraint holds if the VALUE=7 is equal to the value of the matrix at the position (1,3). The problem is to find the values of INDEX_I, INDEX_J, and VALUE that satisfy the 'element_matrix' constraint for a given matrix.


MiniZinc Model:
int: max_i = 4;
int: max_j = 3;
var 1..max_i: index_i;
var 1..max_j: index_j;
array[1..max_i,1..max_j] of var 0..9: matrix;
var 0..8: value;

predicate element_matrix(var int: index_i, 
                         var int: index_j, 
                         array[int,int] of var int: matrix,
                         var int: value) =
                   matrix[index_i,index_j] = value   
;

predicate cp2d(array[int,int] of var int: x, array[int,int] of var int: y) =
  assert(index_set_1of2(x) = index_set_1of2(y) /\
         index_set_2of2(x) = index_set_2of2(y),
           "cp2d: x and y have different sizes",
     forall(i in index_set_1of2(x), j in index_set_2of2(x)) (
         y[i,j] = x[i,j]
    ) 
  )
; 


solve satisfy;

constraint
  
   cp2d(matrix,array2d(1..max_i,1..max_j, [
                        4,1,7,
                        1,0,8,
                        3,2,1,
                        0,0,6
                    ]))
   /\
   index_i = 1
   /\ 
   index_j = 3
   /\
    value = 7
   /\
   element_matrix(index_i,index_j,matrix, value)
;


output
[
  "index_i: " ++ show(index_i) ++ "\n" ++
  "index_j: " ++ show(index_j) ++ "\n" ++
  "value: " ++ show(value) ++ "\n" 
];

Expected Output:
{
  "index_i": 1,
  "index_j": 3,
  "matrix": [
    [
      4,
      1,
      7
    ],
    [
      1,
      0,
      8
    ],
    [
      3,
      2,
      1
    ],
    [
      0,
      0,
      6
    ]
  ],
  "value": 7
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.