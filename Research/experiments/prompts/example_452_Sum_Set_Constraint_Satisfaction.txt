You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 452
- Name: Sum Set Constraint Satisfaction
- Domain: Constraint Satisfaction
- Objective: satisfaction

Problem Description:
The problem is about implementing the global constraint sum_set in MiniZinc. The sum_set constraint is defined as follows: Given a set SV, a collection of VALUES with attributes 'val' and 'coef', a comparison operator CTR, and a variable VAR, the sum of the 'coef' attributes of the VALUES collection for which the corresponding 'val' values occur in the set SV should satisfy the comparison operator CTR with the variable VAR. For example, if SV = {2, 3, 6}, VALUES = <val-2 coef-7, val-9 coef-1, val-5 coef-7, val-6 coef-2>, CTR = '=', and VAR = 9, the sum_set constraint holds since the sum of the 'coef' attributes 7+2 for which the corresponding 'val' attribute belongs to SV is equal to VAR. The problem is to find such a set SV, collection of VALUES, and variable VAR that satisfy the sum_set constraint.


MiniZinc Model:
int: n = 4;
array[1..n, 1..2] of var 1..9: x;
var set of 1..9: s;
var int: total;

solve satisfy;

predicate sum_set(array[int, 1..2] of var int: a, var set of int: ss, var int: tot, int: xop, var int: cmp_val) =
  let {
    array[1..card(index_set_1of2(a))] of var 0..ub_array(a): tmp
  }
  in
  forall(i in index_set_1of2(a)) (
    (a[i,1] in ss <-> tmp[i] = a[i,2])
    /\
    (not(a[i,1] in ss) -> tmp[i] = 0)
  )
  /\
  tot = sum(tmp)
  /\
  cmp(tot, cmp_val, xop)
;


%
% Since MiniZinc don't handle function variables we use the following
% hack where t is the type of comparison operator.
% t:
%  - 2 :  a <  b
%  - 1 :  a <= b
%    0 :  a  = b
%    1 :  a >= b
%    2 :  a >  b
% else : a != b
%
predicate cmp(var int: a, var int: b, int: t) =
   if     t = -2 then
     a < b
   elseif t = -1 then
     a <= b
   elseif t =  0 then
     a = b
   elseif t =  1 then
     a >= b
   elseif t =  2 then
     a > b
   else
     a != b
   endif
;

predicate cp2d(array[int,int] of var int: x, array[int,int] of var int: y) =
  assert(index_set_1of2(x) = index_set_1of2(y) /\
         index_set_2of2(x) = index_set_2of2(y),
           "cp2d: x and y have different sizes",
     forall(i in index_set_1of2(x), j in index_set_2of2(x)) (
         y[i,j] = x[i,j]
    ) 
  )
; 

constraint

  cp2d(x, array2d(1..n, 1..2, 
  [2, 7,
   9, 1,
   5, 7,
   6, 2
  ]))
  /\
  s = {2,3,6}
  /\
  sum_set(x, s, total, 0, total)
  /\
  total = 9
;

output [
"x: " ++ show(x) ++ "\n"++
"s: " ++ show(s) ++ "\n"++
"total: " ++ show(total) ++ "\n"
];

Expected Output:
{
  "x": [
    [
      2,
      7
    ],
    [
      9,
      1
    ],
    [
      5,
      7
    ],
    [
      6,
      2
    ]
  ],
  "s": {
    "set": [
      [
        2,
        3
      ],
      6
    ]
  },
  "total": 9
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.