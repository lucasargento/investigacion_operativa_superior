You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 122
- Name: Ternary Steiner Problem
- Domain: Combinatorial Mathematics
- Objective: satisfaction

Problem Description:
---
Title:    Steiner triple systems
Proposer: Francisco Azevedo
Category: Combinatorial mathematics
---


The ternary Steiner problem of order n consists of finding a set of $n.(n-1)/6$ triples of distinct integer elements in $\\{1,\dots,n\\}$ such that any two triples have at most one common element. It is a hypergraph problem coming from combinatorial mathematics cite{luneburg1989tools} where n modulo 6 has to be equal to 1 or 3  cite{lindner2011topics}. One possible solution for $n=7$ is {{1, 2, 3}, {1, 4, 5}, {1, 6, 7}, {2, 4, 6}, {2, 5, 7}, {3, 4, 7}, {3, 5, 6}}. The solution contains $7*(7-1)/6 = 7$ triples.

This is a particular case of the more general [Steiner system](http://www.win.tue.nl/~aeb/drg/graphs/S.html).

More generally still, you may refer to Balanced Incomplete Block Designs {prob028}. In fact, a Steiner Triple System with n elements is a BIBD$(n, n.(n-1)/6, (n-1)/2, 3, 1)$


MiniZinc Model:
include "globals.mzn";

int: N = 7; 
int: NB = N *(N-1) div 6;
array[1..NB] of var set of 1..N: Sets;

% solve satisfy;
solve::set_search(Sets, first_fail, indomain_min, complete) satisfy;



constraint
   forall(i in index_set(Sets)) (
      card(Sets[i]) = 3
   )
   /\ 
   forall(i,j in index_set(Sets) where i < j) (
      card( Sets[i] intersect Sets[j]) <= 1
   )
   /\ % symmetry breaking
   decreasing(Sets)

;

output [
       "N: ", show(N), " NB: ", show(NB), "\n",
       "Sets: ", show(Sets)
];

Expected Output:
{
  "Sets": [
    {
      "set": [
        [
          1,
          3
        ]
      ]
    },
    {
      "set": [
        1,
        [
          4,
          5
        ]
      ]
    },
    {
      "set": [
        1,
        [
          6,
          7
        ]
      ]
    },
    {
      "set": [
        2,
        4,
        6
      ]
    },
    {
      "set": [
        2,
        5,
        7
      ]
    },
    {
      "set": [
        [
          3,
          4
        ],
        7
      ]
    },
    {
      "set": [
        3,
        [
          5,
          6
        ]
      ]
    }
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.