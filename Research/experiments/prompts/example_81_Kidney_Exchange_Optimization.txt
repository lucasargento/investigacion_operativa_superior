You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 81
- Name: Kidney Exchange Optimization
- Domain: Healthcare and Human Systems
- Objective: maximization

Problem Description:
This problem simulates a kidney exchange program where individuals can donate and receive kidneys in a cycle or exchange system. The goal is to maximize the number of exchanges while ensuring that every person who donates a kidney also receives one.


Input Data (data.dzn):
num_people = 8;

% Binary compatibility matrix (donor-to-recipient adjacency matrix)
compatible = array2d(1..num_people, 1..num_people, [
    0, 1, 1, 0, 0, 0, 0, 0,  % Person 1 can donate to 2, 3
    1, 0, 0, 0, 0, 1, 0, 0,  % Person 2 can donate to 1, 6
    1, 0, 0, 1, 0, 0, 1, 0,  % Person 3 can donate to 1, 4, 7
    0, 1, 0, 0, 0, 0, 0, 0,  % Person 4 can donate to 2
    0, 1, 0, 0, 0, 0, 0, 0,  % Person 5 can donate to 2
    0, 0, 0, 0, 1, 0, 0, 0,  % Person 6 can donate to 5
    0, 0, 0, 0, 0, 0, 0, 1,  % Person 7 can donate to 8
    0, 0, 1, 0, 0, 0, 0, 0   % Person 8 can donate to 3
]);


MiniZinc Model:
include "globals.mzn"; 

% -----------------------------
% 1) PARAMETERS
% -----------------------------

int: num_people;  

% Binary compatibility matrix: 
% `compatible[i,j] = 1` if person `i` can donate to person `j`, otherwise `0`.
array[1..num_people, 1..num_people] of int: compatible;

% -----------------------------
% 2) DECISION VARIABLES
% -----------------------------

% x[p] = recipient of the kidney donated by person `p` (or 0 if not donating)
array[1..num_people] of var 0..num_people: x;

% Binary matrix representation of the exchanges
array[1..num_people, 1..num_people] of var 0..1: y;

% Total number of kidney exchanges performed
var 0..num_people: z = sum([bool2int(x[i] > 0) | i in 1..num_people]);

% -----------------------------
% 3) OBJECTIVE FUNCTION
% -----------------------------

% Maximize the number of successful kidney exchanges
solve :: int_search(
      x ++ [y[p,i] | p,i in 1..num_people], 
      first_fail, 
      indomain_random,  
      complete) 
    maximize z;

% -----------------------------
% 4) CONSTRAINTS
% -----------------------------

% (C1) Ensure a valid kidney exchange cycle
constraint
   alldifferent_except_0(x)  
   /\
   forall(p in 1..num_people) (
     % If this person does not donate a kidney
     (
      x[p] = 0 
      /\ sum([y[p,i] | i in 1..num_people]) = 0 
      /\ sum([y[i,p] | i in 1..num_people]) = 0
     ) 
     \/
     % If this person donates, the recipient must also donate to someone else
     (
       x[p] in {i | i in 1..num_people, compatible[p,i] = 1} % Person `p` must donate to a compatible recipient
       /\ x[x[p]] > 0  % The recipient must also participate in a cycle
       /\ sum([y[p,i] | i in 1..num_people]) = 1 
       /\ sum([y[i,p] | i in 1..num_people]) = 1 
     )
   );

% -----------------------------
% 5) OUTPUT
% -----------------------------

output [
  "Total Exchanges: ", show(z), "\n",
  "Kidney Exchange Assignments:\n"
]
++
[
  if fix(x[i] = 0) then 
     "Person " ++ show(i) ++ ": No donation\n"
  else 
     "Person " ++ show(i) ++ " â†’ Person " ++ show(x[i]) ++ "\n"
  endif  
  | i in 1..num_people
]
++
[ "\nTotal Successful Exchanges: ", show(z), "\n" ];

Expected Output:
{
  "x": [
    0,
    6,
    7,
    0,
    2,
    5,
    8,
    3
  ],
  "y": [
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ]
  ],
  "_objective": 6
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.