You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 26
- Name: Dirichlet Problem for Laplace's Equation
- Domain: Mathematical Modeling
- Objective: minimization

Problem Description:
The problem is to solve the Dirichlet problem for Laplace's equation using Leibman's five-point finite-difference approximation. The problem is defined on a grid of size r x c, where r and c are integers. Each cell in the grid has a value between Z and M, where Z and M are floating point numbers. The value of a cell is determined by the average of its four neighboring cells (top, bottom, left, and right). The problem is to find the values of all cells in the grid that satisfy this condition. The objective is to minimize the value of the cell at position (1,1).


Input Data (data.dzn):
Z = 0.0;
M = 100.0;
r = 4;
c = 4;
x = array2d(0..r, 0..c,
  [
  Z,M,M,M,Z,
  Z,_,_,_,Z, 
  Z,_,_,_,Z, 
  Z,_,_,_,Z,
  Z,Z,Z,Z,Z
  ]);

MiniZinc Model:
% 
% Laplace problem in MiniZinc.
% 
% From the CLP(R) laplace example:
% """
% *************************************
% CLP(R) Version 1.1 - Example Programs
% *************************************
%
% Solve the Dirichlet problem for Laplace's equation using
% Leibman's five-point finit-differenc approximation. 
% The goal ?- go1 is a normal example, while the goal ?- go2
% shows output constraints for a small region where the boundary conditions
% are not specified.
% """
% 
% Notes: 
%   - This is a MIP problem. Not many FlatZinc solver can solve it. Here's
%     the one that give at least some correct example:
%      * G12/mip
%      * ECLiPSe/eplex (MIP solver)
%      * Gecode (kind of, since it returns the same solution "infinitely")
%     
%   - I later realized that the MiniZinc distribution has a model
%     of this problem, 
%       tutorial/laplace.mzn
%     though with a different setup of the problem instance.
%

% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com
% See also my MiniZinc page: http://www.hakank.org/minizinc/
%

% include "globals.mzn"; 

int: r;
int: c;
float: Z; % zero
float: M; % max value

% decision variables
array[0..r, 0..c] of var Z..M: x;


% solve satisfy;
solve :: float_search (
        [x[i,j] | i in 0..r, j in 1..c], 
        0.0001, 
        input_order, 
        indomain_reverse_split, 
        complete) 
    % satisfy;
    minimize x[1,1]; % To keep Gecode/fz happier.

constraint
   forall(i in 1..r-1, j in 1..c-1) (
      4.0*x[i,j] = x[i-1,j] + x[i,j-1] + x[i+1,j] + x[i,j+1]
   )
;

output [
  if j = 0 then "\n" else " " endif ++
    show_float(8,2, x[i,j])
  | i in 0..r, j in 0..c
];


% % Instance from CLP(R) laplace example
% r = 10;
% c = 10;
% Z = 0.0;
% M = 100.0;
% x = array2d(0..r,0..c, 
%    [
%     Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,_,_,_,_,_,_,_,_,_,M,
%     M,M,M,M,M,M,M,M,M,M,M
%    ]);


%% The problem instance from MiniZinc's tutorial/laplace.mzn
% Z = 0.0;
% M = 100.0;
% r = 4;
% c = 4;
% x = array2d(0..r, 0..c,
%   [
%   Z,M,M,M,Z,
%   Z,_,_,_,Z, 
%   Z,_,_,_,Z, 
%   Z,_,_,_,Z,
%   Z,Z,Z,Z,Z
%   ]);


Expected Output:
{
  "x": [
    [
      0.0,
      100.0,
      100.0,
      100.0,
      0.0
    ],
    [
      0.0,
      42.8571428571429,
      52.6785714285715,
      42.8571428571429,
      0.0
    ],
    [
      0.0,
      18.75,
      25.0,
      18.75,
      0.0
    ],
    [
      0.0,
      7.14285714285715,
      9.82142857142858,
      7.14285714285715,
      0.0
    ],
    [
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ]
  ],
  "_objective": 42.8571428571429
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.