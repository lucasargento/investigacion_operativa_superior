You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 449
- Name: Diet Problem
- Domain: Nutrition
- Objective: minimization

Problem Description:
Consider a diet problem. Given a set of foods FoodSet and a set of nutrients NutrientSet which is the union of nutrients with minimum requirements MinReqNutrients and nutrients with maximum requirements MaxReqNutrients. Each food j has a cost CostPerFood_j and the amount of each nutrient i it contains is AmountPerNutrient_{i,j}. The problem aims to minimize the total cost of buying foods. It is constrained that the total amount of each nutrient i with minimum requirements in the foods bought is at least MinReqAmount_i and the total amount of each nutrient i with maximum requirements in the foods bought is at most MaxReqAmount_i. How to decide the amount of each food j to buy ?


Input Data (data.dzn):
FoodNum = 8;
NutrientNum = 6;
CostPerFood = [3.19, 2.59, 2.29, 2.89, 1.89, 1.99, 1.99, 2.49];
FoodMin = [2, 2, 2, 2, 2, 2, 2, 2];
FoodMax = [10, 10, 10, 10, 10, 10, 10, 10];
MinReqAmount = [500, 400, 0, 0, 0, 1600];
MaxReqAmount = [20000, 20000, 20000, 20000, 50000, 24000];
AmountPerNutrient = [|60, 20, 10, 15, 938, 295
                     |8, 0, 20, 20, 2180, 770
                     |8, 10, 15, 10, 945, 440
                     |40, 40, 35, 10, 278, 430
                     |15, 35, 15, 15, 1182, 315
                     |70, 30, 15, 15, 896, 400
                     |25, 50, 25, 15, 1329, 370
                     |60, 20, 15, 10, 1397, 450|];

MiniZinc Model:
% Parameters
int: FoodNum;
int: NutrientNum;
array[1..FoodNum] of int: CostPerFood;
array[1..FoodNum] of int: FoodMin;
array[1..FoodNum] of int: FoodMax;
array[1..NutrientNum] of int: MinReqAmount;
array[1..NutrientNum] of int: MaxReqAmount;
array[1..FoodNum, 1..NutrientNum] of int: AmountPerNutrient;

% Decision Variables
array[1..FoodNum] of var FoodMin[1]..FoodMax[1]: FoodAmount;

% Objective
var int: TotalCost = sum(j in 1..FoodNum)(CostPerFood[j]*FoodAmount[j]);
minimize TotalCost;

% Constraints
constraint forall(i in 1..NutrientNum)(
    sum(j in 1..FoodNum)(AmountPerNutrient[j,i]*FoodAmount[j]) >= MinReqAmount[i] /\
    sum(j in 1..FoodNum)(AmountPerNutrient[j,i]*FoodAmount[j]) <= MaxReqAmount[i]
);

solve satisfy;
output [ "FoodAmount: \(FoodAmount)\nTotalCost: \(TotalCost)\n" ];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.