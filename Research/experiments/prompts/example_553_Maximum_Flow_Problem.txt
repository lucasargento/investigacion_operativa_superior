You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 553
- Name: Maximum Flow Problem
- Domain: Network Optimization
- Objective: maximization

Problem Description:
The Maximum Flow Problem is a network optimization problem. Given a network G = (V, E), where V is a set of nodes and E within V x V is a set of arcs, the goal is to maximize the flow from one given node s (source) to another given node t (sink) subject to conservation of flow constraints at each node and flow capacities on each arc. The capacity of each arc is represented by an array 'a', where a[i,j] is the capacity of arc (i,j). The elementary flow through each arc is represented by an array 'x', where x[i,j] is the flow through arc (i,j). The total flow from the source to the sink is represented by the variable 'flow'. The problem is to find the values of 'x' and 'flow' that maximize the total flow through the network, subject to the constraints that the flow through each arc must be non-negative and not exceed the capacity of the arc, and the total flow into and out of each node must be equal, except for the source (which only has outgoing flow) and the sink (which only has incoming flow).


MiniZinc Model:
int: n;

% set of arcs 
int: num_edges;
array[1..num_edges, 1..2] of 1..n: E;

% a[i,j] is capacity of arc (i,j) 
array[1..num_edges] of int: a;

% source node 
1..n: s;

% sink node 
1..n: t;

% x[i,j] is elementary flow through arc (i,j) to be found 
array[1..num_edges] of var int: x;

% total flow from s to t 
var int: flow; %, >= 0;


% objective is to maximize the total flow through the network 
solve maximize flow;

constraint 
  flow >= 0
  /\
  flow <= 100
  /\
  forall(i in 1..num_edges) (
    x[i] >= 0
    /\
    x[i] <= a[i]
  )
  /\
  forall(i in 1..n) (
      % node[i] is conservation constraint for node i 
      % 
      % summary flow into node i through all ingoing arcs 
      sum(k in 1..num_edges where E[k,2] = i) (x[k]) + flow*bool2int(i = s)
      = % must equal 
      % summary flow from node i through all outgoing arcs 
      sum(k in 1..num_edges where E[k,1] = i) (x[k]) + flow*bool2int(i = t)
  )
;

%
% data
%

% """
% These data correspond to an example from [Christofides]. 
%
% Optimal solution is 29 
% """
n = 9;
s = 1;
t = n;

num_edges = 14;
E = array2d(1..num_edges, 1..2,
[
       1, 2, 
       1, 4,
       2, 3,
       2, 4,
       3, 5,
       3, 8,
       4, 5,
       5, 2,
       5, 6,
       5, 7,
       6, 7,
       6, 8,
       7, 9,
       8, 9]);

a = [14,23,10, 9,12,18,26,11,25, 4, 7, 8,15,20];

output
[
  "x: " ++ show(x) ++ "\n" ++
  "flow: " ++ show(flow)
];

Expected Output:
{
  "x": [
    10,
    19,
    10,
    0,
    0,
    10,
    19,
    0,
    15,
    4,
    7,
    8,
    11,
    18
  ],
  "flow": 29,
  "_objective": 29
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.