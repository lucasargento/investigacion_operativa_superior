You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 406
- Name: Metal Extraction Optimization
- Domain: Resource Management
- Objective: maximization

Problem Description:
There are two ways to extract a metal from mined ores . The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution . Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution . There can be at most 1500 units of water 1350 units of pollution . How many of each type of processes should be performed to maximize the amount of metal extracted ?


MiniZinc Model:
var int: J; 
% number of process P
var int: P;

% number of processes are non-negative
constraint J >= 0;
constraint P >= 0;

% there can be at most 1500 units of water
% process J uses 8 units of water and process P uses 6 units of water
constraint 8*J + 6*P <= 1500;

% there can be at most 1350 units of pollution
% process J produces 3 units of pollution and process P produces 5 units of pollution
constraint 3*J + 5*P <= 1350;

% process J extracts 5 units of metal and process P extracts 9 units of metal
var int: metal = 5*J + 9*P;

% maximize the amount of metal extracted
solve maximize metal;

% output
output ["Process J: ", show(J), "\n", "Process P: ", show(P), "\n", "Max metal: ", show(metal)];

Expected Output:
{
  "J": 0,
  "P": 250,
  "_objective": 2250
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.