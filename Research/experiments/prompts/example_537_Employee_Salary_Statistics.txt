You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 537
- Name: Employee Salary Statistics
- Domain: Human Resources
- Objective: satisfaction

Problem Description:
A human resource office has information about all employees including: salary, marital status, age, etc. The task is to create a decision model that calculates minimal, maximal, and average salaries along with a number of high-paid employees using rules like 'Salary > 85000'. The data includes the following fields: Name, Marital Status, Gender, Age, and Salary. The model should also calculate the mean age of the employees and identify the employees who are low paid (salary <= 30000).


MiniZinc Model:
include "globals.mzn"; 

int: n = 12; 

enum marital = {Married,Single};
enum gender = {Female,Male};
enum name = {Robinson,Warner,Stevens,White,Smith,Green,Brown,Klaus,Houston,Long,Short,Doe};

array[1..n,1..5] of int: people = 
array2d(name,1..5, 
[
Robinson,Married,Female,25, 20000,
Warner  ,Married,Male  ,45,150000,
Stevens ,Single ,Male  ,24, 35000,
White   ,Married,Female,32, 75000,
Smith   ,Single ,Male  ,46,110000,
Green   ,Married,Female,28, 40000,
Brown   ,Married,Male  ,32, 65000,
Klaus   ,Married,Male  ,54, 85000,
Houston ,Single ,Female,47, 35000,
Long    ,Married,Male  ,29, 40000,
Short   ,Single ,Male  ,22, 20000,
Doe     ,Single ,Female,21, 21000,
]);

% decision variables

% salaries statistics
var int: max_salaries = max([people[p,5] | p in name]);
var int: min_salaries = min([people[p,5] | p in name]);
var int: avg_salaries = sum([people[p,5] | p in name]) div n ;

% high paid
var set of name: high_paid = { p | p in name where people[p,5] > 85000 };
var int: num_high_paid = card(high_paid);

solve satisfy;
% solve :: int_search(x, first_fail, indomain_min, complete) satisfy;

constraint
  true
;

output 
[
 "min: \(min_salaries)\n",
 "avg: \(avg_salaries)\n",
 "max: \(max_salaries)\n\n",
 "num_high_paid: \(num_high_paid) (\(high_paid))\n",

 % extras
 "low paid: \([p | p in name where people[p,5] <= 30000])\n",

 "mean age: \(sum([people[p,4] | p in name]) div n )\n"
];

Expected Output:
{}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.