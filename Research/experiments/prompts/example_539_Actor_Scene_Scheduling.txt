You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 539
- Name: Actor Scene Scheduling
- Domain: Scheduling
- Objective: minimization

Problem Description:
This problem is a port of the ILOG OPL example talent.mod (and talent.dat) to MiniZinc. The problem involves a set of actors and scenes. Each actor has a pay rate and each scene has a duration. An actor can be in multiple scenes. The goal is to minimize the total cost of having actors wait between their scenes. The cost of an actor waiting is calculated as the actor's pay rate times the duration of the scenes they are not in but occur between their first and last scenes. The problem also involves determining the order of the scenes and the slots in which they occur. The constraints ensure that each actor's first and last slots are correctly calculated based on the scenes they are in, and that the waiting time for each actor is correctly calculated. The problem also ensures that the scene and slot assignments are inverses of each other, meaning that if a scene is assigned to a slot, that slot is assigned to that scene.


MiniZinc Model:
include "globals.mzn"; 

int: numActors;
set of int: Actors = 1..numActors;
array[Actors] of int: actorPay;
int: numScenes;
set of int: Scenes = 1..numScenes;
array[Scenes] of int: sceneDuration;

array[Actors,Scenes] of int: actorInScene;

array[Scenes] of var Scenes: scene;
array[Scenes] of var Scenes: slot;

% First and last slots where each actor plays
array[Actors] of var int: firstSlot;
array[Actors] of var int: lastSlot;

% Expression for the waiting time for each actor
array[Actors] of var int: actorWait;

% Expression representing the global cost
var 0..100: idleCost = sum(a in Actors) (actorPay[a] * actorWait[a]);

solve :: int_search(scene, first_fail, indomain_min, complete) minimize idleCost;
% solve :: int_search(scene, "first_fail", "indomain_min", "complete") satisfy;
% solve :: labelling_ff minimize idleCost;


constraint
 % idleCost <= 17
 % /\
 forall(a in Actors) ( 
    firstSlot[a] >= 0 
    /\
    minimum(firstSlot[a], [slot[s] | s in Scenes where actorInScene[a,s] = 1])
 )
 /\
 forall(a in Actors) (
    lastSlot[a] >= 0 
    /\
    maximum(lastSlot[a], [slot[s] | s in Scenes where actorInScene[a,s] = 1])
 )
 /\
 forall(a in Actors) ( 
    actorWait[a] >= 0
    /\
    actorWait[a] = sum(s in Scenes where actorInScene[a, s] = 0)  (
         (sceneDuration[s] * bool2int(firstSlot[a] <= slot[s] /\ slot[s] <= lastSlot[a]))
    )
 )
 /\ % use the slot-based secondary model
 inverse(scene, slot)

;

output [
  "idleCost: ", show(idleCost), "\n",
  "slot: ", show(slot), "\n",
  "scene: ", show(scene), "\n"
];


numActors = 5;
actorPay = [1, 1, 1, 1, 1];
numScenes = 9;
sceneDuration = [2, 4, 1, 3, 3, 2, 5, 7, 6];
actorInScene = array2d(Actors, Scenes, 
        [1, 1, 0, 1, 0, 1, 1, 0, 1,
         1, 1, 0, 1, 1, 1, 0, 1, 0,
         1, 1, 0, 0, 0, 0, 1, 1, 0,
         1, 0, 0, 0, 1, 1, 0, 0, 1,
         0, 0, 1, 0, 1, 1, 1, 1, 0]);

Expected Output:
{
  "scene": [
    3,
    8,
    2,
    7,
    1,
    5,
    6,
    4,
    9
  ],
  "slot": [
    5,
    3,
    1,
    8,
    6,
    7,
    4,
    2,
    9
  ],
  "firstSlot": [
    3,
    2,
    2,
    5,
    1
  ],
  "lastSlot": [
    9,
    8,
    5,
    9,
    7
  ],
  "actorWait": [
    3,
    5,
    0,
    3,
    6
  ],
  "_objective": 17
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.