You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 263
- Name: All Interval Series
- Domain: Music Theory
- Objective: satisfaction

Problem Description:
# Problem AllInterval

Given the twelve standard pitch-classes (c, c#, d, ...), represented by numbers 0,1,...,11,
find a series in which each pitch-class occurs exactly once and in which the musical intervals
between neighboring notes cover the full set of intervals from the minor second (1 semitone) to the major seventh (11 semitones).
That is, for each of the intervals, there is a pair of neighboring pitch-classes in the series, between which this interval appears.
Elliott Carter often bases his all-interval sets on the list generated by Bauer-Mendelberg and Ferentz and uses them as a "tonic" sonority.

![Carter All-Interval](https://pycsp.org/assets/notebooks/figures/Carter_all-interval_sets.png)

The problem of finding such a series can be easily formulated as an instance of a more general arithmetic problem.
Given a positive integer n, find a sequence x of n numbers such that:
  - x is a permutation of {0,1,...,n-1};
  - the interval sequence y = <|x1-x0|, |x2-x1|, ...>  is a permutation of {1,2,...,n-1}.
A sequence satisfying these conditions is called an all-interval series of order n;
the problem of finding such a series is the all-interval series problem of order n.

### Example
  For n=8, a solution is:
  ```
    1 7 0 5 4 2 6 3
  ```

## Data
  a number n, the size of the sequence

## Model
  There are two variants:
  - a main variant;
  - a variant 'aux' involving auxiliary variables.

  You can also find a step-by-step modeling process in this [Jupyter notebook](http://pycsp.org/documentation/models/CSP/AllInterval/).

  constraints: [AllDifferent](http://pycsp.org/documentation/constraints/AllDifferent)

## Execution
  - python AllInterval.py -data=number [-solve]
  - python AllInterval.py -data=number -variant=aux [-solve]

## Tags
  academic, notebook


Input Data (data.dzn):
n=8

MiniZinc Model:
include "globals.mzn";

% the size of the sequence
int: n;

% the sequence
array[0..n-1] of var 0..n-1: x;

% the interval sequence
array[1..n-1] of var 1..n-1: y;

% each pitch-class occurs exactly once
constraint alldifferent(x);

% the musical intervals between neighboring notes cover the full set of intervals
constraint alldifferent(y);

% calculate the interval sequence
constraint forall(i in 1..n-1)(y[i] = abs(x[i] - x[i-1]));

solve satisfy;

output ["x: " ++ show(x) ++ "\n" ++ "y: " ++ show(y) ++ "\n"];

Expected Output:
{
  "x": [
    3,
    4,
    2,
    5,
    1,
    6,
    0,
    7
  ],
  "y": [
    1,
    2,
    3,
    4,
    5,
    6,
    7
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.