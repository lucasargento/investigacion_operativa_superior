You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 229
- Name: Factory Production Optimization
- Domain: Manufacturing
- Objective: maximization

Problem Description:
What selling, storing and manufacturing policy should the company pursue in order to maximize profit? The company has M machines and produces K different products. Each product k has a profit of Profit. The time taken to manufacture product k on machine m is given by Time. There are maintenance times for each machine m in each time period i, denoted by Maintain. The limit for storing product k for time period i is given by Limit, and the company has a store price of StorePrice. The company aims to keep a quantity of KeepQuantity for product k, and there are WorkHours working hours available for production.


Input Data (data.dzn):
num_machines = [4, 2, 3, 1, 1];
profit = [10, 6, 8, 4, 11, 9, 3];
time = [|0.5, 0.1, 0.2, 0.05, 0.0
        |0.7, 0.2, 0.0, 0.03, 0.0
        |0.0, 0.0, 0.8, 0.0, 0.01
        |0.0, 0.3, 0.0, 0.07, 0.0
        |0.3, 0.0, 0.0, 0.1, 0.05
        |0.5, 0.0, 0.6, 0.08, 0.05|];
maintain = [|1, 0, 0, 0, 1, 0
            |0, 0, 0, 1, 1, 0
            |0, 2, 0, 0, 0, 1
            |0, 0, 1, 0, 0, 0
            |0, 0, 0, 0, 0, 1|];
limit = [|500, 600, 300, 200, 0, 500
         |1000, 500, 600, 300, 100, 500
         |300, 200, 0, 400, 500, 100
         |300, 0, 0, 500, 100, 300
         |800, 400, 500, 200, 1000, 1100
         |200, 300, 400, 0, 300, 500
         |100, 150, 100, 100, 0, 60|];
store_price = 0.5;
keep_quantity = 100;
n_workhours = 8.0;

MiniZinc Model:
% Parameters
int: n_products; % Number of products
int: n_machines; % Number of machines
int: n_months; % Number of months
array[1..n_products] of int: profit; % Profit for each product
array[1..n_products, 1..n_machines] of float: time; % Time to manufacture each product on each machine
array[1..n_months, 1..n_machines] of int: maintain; % Maintenance time for each machine in each month
array[1..n_products, 1..n_months] of int: limit; % Limit for storing each product in each month
float: store_price; % Price for storing products
int: keep_quantity; % Quantity to keep for each product
float: n_workhours; % Number of working hours

% Variables
array[1..n_products, 1..n_months] of var 0..limit: sell; % Selling quantity for each product in each month
array[1..n_products, 1..n_months] of var 0..limit: manufacture; % Manufacturing quantity for each product in each month
array[1..n_products, 1..n_months] of var 0..limit: storage; % Storage quantity for each product in each month

% Constraints
constraint forall(i in 1..n_months, m in 1..n_machines)(
    sum(k in 1..n_products)(time[k, m] * manufacture[k, i]) <= n_workhours * (24 - maintain[i, m])
);

constraint forall(i in 1..n_months, k in 1..n_products)(
    if i = 1 then
        sell[k, i] + storage[k, i] = manufacture[k, i]
    else
        sell[k, i] + storage[k, i] = manufacture[k, i] + storage[k, i-1]
    endif
);

constraint forall(i in 1..n_months, k in 1..n_products)(
    sell[k, i] <= limit[k, i]
);

constraint forall(k in 1..n_products)(
    storage[k, n_months] = keep_quantity
);

% Objective
var float: total_profit = sum(i in 1..n_months, k in 1..n_products)(profit[k] * sell[k, i] - store_price * storage[k, i]);
solve maximize total_profit;

% Output
output ["sell: ", show(sell), "\n", "manufacture: ", show(manufacture), "\n", "storage: ", show(storage)];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.