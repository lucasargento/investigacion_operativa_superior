You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 370
- Name: O.R. with the Fairies Puzzle
- Domain: Puzzles
- Objective: satisfaction

Problem Description:
The problem is based on a puzzle called 'O.R. with the Fairies' from Martin J. Chlond. The puzzle involves fairies, children, colors, and nights. There are 5 fairies (Cloe, Ariana, Oliviana, Anya, Caroline), 3 children (Tyler, Jordan, David), 9 colors (silver, sage, gold, rose, turquoise, ivory, violet, emerald, earth), and a certain number of nights. Each child has a star of a certain color and each child receives a certain number of pearls each night. Each fairy visits the children on certain nights. The problem is to determine which color each fairy is attracted to, given the following constraints: the number of pearls received by each child on each night is consistent with the visits and the color of the stars, each fairy is attracted to a single color, at least one fairy is attracted to turquoise, and exactly one fairy is attracted to earth.


MiniZinc Model:
int: f; % fairy
int: h; % child
int: c; % color
int: n; % night

set of int: fairy  =  1..f; % Cloe, Ariana, Oliviana, Anya, Caroline
set of int: child  =  1..h; % Tyler, Jordan, David
set of int: color  =  1..c; % silver, sage, gold, rose, turquoise, ivory, violet, emerald, earth
set of int: night =  1..n;

array[child, color] of 0..1: star; % star(j,k) = 1 if child j has star color k, else 0

array[child, night] of int: pearl; % pearl(j,m) = no of pearls received by child j during night m
array[fairy, night] of 0..1: visit; % visit(i,m) = 1 if fairy i visits children on night m, else 0

array[fairy, color] of var 0..1: x;  % x(i,k) = 1 if fairy i attracted to color k, else 0

solve satisfy;

constraint
  % pearls received by each child on each night consistent with visits and stars
  forall(j in child,m in night) (
        sum(i in fairy,k in color)
         (visit[i,m]*star[j,k]*x[i,k]) = pearl[j,m]
  )
  /\ % each fairy attracted to a single color
  forall(i in fairy) (
    sum(k in color) (x[i,k]) = 1
  )

  /\ % at least one fairy attracted to turquoise
  sum(i in fairy) (x[i,5]) >= 1

  /\ % one fairy attracted to earth
  sum(i in fairy) (x[i,9]) = 1
;

%
% data
%
f = 5;
c = 9;
h = 3;
n = 5;

star = [|0, 0, 0, 1, 1, 0, 1, 0, 0,
        |0, 1, 0, 0, 0, 1, 1, 0, 0,
        |0, 1, 0, 0, 0, 0, 1, 1, 0|];

pearl = [|1,0, 0, 1, 1,
         |1,2, 1, 1, 2,
         |2,2, 2, 0, 1|];

visit = [|1, 0, 0, 1, 1, 
         |0, 0, 1, 1, 0,
         |0, 1, 0, 1, 1,
         |1, 1, 1, 0, 1,
         |1, 1, 1, 0, 0|];


output [
 if j = 1 then "\n" else " " endif ++
   show(x[i,j])
 | i in fairy, j in color
] ++ ["\n"];

Expected Output:
{
  "x": [
    [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ]
  ]
}

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.