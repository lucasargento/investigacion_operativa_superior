You are an expert in translating MiniZinc models to Python using OR-Tools. Your task is to translate the following optimization problem:

Problem Information:
- Example Number: 258
- Name: Chebychev Center of a Set
- Domain: Linear Programming
- Objective: maximization

Problem Description:
PROBLEM TYPE
LP

INPUT FORMAT 

{
    "A": [[a_i_j for j in 1, ..., N] for i in 1, ..., M],
    "b": [b_i for i in 1, ..., M]
}

OBJECTIVE
We are interested in finding a ball with the largest possible radius, which is entirely contained within the set P (The center of such a ball is called the Chebychev center of P).


Input Data (data.dzn):
M = 4;
N = 2;
A = [|1.0, 0.0| -1.0, 0.0| 0.0, 1.0| 0.0, -1.0|];
B = [2.0, 2.0, 3.0, 5.0];

MiniZinc Model:
% Parameters
int: M; % Number of constraints
int: N; % Dimension of the problem
array[1..M, 1..N] of float: A; % Coefficients of the constraints
array[1..M] of float: B; % Right-hand side of the constraints

% Variables
var float: r; % Radius of the ball
array[1..N] of var float: y; % Center of the ball

% Constraints
constraint forall(i in 1..M)(
  sum(j in 1..N)(A[i,j]*y[j]) + r*sqrt(sum(j in 1..N)(A[i,j]^2)) <= B[i]
);

% Objective
solve maximize r;

% Output
output ["{\"center\": [", join(", ", [show(y[j]) | j in 1..N]), "], \"radius\": ", show(r), "}"];

Instructions:
1. If a MiniZinc model is provided, translate it directly to Python using OR-Tools.
2. If no MiniZinc model is provided, first create a MiniZinc model and then translate it to Python.
3. The Python code should be complete and executable as-is.
4. Include all necessary imports and dependencies.
5. Define all variables before use.
6. Use explicit loops instead of list comprehensions.
7. Ensure the solution matches the expected output format.
8. Include comments explaining key parts of the implementation.

Please provide the complete Python code that solves this optimization problem using OR-Tools.