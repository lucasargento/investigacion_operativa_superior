{
  "parameters": [
    {
      "definition": "The number of links between nodes in the network.",
      "symbol": "NumLinks",
      "shape": []
    },
    {
      "definition": "The starting node for link ij",
      "symbol": "StartNode",
      "shape": [
        "L"
      ]
    },
    {
      "definition": "The ending node for link ij",
      "symbol": "EndNode",
      "shape": [
        "L"
      ]
    },
    {
      "definition": "The maximum capacity for link ij",
      "symbol": "Capacity",
      "shape": [
        "L"
      ]
    },
    {
      "definition": "The cost for transporting data through link ij",
      "symbol": "Cost",
      "shape": [
        "L"
      ]
    },
    {
      "definition": "The number of data flow requirements.",
      "symbol": "NumFlowReqs",
      "shape": []
    },
    {
      "definition": "The source node for data flow kl",
      "symbol": "SourceNode",
      "shape": [
        "F"
      ]
    },
    {
      "definition": "The destination node for data flow kl",
      "symbol": "DestinationNode",
      "shape": [
        "F"
      ]
    },
    {
      "definition": "The rate of data flow for flow kl",
      "symbol": "DataRate",
      "shape": [
        "F"
      ]
    }
  ],
  "description": "Consider a communication network consisting of nodes. These nodes are con\u00adnected by communication links. We are given a collection of one-way transmission links, described by a starting and an ending node. Each communication link can carry up to its capacity in data. There is a positive cost per unit of data transmitted along each link. Further, there are pairs of nodes between which data which is generated at the source node and must be transmitted to the destination node. Data with the same origin and destination may be split and transmitted along different paths. Find paths along which all data reach their intended destinations, while minimizing the total cost.",
  "metadata": {
    "name": "Minimum Cost Network Flow",
    "domain": "Network and Security",
    "objective": "minimization",
    "source": "NLP4LP",
    "constraints": [
      "forall",
      "sum",
      ">=",
      "<="
    ],
    "identifier": "nlp4lp_5"
  }
}